<map version="1.0.1">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1505705543106" ID="ID_1022947014" MODIFIED="1524732558149">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      React&amp;Redux
    </p>
    <p>
      &#22522;&#32447;&#29256;&#26412;&#65306;16.1.1
    </p>
  </body>
</html></richcontent>
<node CREATED="1505706645333" FOLDED="true" ID="ID_810871137" MODIFIED="1544455526687" POSITION="right" TEXT="&#x5feb;&#x901f;&#x5f00;&#x59cb;">
<node CREATED="1505706725462" ID="ID_1498308317" MODIFIED="1505734515714">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23433;&#35013;
    </p>
    <p>
      1&#12289;&#21019;&#24314;&#26032;&#24212;&#29992;
    </p>
    <p>
      &#20351;&#29992;Create React App
    </p>
    <p>
      npm install -g create-react-app
    </p>
    <p>
      create-react-app my-app
    </p>
    <p>
      
    </p>
    <p>
      cd my-app
    </p>
    <p>
      npm start
    </p>
    <p>
      2&#12289;&#28155;&#21152;React&#21040;&#29616;&#26377;&#39033;&#30446;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#20351;&#29992; npm &#23433;&#35013; React&#65306;
    </p>
    <p>
      npm init
    </p>
    <p>
      npm install --save react react-dom
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#22522;&#26412;&#20363;&#23376;
    </p>
    <p>
      import React from 'react';
    </p>
    <p>
      import ReactDOM from 'react-dom';
    </p>
    <p>
      ReactDOM.render(
    </p>
    <p>
      &#160;&#160;&lt;h1&gt;Hello, world!&lt;/h1&gt;,
    </p>
    <p>
      &#160;&#160;document.getElementById('root')
    </p>
    <p>
      );
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1505734969757" ID="ID_420312131" MODIFIED="1510820445587">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      JSX&#31616;&#20171;
    </p>
    <p>
      1&#12289;&#22312;JSX&#20013;&#20351;&#29992;&#34920;&#36798;&#24335;
    </p>
    <p>
      &#29992;&#22823;&#25324;&#21495;&#25324;&#36215;&#26469;
    </p>
    <p>
      &#25105;&#20204;&#20070;&#20889; JSX &#30340;&#26102;&#20505;&#19968;&#33324;&#37117;&#20250;&#24102;&#19978;&#25442;&#34892;&#21644;&#32553;&#36827;&#65292;&#36825;&#26679;&#21487;&#20197;&#22686;&#24378;&#20195;&#30721;&#30340;&#21487;&#35835;&#24615;&#12290;&#19982;&#27492;&#21516;&#26102;&#65292;&#25105;&#20204;&#21516;&#26679;&#25512;&#33616;&#22312; JSX &#20195;&#30721;&#30340;&#22806;&#38754;&#25193;&#19978;&#19968;&#20010;&#23567;&#25324;&#21495;&#65292;&#36825;&#26679;&#21487;&#20197;&#38450;&#27490; &#20998;&#21495;&#33258;&#21160;&#25554;&#20837; &#30340;bug&#65288;http://stackoverflow.com/q/2846283&#65289;
    </p>
    <p>
      2&#12289;JSX&#26412;&#36523;&#20854;&#23454;&#20063;&#26159;&#19968;&#31181;&#34920;&#36798;&#24335;
    </p>
    <p>
      &#22312;&#32534;&#35793;&#20043;&#21518;&#21602;&#65292;JSX &#20854;&#23454;&#20250;&#34987;&#36716;&#21270;&#20026;&#26222;&#36890;&#30340; JavaScript &#23545;&#35937;&#12290;
    </p>
    <p>
      &#36825;&#20063;&#23601;&#24847;&#21619;&#30528;&#65292;&#20320;&#20854;&#23454;&#21487;&#20197;&#22312; if &#25110;&#32773; for &#35821;&#21477;&#37324;&#20351;&#29992; JSX&#65292;&#23558;&#23427;&#36171;&#20540;&#32473;&#21464;&#37327;&#65292;&#24403;&#20316;&#21442;&#25968;&#20256;&#20837;&#65292;&#20316;&#20026;&#36820;&#22238;&#20540;&#37117;&#21487;&#20197;&#65306;
    </p>
    <p>
      function getGreeting(user) {
    </p>
    <p>
      &#160;&#160;if (user) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return &lt;h1&gt;Hello, {formatName(user)}!&lt;/h1&gt;;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      &#160;&#160;return &lt;h1&gt;Hello, Stranger.&lt;/h1&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      3&#12289;JSX&#23646;&#24615;
    </p>
    <p>
      &#20320;&#21487;&#20197;&#20351;&#29992;&#24341;&#21495;&#26469;&#23450;&#20041;&#20197;&#23383;&#31526;&#20018;&#20026;&#20540;&#30340;&#23646;&#24615;&#65306;
    </p>
    <p>
      const element = &lt;div tabIndex=&quot;0&quot;&gt;&lt;/div&gt;;
    </p>
    <p>
      &#20063;&#21487;&#20197;&#20351;&#29992;&#22823;&#25324;&#21495;&#26469;&#23450;&#20041;&#20197; JavaScript &#34920;&#36798;&#24335;&#20026;&#20540;&#30340;&#23646;&#24615;&#65306;
    </p>
    <p>
      const element = &lt;img src={user.avatarUrl}&gt;&lt;/img&gt;;
    </p>
    <p>
      &#20999;&#35760;&#20320;&#20351;&#29992;&#20102;&#22823;&#25324;&#21495;&#21253;&#35065;&#30340; JavaScript &#34920;&#36798;&#24335;&#26102;&#23601;&#19981;&#35201;&#20877;&#21040;&#22806;&#38754;&#22871;&#24341;&#21495;&#20102;&#12290;JSX &#20250;&#23558;&#24341;&#21495;&#24403;&#20013;&#30340;&#20869;&#23481;&#35782;&#21035;&#20026;&#23383;&#31526;&#20018;&#32780;&#19981;&#26159;&#34920;&#36798;&#24335;&#12290;
    </p>
    <p>
      4&#12289;JSX&#23884;&#22871;
    </p>
    <p>
      &#22240;&#20026; JSX &#30340;&#29305;&#24615;&#26356;&#25509;&#36817; JavaScript &#32780;&#19981;&#26159; HTML , &#25152;&#20197; React DOM &#20351;&#29992; camelCase &#23567;&#39548;&#23792;&#21629;&#21517; &#26469;&#23450;&#20041;&#23646;&#24615;&#30340;&#21517;&#31216;&#65292;&#32780;&#19981;&#26159;&#20351;&#29992; HTML &#30340;&#23646;&#24615;&#21517;&#31216;&#12290;
    </p>
    <p>
      &#20363;&#22914;&#65292;class &#21464;&#25104;&#20102; className&#65292;&#32780; tabindex &#21017;&#23545;&#24212;&#30528; tabIndex.
    </p>
    <p>
      5&#12289;JSX&#38450;&#27880;&#20837;&#25915;&#20987;
    </p>
    <p>
      &#20320;&#21487;&#20197;&#25918;&#24515;&#22320;&#22312; JSX &#24403;&#20013;&#20351;&#29992;&#29992;&#25143;&#36755;&#20837;&#65306;
    </p>
    <p>
      const title = response.potentiallyMaliciousInput;
    </p>
    <p>
      // &#30452;&#25509;&#20351;&#29992;&#26159;&#23433;&#20840;&#30340;&#65306;
    </p>
    <p>
      const element = &lt;h1&gt;{title}&lt;/h1&gt;;
    </p>
    <p>
      React DOM &#22312;&#28210;&#26579;&#20043;&#21069;&#40664;&#35748;&#20250; &#36807;&#28388; &#25152;&#26377;&#20256;&#20837;&#30340;&#20540;&#12290;&#23427;&#21487;&#20197;&#30830;&#20445;&#20320;&#30340;&#24212;&#29992;&#19981;&#20250;&#34987;&#27880;&#20837;&#25915;&#20987;&#12290;&#25152;&#26377;&#30340;&#20869;&#23481;&#22312;&#28210;&#26579;&#20043;&#21069;&#37117;&#34987;&#36716;&#25442;&#25104;&#20102;&#23383;&#31526;&#20018;&#12290;&#36825;&#26679;&#21487;&#20197;&#26377;&#25928;&#22320;&#38450;&#27490; XSS(&#36328;&#31449;&#33050;&#26412;) &#25915;&#20987;&#12290;
    </p>
    <p>
      6&#12289;JSX&#30340;&#23545;&#35937;&#34920;&#31034;
    </p>
    <p>
      const element = (
    </p>
    <p>
      &#160;&#160;&lt;h1 className=&quot;greeting&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;Hello, world!
    </p>
    <p>
      &#160;&#160;&lt;/h1&gt;
    </p>
    <p>
      );
    </p>
    <p>
      &#32463;babel&#22788;&#29702;&#20043;&#21518;
    </p>
    <p>
      const element = React.createElement(
    </p>
    <p>
      &#160;&#160;'h1',
    </p>
    <p>
      &#160;&#160;{className: 'greeting'},
    </p>
    <p>
      &#160;&#160;'Hello, world!'
    </p>
    <p>
      );
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1505736469915" ID="ID_887648474" MODIFIED="1505738177648">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20803;&#32032;&#28210;&#26579;
    </p>
    <p>
      1&#12289;&#26356;&#26032;&#20803;&#32032;&#28210;&#26579;
    </p>
    <p>
      React &#20803;&#32032;&#37117;&#26159;immutable &#19981;&#21487;&#21464;&#30340;&#12290;&#24403;&#20803;&#32032;&#34987;&#21019;&#24314;&#20043;&#21518;&#65292;&#20320;&#26159;&#26080;&#27861;&#25913;&#21464;&#20854;&#20869;&#23481;&#25110;&#23646;&#24615;&#30340;&#12290;&#19968;&#20010;&#20803;&#32032;&#23601;&#22909;&#20687;&#26159;&#21160;&#30011;&#37324;&#30340;&#19968;&#24103;&#65292;&#23427;&#20195;&#34920;&#24212;&#29992;&#30028;&#38754;&#22312;&#26576;&#19968;&#26102;&#38388;&#28857;&#30340;&#26679;&#23376;&#12290;
    </p>
    <p>
      &#26681;&#25454;&#25105;&#20204;&#29616;&#38454;&#27573;&#20102;&#35299;&#30340;&#26377;&#20851; React &#30693;&#35782;&#65292;&#26356;&#26032;&#30028;&#38754;&#30340;&#21807;&#19968;&#21150;&#27861;&#26159;&#21019;&#24314;&#19968;&#20010;&#26032;&#30340;&#20803;&#32032;&#65292;&#28982;&#21518;&#23558;&#23427;&#20256;&#20837; ReactDOM.render() &#26041;&#27861;
    </p>
    <p>
      &#22312;&#23454;&#38469;&#29983;&#20135;&#24320;&#21457;&#20013;, &#22823;&#22810;&#25968;React&#24212;&#29992;&#21482;&#20250;&#35843;&#29992;&#19968;&#27425; ReactDOM.render() . &#22312;&#19979;&#19968;&#20010;&#31456;&#33410;&#20013;&#25105;&#20204;&#23558;&#20250;&#35814;&#32454;&#20171;&#32461; &#26377;&#29366;&#24577;&#32452;&#20214; &#23454;&#29616; DOM &#26356;&#26032;&#26041;&#24335;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1510821183262" ID="ID_222957656" MODIFIED="1510895885555">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#32452;&#20214;&#21644;&#23646;&#24615;
    </p>
    <p>
      1&#12289;&#20989;&#25968;&#32452;&#20214;&#21644;&#31867;&#32452;&#20214;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#20989;&#25968;&#24335;
    </p>
    <p>
      function Welcome(props) {
    </p>
    <p>
      &#160;&#160;return &lt;h1&gt;Hello, {props.name}&lt;/h1&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#31867;&#24335;
    </p>
    <p>
      class Welcome extends React.Component {
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      2&#12289;&#28210;&#26579;&#32452;&#20214;
    </p>
    <p>
      3&#12289;&#32452;&#21512;&#32452;&#20214;
    </p>
    <p>
      4&#12289;&#23646;&#24615;&#26159;&#21482;&#35835;&#30340;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1510898649146" ID="ID_1988333292" MODIFIED="1511052710247">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#29366;&#24577;&#21644;&#29983;&#21629;&#21608;&#26399;
    </p>
    <p>
      1&#12289;state&#21482;&#36866;&#29992;&#20110;&#29992;&#31867;&#22768;&#26126;&#30340;&#32452;&#20214;
    </p>
    <p>
      2&#12289;state&#21644;prop&#30456;&#20284;&#65292;&#23427;&#26159;&#32452;&#20214;&#33258;&#24049;&#32500;&#25252;&#30340;
    </p>
    <p>
      3&#12289;&#27491;&#30830;&#30340;&#20351;&#29992;state
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#19981;&#35201;&#30452;&#25509;&#20462;&#25913;state&#65292;&#32780;&#35201;&#29992;this.setState&#26041;&#27861;&#65292;&#30452;&#25509;&#20351;&#29992;this.state&#21482;&#33021;&#26159;&#22312;&#26500;&#36896;&#20989;&#25968;&#20013;
    </p>
    <p>
      &#65288;2&#65289;&#12289;state&#26356;&#26032;&#21487;&#33021;&#26159;&#24322;&#27493;&#30340;
    </p>
    <p>
      &#20026;&#20102;&#24615;&#33021;&#26041;&#38754;&#30340;&#32771;&#34385;&#65292;React&#20250;&#23558;&#22810;&#20010;setState&#35843;&#29992;&#25171;&#21253;&#22788;&#29702;
    </p>
    <p>
      &#25152;&#20197;&#19981;&#33021;&#30452;&#25509;&#20381;&#36182;this.state&#21644;this.props&#26469;&#35745;&#31639;&#19979;&#19968;&#27493;&#30340;&#29366;&#24577;&#65292;&#20363;&#22914;&#65306;
    </p>
    <p>
      // Wrong
    </p>
    <p>
      this.setState({
    </p>
    <p>
      &#160;&#160;counter: this.state.counter + this.props.increment,
    </p>
    <p>
      });
    </p>
    <p>
      &#38024;&#23545;&#36825;&#31181;&#24773;&#20917;&#65292;&#25105;&#20204;&#21487;&#20197;&#65306;
    </p>
    <p>
      // Correct
    </p>
    <p>
      this.setState((prevState, props) =&gt; ({
    </p>
    <p>
      &#160;&#160;counter: prevState.counter + props.increment
    </p>
    <p>
      }));
    </p>
    <p>
      &#65288;3&#65289;&#12289;&#29366;&#24577;&#21512;&#24182;
    </p>
    <p>
      &#27604;&#22914;&#26377;&#19968;&#20010;&#23545;&#35937;&#25110;&#25968;&#32452;&#31867;&#22411;&#30340;&#29366;&#24577;&#65292;&#22312;&#26356;&#26032;&#26102;&#26159;&#21069;&#21512;&#24182;&#65292;&#21363;&#30452;&#25509;&#25226;&#30456;&#24212;state&#30340;&#23436;&#20840;&#26367;&#25442;&#25481;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511052713703" ID="ID_1541481288" MODIFIED="1511053488163">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22788;&#29702;&#20107;&#20214;
    </p>
    <p>
      1&#12289;React&#20107;&#20214;&#37319;&#29992;&#39548;&#23792;&#24335;&#20889;&#27861;&#65292;&#19981;&#35201;&#29992;&#24341;&#21495;&#25324;&#36215;&#26469;
    </p>
    <p>
      &lt;button onClick={activateLasers}&gt;
    </p>
    <p>
      &#160;&#160;Activate Lasers
    </p>
    <p>
      &lt;/button&gt;
    </p>
    <p>
      2&#12289;&#38459;&#27490;&#20107;&#20214;&#40664;&#35748;&#34892;&#20026;&#65292;&#38656;&#35201;&#26174;&#24335;&#35843;&#29992;e.preventDefault
    </p>
    <p>
      function ActionLink() {
    </p>
    <p>
      &#160;&#160;function handleClick(e) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;e.preventDefault();
    </p>
    <p>
      &#160;&#160;&#160;&#160;console.log('The link was clicked.');
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;a href=&quot;#&quot; onClick={handleClick}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;Click me
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/a&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      3&#12289;&#20351;&#29992;&#31867;&#35821;&#27861;&#65292;&#38656;&#35201;&#26174;&#24335;&#32465;&#23450;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#30340;this
    </p>
    <p>
      class Toggle extends React.Component {
    </p>
    <p>
      &#160;&#160;constructor(props) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;super(props);
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.state = {isToggleOn: true};
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;// This binding is necessary to make `this` work in the callback
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.handleClick = this.handleClick.bind(this);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;handleClick() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.setState(prevState =&gt; ({
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;isToggleOn: !prevState.isToggleOn
    </p>
    <p>
      &#160;&#160;&#160;&#160;}));
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;button onClick={this.handleClick}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{this.state.isToggleOn ? 'ON' : 'OFF'}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/button&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ReactDOM.render(
    </p>
    <p>
      &#160;&#160;&lt;Toggle /&gt;,
    </p>
    <p>
      &#160;&#160;document.getElementById('root')
    </p>
    <p>
      );
    </p>
    <p>
      4&#12289;&#21521;&#20107;&#20214;&#22788;&#29702;&#20989;&#25968;&#20256;&#21442;
    </p>
    <p>
      &lt;button onClick={(e) =&gt; this.deleteRow(id, e)}&gt;Delete Row&lt;/button&gt;
    </p>
    <p>
      &lt;button onClick={this.deleteRow.bind(this, id)}&gt;Delete Row&lt;/button&gt;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511077014918" ID="ID_1567515817" MODIFIED="1511077792307">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26465;&#20214;&#28210;&#26579;
    </p>
    <p>
      1&#12289;&#20363;&#23376;
    </p>
    <p>
      function Greeting(props) {
    </p>
    <p>
      &#160;&#160;const isLoggedIn = props.isLoggedIn;
    </p>
    <p>
      &#160;&#160;if (isLoggedIn) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return &lt;UserGreeting /&gt;;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      &#160;&#160;return &lt;GuestGreeting /&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      ReactDOM.render(
    </p>
    <p>
      &#160;&#160;// Try changing to isLoggedIn={true}:
    </p>
    <p>
      &#160;&#160;&lt;Greeting isLoggedIn={false} /&gt;,
    </p>
    <p>
      &#160;&#160;document.getElementById('root')
    </p>
    <p>
      );
    </p>
    <p>
      2&#12289;&#20803;&#32032;&#21464;&#37327;
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;const isLoggedIn = this.state.isLoggedIn;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;let button = null;
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (isLoggedIn) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;button = &lt;LogoutButton onClick={this.handleLogoutClick} /&gt;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;button = &lt;LoginButton onClick={this.handleLoginClick} /&gt;;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Greeting isLoggedIn={isLoggedIn} /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{button}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      3&#12289;&#29992;&amp;&amp;&#36816;&#31639;&#31526;&#23454;&#29616;&#20869;&#32852;&#26465;&#20214;
    </p>
    <p>
      function Mailbox(props) {
    </p>
    <p>
      &#160;&#160;const unreadMessages = props.unreadMessages;
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;h1&gt;Hello!&lt;/h1&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{unreadMessages.length &gt; 0 &amp;&amp;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;h2&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;You have {unreadMessages.length} unread messages.
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/h2&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      4&#12289;&#29992;?:&#36816;&#31639;&#31526;&#23454;&#29616;&#26465;&#20214;
    </p>
    <p>
      render() {
    </p>
    <p>
      &#160;&#160;const isLoggedIn = this.state.isLoggedIn;
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{isLoggedIn ? (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;LogoutButton onClick={this.handleLogoutClick} /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;) : (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;LoginButton onClick={this.handleLoginClick} /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;)}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      5&#12289;&#19981;&#28210;&#26579;&#32452;&#20214;&#20869;&#23481;&#65292;&#36820;&#22238;null&#65292;&#27880;&#24847;&#36820;&#22238;null&#32452;&#20214;&#30340;&#29983;&#21629;&#21608;&#26399;&#20989;&#25968;&#36824;&#26159;&#20250;&#25191;&#34892;&#30340;
    </p>
    <p>
      function WarningBanner(props) {
    </p>
    <p>
      &#160;&#160;if (!props.warn) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return null;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div className=&quot;warning&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;Warning!
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511077801659" ID="ID_1306441577" MODIFIED="1511078847792">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21015;&#34920;&#21644;key
    </p>
    <p>
      1&#12289;&#28210;&#26579;&#22810;&#32452;&#20214;
    </p>
    <p>
      const numbers = [1, 2, 3, 4, 5];
    </p>
    <p>
      const listItems = numbers.map((number) =&gt;
    </p>
    <p>
      &#160;&#160;&lt;li&gt;{number}&lt;/li&gt;
    </p>
    <p>
      );
    </p>
    <p>
      ReactDOM.render(
    </p>
    <p>
      &#160;&#160;&lt;ul&gt;{listItems}&lt;/ul&gt;,
    </p>
    <p>
      &#160;&#160;document.getElementById('root')
    </p>
    <p>
      );
    </p>
    <p>
      2&#12289;&#21015;&#34920;&#32452;&#20214;
    </p>
    <p>
      function NumberList(props) {
    </p>
    <p>
      &#160;&#160;const numbers = props.numbers;
    </p>
    <p>
      &#160;&#160;const listItems = numbers.map((number) =&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;li&gt;{number}&lt;/li&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;ul&gt;{listItems}&lt;/ul&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      const numbers = [1, 2, 3, 4, 5];
    </p>
    <p>
      ReactDOM.render(
    </p>
    <p>
      &#160;&#160;&lt;NumberList numbers={numbers} /&gt;,
    </p>
    <p>
      &#160;&#160;document.getElementById('root')
    </p>
    <p>
      );
    </p>
    <p>
      &#24403;&#36816;&#34892;&#35813;&#20195;&#30721;&#26102;&#65292;&#20250;&#25910;&#21040;&#19968;&#20010;&#21578;&#35686;&#65292;&#25552;&#31034;&#38656;&#35201;&#20026;&#21015;&#34920;&#39033;&#35774;&#32622;&#19968;&#20010;key&#23646;&#24615;
    </p>
    <p>
      3&#12289;key
    </p>
    <p>
      &#36319;vue&#30340;&#29992;&#27861;&#19968;&#26679;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511078868658" ID="ID_1217986100" MODIFIED="1511079976780">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#34920;&#21333;
    </p>
    <p>
      1&#12289;&#25511;&#21046;&#32452;&#20214;
    </p>
    <p>
      &#27604;vue&#35201;&#22797;&#26434;&#65292;&#36755;&#20837;&#21644;&#29366;&#24577;&#38388;&#30340;&#21516;&#27493;&#38656;&#35201;&#25163;&#21160;&#26469;&#23436;&#25104;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511092278532" ID="ID_1423876964" MODIFIED="1511106363885">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23558;&#29366;&#24577;&#25552;&#21319;
    </p>
    <p>
      1&#12289;&#22914;&#26524;&#20960;&#20010;&#32452;&#20214;&#35201;&#38024;&#23545;&#21516;&#19968;&#20010;&#25968;&#25454;&#21709;&#24212;UI&#65292;&#21017;&#21487;&#20197;&#23558;&#35813;&#25968;&#25454;&#25552;&#21462;&#20986;&#26469;&#65292;&#25918;&#21040;&#23427;&#20204;&#30340;&#29238;&#32452;&#20214;&#30340;state&#20013;&#65292;&#20877;&#36890;&#36807;prop&#20256;&#36882;&#32473;&#23376;&#32452;&#20214;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511106456389" ID="ID_978421334" MODIFIED="1511146976139">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#32452;&#21512;vs&#32487;&#25215;
    </p>
    <p>
      1&#12289;&#25512;&#33616;&#20351;&#29992;&#32452;&#21512;
    </p>
    <p>
      2&#12289;&#21253;&#21547;&#65288;&#31867;&#20284;vue&#30340;slot&#65289;
    </p>
    <p>
      function FancyBorder(props) {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div className={'FancyBorder FancyBorder-' + props.color}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{props.children}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      function WelcomeDialog() {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;FancyBorder color=&quot;blue&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;h1 className=&quot;Dialog-title&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Welcome
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/h1&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;p className=&quot;Dialog-message&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Thank you for visiting our spacecraft!
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/FancyBorder&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      &#20197;&#19979;&#31867;&#20284;&#20110;&#20855;&#21517;&#25554;&#27133;
    </p>
    <p>
      function SplitPane(props) {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div className=&quot;SplitPane&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;div className=&quot;SplitPane-left&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{props.left}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;div className=&quot;SplitPane-right&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;{props.right}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      function App() {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;SplitPane
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;left={
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Contacts /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;right={
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Chat /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;} /&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1511181460422" FOLDED="true" ID="ID_1195938303" MODIFIED="1543938482510" POSITION="right">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#28145;&#20837;&#24341;&#23548;
    </p>
  </body>
</html></richcontent>
<node CREATED="1511181478467" ID="ID_1882792523" MODIFIED="1511569602404">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#28145;&#20837;JSX
    </p>
    <p>
      1&#12289;JSX&#26159;React.createElement(component, props, ...children)&#30340;&#35821;&#27861;&#31958;
    </p>
    <p>
      2&#12289;&#22240;&#20026;&#36716;&#25442;&#21518;&#35201;&#29992;&#21040;React&#21644;&#20855;&#20307;&#30340;&#32452;&#20214;&#20195;&#30721;&#65292;&#25152;&#20197;&#19979;&#38754;&#20195;&#30721;&#20013;&#30340;import&#26159;&#24517;&#38656;&#30340;
    </p>
    <p>
      import React from 'react';
    </p>
    <p>
      import CustomButton from './CustomButton';
    </p>
    <p>
      function WarningButton() {
    </p>
    <p>
      &#160;&#160;// return React.createElement(CustomButton, {color: 'red'}, null);
    </p>
    <p>
      &#160;&#160;return &lt;CustomButton color=&quot;red&quot; /&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      3&#12289;&#26377;&#26102;&#20505;&#21487;&#33021;&#19968;&#20010;&#27169;&#22359;&#20250;&#26292;&#38706;&#20986;&#22810;&#20010;&#32452;&#20214;&#65292;&#37027;&#20040;&#32452;&#20214;&#21487;&#20197;&#36890;&#36807;&#28857;&#21495;&#26469;&#35775;&#38382;
    </p>
    <p>
      import React from 'react';
    </p>
    <p>
      const MyComponents = {
    </p>
    <p>
      &#160;&#160;DatePicker: function DatePicker(props) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return &lt;div&gt;Imagine a {props.color} datepicker here.&lt;/div&gt;;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      function BlueDatePicker() {
    </p>
    <p>
      &#160;&#160;return &lt;MyComponents.DatePicker color=&quot;blue&quot; /&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      4&#12289;&#33258;&#23450;&#20041;&#32452;&#20214;&#39318;&#23383;&#27597;&#24517;&#39035;&#22823;&#20889;&#65292;&#22914;&#26524;&#20320;&#21448;&#19968;&#20010;&#23567;&#20889;&#23383;&#27597;&#24320;&#22836;&#30340;&#32452;&#20214;&#65292;&#37027;&#20040;&#21487;&#20197;&#22312;&#20351;&#29992;&#23427;&#30452;&#25509;&#36171;&#20540;&#32473;&#19968;&#20010;&#22823;&#20889;&#23383;&#27597;&#24320;&#22836;&#30340;&#21464;&#37327;&#12290;
    </p>
    <p>
      5&#12289;&#36816;&#34892;&#26102;&#21462;&#32452;&#20214;&#31867;&#22411;
    </p>
    <p>
      import React from 'react';
    </p>
    <p>
      import { PhotoStory, VideoStory } from './stories';
    </p>
    <p>
      const components = {
    </p>
    <p>
      &#160;&#160;photo: PhotoStory,
    </p>
    <p>
      &#160;&#160;video: VideoStory
    </p>
    <p>
      };
    </p>
    <p>
      function Story(props) {
    </p>
    <p>
      &#160;&#160;// Wrong! JSX type can't be an expression.
    </p>
    <p>
      &#160;&#160;//return &lt;components[props.storyType] story={props.story} /&gt;;
    </p>
    <p>
      &#160;&#160;// &#36825;&#26679;&#22788;&#29702;&#19968;&#19979;&#23601;&#21487;&#20197;&#20102;
    </p>
    <p>
      &#160;&#160;const SpecificStory = components[props.storyType];
    </p>
    <p>
      &#160;&#160;return &lt;SpecificStory story={props.story} /&gt;;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511569604328" ID="ID_625342320" MODIFIED="1511570025265">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      JSX&#20013;&#30340;prop
    </p>
    <p>
      1&#12289;prop&#21487;&#20197;&#26159;&#34920;&#36798;&#24335;
    </p>
    <p>
      &lt;MyComponent foo={1 + 2 + 3 + 4} /&gt;
    </p>
    <p>
      2&#12289;if&#21644;for&#19981;&#26159;&#34920;&#36798;&#24335;&#25152;&#20197;&#19981;&#33021;&#30452;&#25509;&#29992;&#22312;prop&#20013;&#65292;&#25105;&#20204;&#21487;&#20197;&#36716;&#21464;&#19968;&#19979;
    </p>
    <p>
      function NumberDescriber(props) {
    </p>
    <p>
      &#160;&#160;let description;
    </p>
    <p>
      &#160;&#160;if (props.number % 2 == 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;description = &lt;strong&gt;even&lt;/strong&gt;;
    </p>
    <p>
      &#160;&#160;} else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;description = &lt;i&gt;odd&lt;/i&gt;;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      &#160;&#160;return &lt;div&gt;{props.number} is an {description} number&lt;/div&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      3&#12289;&#23383;&#31526;&#20018;
    </p>
    <p>
      &lt;MyComponent message=&quot;hello world&quot; /&gt;
    </p>
    <p>
      &lt;MyComponent message={'hello world'} /&gt;
    </p>
    <p>
      &#27880;&#24847;&#65292;&#22914;&#26524;&#30452;&#25509;&#25351;&#23450;&#20026;&#23383;&#31526;&#20018;&#21017;&#19981;&#20250;&#36827;&#34892;HTML&#36716;&#20041;&#65292;&#29992;{xxx}&#21487;&#20197;&#36716;&#20041;
    </p>
    <p>
      4&#12289;&#23646;&#24615;&#23637;&#24320;
    </p>
    <p>
      function App1() {
    </p>
    <p>
      &#160;&#160;return &lt;Greeting firstName=&quot;Ben&quot; lastName=&quot;Hector&quot; /&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      function App2() {
    </p>
    <p>
      &#160;&#160;const props = {firstName: 'Ben', lastName: 'Hector'};
    </p>
    <p>
      &#160;&#160;return &lt;Greeting {...props} /&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      &#20063;&#21487;&#20197;&#23558;&#19968;&#37096;&#20998;&#23646;&#24615;&#25343;&#20986;&#26469;&#21333;&#29420;&#23545;&#24453;&#65292;&#20854;&#20182;&#23646;&#24615;&#23637;&#24320;
    </p>
    <p>
      const Button = props =&gt; {
    </p>
    <p>
      &#160;&#160;const { kind, ...other } = props;
    </p>
    <p>
      &#160;&#160;const className = kind === &quot;primary&quot; ? &quot;PrimaryButton&quot; : &quot;SecondaryButton&quot;;
    </p>
    <p>
      &#160;&#160;return &lt;button className={className} {...other} /&gt;;
    </p>
    <p>
      };
    </p>
    <p>
      const App = () =&gt; {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;Button kind=&quot;primary&quot; onClick={() =&gt; console.log(&quot;clicked!&quot;)}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Hello World!
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/Button&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      };
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511570118924" ID="ID_689300801" MODIFIED="1511620678848">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      JSX&#20013;&#30340;&#23376;&#20803;&#32032;
    </p>
    <p>
      1&#12289;&#26631;&#31614;&#20043;&#38388;&#30340;&#20869;&#23481;&#20250;&#20316;&#20026;props.children&#23646;&#24615;&#20256;&#36882;&#12290;
    </p>
    <p>
      2&#12289;&#23383;&#31526;&#20018;
    </p>
    <p>
      &lt;MyComponent&gt;Hello world!&lt;/MyComponent&gt;
    </p>
    <p>
      &#22312;MyComponent&#20869;&#37096;&#21487;&#20197;&#36890;&#36807;props.children&#21462;&#21040;Hello world!&#65292;&#23383;&#31526;&#20018;&#20869;&#23481;&#26159;&#19981;&#36716;&#20041;&#30340;&#12290;
    </p>
    <p>
      JSX&#20250;&#31227;&#38500;&#25481;&#34892;&#22836;&#21644;&#34892;&#23614;&#30340;&#31354;&#30333;&#65292;&#20063;&#20250;&#31227;&#38500;&#25481;&#31354;&#34892;&#65292;&#26631;&#31614;&#21608;&#22260;&#30340;&#25442;&#34892;&#31526;&#20063;&#23558;&#31227;&#38500;&#25481;
    </p>
    <p>
      3&#12289;JSX&#23376;&#32452;&#20214;
    </p>
    <p>
      &lt;MyContainer&gt;
    </p>
    <p>
      &#160;&#160;&lt;MyFirstComponent /&gt;
    </p>
    <p>
      &#160;&#160;&lt;MySecondComponent /&gt;
    </p>
    <p>
      &lt;/MyContainer&gt;
    </p>
    <p>
      4&#12289;&#34920;&#36798;&#24335;&#20316;&#20026;children
    </p>
    <p>
      function Item(props) {
    </p>
    <p>
      &#160;&#160;return &lt;li&gt;{props.message}&lt;/li&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      function TodoList() {
    </p>
    <p>
      &#160;&#160;const todos = ['finish doc', 'submit pr', 'nag dan to review'];
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;ul&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{todos.map((message) =&gt; &lt;Item key={message} message={message} /&gt;)}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/ul&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      5&#12289;&#20989;&#25968;&#20316;&#20026;children
    </p>
    <p>
      // Calls the children callback numTimes to produce a repeated component
    </p>
    <p>
      function Repeat(props) {
    </p>
    <p>
      &#160;&#160;let items = [];
    </p>
    <p>
      &#160;&#160;for (let i = 0; i &lt; props.numTimes; i++) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;items.push(props.children(i));
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      &#160;&#160;return &lt;div&gt;{items}&lt;/div&gt;;
    </p>
    <p>
      }
    </p>
    <p>
      function ListOfTenThings() {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;Repeat numTimes={10}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{(index) =&gt; &lt;div key={index}&gt;This is item {index} in the list&lt;/div&gt;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/Repeat&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      6&#12289;&#24067;&#23572;&#20540;&#12289;null&#12289;undefined&#23558;&#34987;&#24573;&#30053;&#65292;&#20197;&#19979;&#28210;&#26579;&#32467;&#26524;&#26159;&#30456;&#21516;&#30340;
    </p>
    <p>
      &lt;div /&gt;
    </p>
    <p>
      &lt;div&gt;&lt;/div&gt;
    </p>
    <p>
      &lt;div&gt;{false}&lt;/div&gt;
    </p>
    <p>
      &lt;div&gt;{null}&lt;/div&gt;
    </p>
    <p>
      &lt;div&gt;{undefined}&lt;/div&gt;
    </p>
    <p>
      &lt;div&gt;{true}&lt;/div&gt;
    </p>
    <p>
      &#22914;&#26524;&#35201;&#26174;&#31034;&#20182;&#20204;&#65292;&#38656;&#35201;&#24378;&#21046;&#36716;&#25442;&#25104;&#23383;&#31526;&#20018;
    </p>
    <p>
      &lt;div&gt;
    </p>
    <p>
      &#160;&#160;My JavaScript variable is {String(myVariable)}.
    </p>
    <p>
      &lt;/div&gt;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511622205866" ID="ID_334580515" MODIFIED="1511622935544">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20351;&#29992;prop type&#20570;&#31867;&#22411;&#26816;&#26597;
    </p>
    <p>
      1&#12289;v15.5&#24320;&#22987;&#65292;React.PropTypes&#31227;&#21040;&#21333;&#29420;&#30340;prop-types&#21253;&#37324;
    </p>
    <p>
      2&#12289;&#20363;&#23376;
    </p>
    <p>
      import PropTypes from 'prop-types';
    </p>
    <p>
      class Greeting extends React.Component {
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      Greeting.propTypes = {
    </p>
    <p>
      &#160;&#160;name: PropTypes.string
    </p>
    <p>
      };
    </p>
    <p>
      3&#12289;&#40664;&#35748;&#23646;&#24615;&#20540;&#65292;&#20351;&#29992;defaultProps&#26469;&#35774;&#32622;
    </p>
    <p>
      class Greeting extends React.Component {
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      // Specifies the default values for props:
    </p>
    <p>
      Greeting.defaultProps = {
    </p>
    <p>
      &#160;&#160;name: 'Stranger'
    </p>
    <p>
      };
    </p>
    <p>
      // Renders &quot;Hello, Stranger&quot;:
    </p>
    <p>
      ReactDOM.render(
    </p>
    <p>
      &#160;&#160;&lt;Greeting /&gt;,
    </p>
    <p>
      &#160;&#160;document.getElementById('example')
    </p>
    <p>
      );
    </p>
    <p>
      &#25110;
    </p>
    <p>
      class Greeting extends React.Component {
    </p>
    <p>
      &#160;&#160;static defaultProps = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;name: 'stranger'
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;div&gt;Hello, {this.props.name}&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;)
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      4&#12289;&#31867;&#22411;&#26816;&#26597;&#26159;&#22312;&#40664;&#35748;&#23646;&#24615;&#29983;&#25928;&#21518;&#36827;&#34892;&#65292;&#25152;&#20197;&#23545;&#20110;&#40664;&#35748;&#23646;&#24615;&#20540;&#20063;&#20250;&#20570;&#26816;&#26597;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1540626294277" ID="ID_1737781627" MODIFIED="1540627930477">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Render Props
    </p>
    <p>
      &#19968;&#12289;&#21407;&#29702;
    </p>
    <p>
      1&#12289;A&#32452;&#20214;
    </p>
    <p>
      ...
    </p>
    <p>
      render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;return &lt;div&gt;{this.props.render(this.state)}&lt;/div&gt;
    </p>
    <p>
      }
    </p>
    <p>
      ...
    </p>
    <p>
      2&#12289;B&#32452;&#20214;
    </p>
    <p>
      ...
    </p>
    <p>
      render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;return &lt;A render={(stateOfA)=&gt;{some logic can use stateOfA}}&gt;&lt;/A&gt;
    </p>
    <p>
      }
    </p>
    <p>
      ...
    </p>
    <p>
      &#36825;&#26679;&#32452;&#20214;A&#30340;&#29366;&#24577;&#23601;&#22312;&#29702;&#35770;&#19978;&#22797;&#29992;&#20102;
    </p>
    <p>
      &#20108;&#12289;render props&#19981;&#26159;&#35828;&#19968;&#23450;&#35201;&#26377;&#19968;&#20010;&#31867;&#22411;&#26159;Function&#30340;render&#23646;&#24615;&#65292;&#20854;&#20182;&#31867;&#22411;&#26159;Function&#30340;&#23646;&#24615;&#20063;&#21487;&#20197;&#65288;foo&#12289;bar&#20219;&#24847;&#21517;&#23383;&#37117;&#21487;&#20197;&#65289;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511622952932" ID="ID_1920776710" MODIFIED="1511624118333">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#38745;&#24577;&#31867;&#22411;&#26816;&#26597;
    </p>
    <p>
      1&#12289;&#22914;Flow&#21644;Typescript&#65292;&#21487;&#20197;&#22312;&#36816;&#34892;&#20195;&#30721;&#20043;&#21069;&#26816;&#26597;&#31867;&#22411;&#38382;&#39064;
    </p>
    <p>
      2&#12289;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1511624121678" ID="ID_439722375" MODIFIED="1512058297365">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Ref&#21644;DOM
    </p>
    <p>
      1&#12289;&#22312;&#20856;&#22411;&#30340;React&#25968;&#25454;&#27969;&#20013;&#65292;props&#26159;&#29238;&#23376;&#32452;&#20214;&#20132;&#20114;&#30340;&#21807;&#19968;&#26041;&#24335;&#65292;&#35201;&#20462;&#25913;&#23376;&#32452;&#20214;&#65292;&#29992;&#26032;&#30340;props&#28210;&#26579;&#23427;&#21363;&#21487;&#65292;&#20294;&#26159;&#65292;&#26377;&#26102;&#20505;&#65292;&#20320;&#38656;&#35201;&#22312;&#25968;&#25454;&#27969;&#20043;&#22806;&#20462;&#25913;&#23376;&#32452;&#20214;&#65292;&#20462;&#25913;&#30340;&#20869;&#23481;&#21487;&#20197;&#26159;React&#32452;&#20214;&#65292;&#20063;&#21487;&#20197;&#26159;DOM&#20803;&#32032;&#65292;&#36825;&#20004;&#31181;&#24773;&#20917;React&#37117;&#21487;&#20197;&#20570;&#21040;&#20462;&#25913;
    </p>
    <p>
      2&#12289;&#20160;&#20040;&#26102;&#20505;&#23558;&#29992;&#21040;ref&#65311;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#31649;&#29702;focus&#12289;&#25991;&#26412;&#36873;&#25321;&#12289;&#25110;&#32773;media playback
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#21450;&#26102;&#35302;&#21457;&#21160;&#30011;
    </p>
    <p>
      &#65288;3&#65289;&#12289;&#19982;&#31532;&#19977;&#26041;DOM&#24211;&#25972;&#21512;
    </p>
    <p>
      3&#12289;&#22914;&#26524;&#21487;&#20197;&#22768;&#26126;&#35299;&#20915;&#65292;&#22362;&#20915;&#19981;&#35201;&#29992;ref
    </p>
    <p>
      4&#12289;ref&#23646;&#24615;&#21487;&#20197;&#29992;&#22312;&#20219;&#20309;&#32452;&#20214;&#19978;&#65292;&#23427;&#30340;&#20540;&#26159;&#19968;&#20010;&#20989;&#25968;&#65292;&#24403;&#32452;&#20214;mount&#21644;unmount&#30340;&#26102;&#20505;&#20250;&#35302;&#21457;&#23427;&#65292;&#25346;&#36733;&#26102;&#35302;&#21457;ref&#20250;&#20256;&#36882;DOM&#20803;&#32032;&#25110;Component&#30340;&#23454;&#20363;&#20316;&#20026;&#21442;&#25968;&#65292;&#21368;&#36733;&#26102;&#20256;&#36882;null&#20316;&#20026;&#21442;&#25968;&#12290;ref&#22312;componentDidMount&#21644;componentDidUpdate&#20043;&#21069;&#35302;&#21457;&#12290;
    </p>
    <p>
      5&#12289;&#24403;ref&#29992;&#22312;HTML&#20803;&#32032;&#19978;&#65292;&#35302;&#21457;&#26102;&#23427;&#30340;&#21442;&#25968;&#26159;HTML&#20803;&#32032;
    </p>
    <p>
      class CustomTextInput extends React.Component {
    </p>
    <p>
      &#160;&#160;constructor(props) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;super(props);
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.focusTextInput = this.focusTextInput.bind(this);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;focusTextInput() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// Explicitly focus the text input using the raw DOM API
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.textInput.focus();
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// Use the `ref` callback to store a reference to the text input DOM
    </p>
    <p>
      &#160;&#160;&#160;&#160;// element in an instance field (for example, this.textInput).
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;input
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type=&quot;text&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ref={(input) =&gt; { this.textInput = input; }} /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;input
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type=&quot;button&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value=&quot;Focus the text input&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;onClick={this.focusTextInput}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      6&#12289;&#24403;ref&#29992;&#22312;React&#32452;&#20214;&#19978;&#65292;&#35302;&#21457;&#26102;&#23427;&#30340;&#21442;&#25968;&#26159;React&#32452;&#20214;&#30340;&#23454;&#20363;&#65292;&#27880;&#24847;&#65292;&#21482;&#33021;&#29992;&#22312;&#31867;&#22768;&#26126;&#30340;&#32452;&#20214;&#19978;&#65292;&#19981;&#33021;&#29992;&#22312;&#20989;&#25968;&#22768;&#26126;&#30340;&#32452;&#20214;&#12290;&#19981;&#36807;&#65292;&#20989;&#25968;&#24335;&#32452;&#20214;render&#26041;&#27861;&#20013;&#20063;&#21487;&#20197;&#20351;&#29992;ref
    </p>
    <p>
      function CustomTextInput(props) {
    </p>
    <p>
      &#160;&#160;// textInput must be declared here so the ref callback can refer to it
    </p>
    <p>
      &#160;&#160;let textInput = null;
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;function handleClick() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;textInput.focus();
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;input
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type=&quot;text&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ref={(input) =&gt; { textInput = input; }} /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;input
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;type=&quot;button&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;value=&quot;Focus the text input&quot;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;onClick={handleClick}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;/&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);&#160;
    </p>
    <p>
      }
    </p>
    <p>
      7&#12289;&#23558;Ref&#26292;&#38706;&#32473;&#29238;&#32452;&#20214;&#65306;&#19968;&#33324;&#19981;&#24314;&#35758;&#36825;&#20040;&#20570;&#65292;&#22240;&#20026;&#20250;&#25171;&#30772;&#32452;&#20214;&#30340;&#23553;&#35013;&#65292;&#26377;&#26102;&#20505;&#38656;&#35201;&#22312;&#29238;&#32452;&#20214;&#25511;&#21046;&#23376;&#32452;&#20214;&#20013;&#20803;&#32032;&#33719;&#21462;&#28966;&#28857;&#65292;&#25110;&#32773;&#35201;&#33719;&#21462;&#22823;&#23567;&#20301;&#32622;&#20449;&#24687;&#30340;&#26102;&#20505;&#65292;&#36825;&#31181;&#20570;&#27861;&#23601;&#33021;&#27966;&#19978;&#29992;&#22330;&#12290;&#27880;&#24847;&#36825;&#31181;&#29992;&#27861;&#20063;&#21487;&#20197;&#29992;&#22312;&#20989;&#25968;&#24335;&#32452;&#20214;&#19978;&#65288;&#22914;&#19979;&#20195;&#30721;&#65289;
    </p>
    <p>
      function CustomTextInput(props) {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;input ref={props.inputRef} /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      class Parent extends React.Component {
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;CustomTextInput
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;inputRef={el =&gt; this.inputElement = el}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;/&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      8&#12289;&#35686;&#21578;&#65306;&#22914;&#26524;&#26159;&#23450;&#20041;&#34892;&#20869;&#30340;ref&#65292;&#21017;&#22312;&#26356;&#26032;&#30340;&#26102;&#20505;&#20250;&#35302;&#21457;&#20004;&#27425;&#65288;&#19981;&#26159;&#34892;&#20869;&#23601;&#19981;&#35302;&#21457;&#20004;&#27425;&#65311;&#65289;&#65292;&#19968;&#27425;&#21442;&#25968;&#26159;null&#65292;&#19968;&#27425;&#21442;&#25968;&#26159;DOM&#25110;&#32452;&#20214;&#23454;&#20363;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512058309515" ID="ID_1808104244" MODIFIED="1540989497807">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Uncontrolled component
    </p>
    <p>
      1&#12289;&#22823;&#37096;&#20998;&#24773;&#20917;&#19979;&#65292;&#25105;&#20204;&#25512;&#33616;&#20351;&#29992;controlled component&#65292;&#20854;&#20013;&#34920;&#21333;&#25968;&#25454;&#26159;&#30001;React&#32452;&#20214;&#31649;&#29702;&#30340;&#12290;&#21478;&#22806;&#19968;&#31181;&#26159;uncontrolled component&#65292;&#34920;&#21333;&#25968;&#25454;&#30452;&#25509;&#25805;&#20316;DOM
    </p>
    <p>
      2&#12289;uncontrolled component&#30340;&#20363;&#23376;
    </p>
    <p>
      class NameForm extends React.Component {
    </p>
    <p>
      &#160;&#160;constructor(props) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;super(props);
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.handleSubmit = this.handleSubmit.bind(this);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;handleSubmit(event) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;alert('A name was submitted: ' + this.input.value);
    </p>
    <p>
      &#160;&#160;&#160;&#160;event.preventDefault();
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;form onSubmit={this.handleSubmit}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;label&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Name:
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;input type=&quot;text&quot; ref={(input) =&gt; this.input = input} /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;/label&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;input type=&quot;submit&quot; value=&quot;Submit&quot; /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/form&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      3&#12289;&#40664;&#35748;&#20540;&#65306;&#22312;React&#28210;&#26579;&#21608;&#26399;&#20013;&#65292;&#34920;&#21333;&#20803;&#32032;&#30340;value&#23646;&#24615;&#65292;&#20250;&#35206;&#30422;&#23545;&#24212;DOM&#20013;&#30340;value&#20540;&#65292;&#22312;uncontrolled component&#20013;&#65292;&#24448;&#24448;&#24076;&#26395;&#35774;&#32622;&#19968;&#20010;&#21021;&#22987;value&#20540;&#65292;&#28982;&#21518;&#20351;&#29992;uncontroll&#26041;&#27861;&#36827;&#34892;&#25511;&#21046;&#65292;&#36825;&#31181;&#24773;&#20917;&#19979;&#24212;&#35813;&#20351;&#29992;defaultValue&#26469;&#26367;&#20195;value
    </p>
    <p>
      defaultValue&#21644;value&#23646;&#24615;&#27809;&#26377;&#24517;&#35201;&#21516;&#26102;&#35774;&#32622;&#65292;&#21516;&#26102;&#35774;&#32622;&#30340;&#35805;value&#20248;&#20808;&#32423;&#26356;&#39640;&#65292;&#32780;&#19988;&#19968;&#26086;&#35774;&#32622;&#20102;value&#23646;&#24615;&#65292;&#37027;&#20040;&#36825;&#20010;input&#19968;&#23450;&#26159;&#21463;&#25511;&#32452;&#20214;&#65292;&#30001;React&#26469;&#32452;&#32455;&#23427;&#30340;value&#20540;
    </p>
    <p>
      4&#12289;input[type=file]&#19968;&#23450;&#26159;&#38750;&#21463;&#25511;&#32452;&#20214;&#65292;&#22240;&#20026;&#23427;&#30340;&#20540;&#21482;&#33021;&#30001;&#29992;&#25143;&#20915;&#23450;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512488547045" ID="ID_1862513495" MODIFIED="1512540074711">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#24615;&#33021;&#20248;&#21270;
    </p>
    <p>
      1&#12289;&#36890;&#36807;React&#24320;&#21457;&#24037;&#20855;&#26597;&#30475;&#20351;&#29992;&#30340;&#26159;&#24320;&#21457;&#29256;&#26412;&#65288;&#32972;&#26223;&#32418;&#33394;&#65289;&#36824;&#26159;&#29983;&#20135;&#29256;&#26412;&#65288;&#32972;&#26223;&#40657;&#33394;&#65289;
    </p>
    <p>
      2&#12289;&#20351;&#29992;chrome&#30340;performance tab&#26597;&#30475;&#32452;&#20214;&#29983;&#21629;&#21608;&#26399;&#20989;&#25968;&#32791;&#26102;&#65292;&#24405;&#21046;&#21518;&#26597;&#30475;&#8220;User Timing&#8221;&#20998;&#32452;&#30340;&#25968;&#25454;&#12290;
    </p>
    <p>
      3&#12289;&#24456;&#38271;&#30340;&#21015;&#34920;&#25968;&#25454;&#65292;&#20351;&#29992;&#8220;windowing&#8221;&#25216;&#26415;&#36827;&#34892;&#20248;&#21270;&#12290;React Virtualized&#26159;&#19968;&#20010;&#27604;&#36739;&#27969;&#34892;&#30340;&#24211;&#12290;
    </p>
    <p>
      4&#12289;&#24403;&#32452;&#20214;&#30340;prop&#25110;state&#21464;&#21270;&#30340;&#26102;&#20505;&#65292;React&#36890;&#36807;&#23545;&#27604;&#21464;&#26356;&#21069;&#21518;&#30340;&#32452;&#20214;&#26159;&#21542;&#30830;&#23454;&#21457;&#29983;&#20102;&#21464;&#21270;&#65292;&#26469;&#20915;&#23450;&#35201;&#19981;&#35201;&#37325;&#26032;&#32472;&#21046;&#12290;&#22312;&#26576;&#20123;&#24773;&#20917;&#19979;&#65292;&#25105;&#20204;&#21487;&#20197;&#23454;&#29616;shouldComponentUpdate(nextProp, nextState)&#26469;&#21578;&#35785;React&#35201;&#19981;&#35201;&#26356;&#26032;&#23427;
    </p>
    <p>
      5&#12289;&#20351;&#29992;PureComponent&#20250;&#40664;&#35748;&#21253;&#21547;&#19968;&#20010;shouldComponentUpdate&#23450;&#20041;
    </p>
    <p>
      class CounterButton extends React.PureComponent {
    </p>
    <p>
      &#160;&#160;constructor(props) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;super(props);
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.state = {count: 1};
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;button
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;color={this.props.color}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;onClick={() =&gt; this.setState(state =&gt; ({count: state.count + 1}))}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Count: {this.state.count}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/button&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512558290087" ID="ID_1508982442" MODIFIED="1512558502227">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19981;&#20351;&#29992;ES6&#30340;React
    </p>
    <p>
      1&#12289;&#22768;&#26126;
    </p>
    <p>
      var createReactClass = require('create-react-class');
    </p>
    <p>
      var Greeting = createReactClass({
    </p>
    <p>
      &#160;&#160;render: function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return &lt;h1&gt;Hello, {this.props.name}&lt;/h1&gt;;
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      });
    </p>
    <p>
      2&#12289;&#22768;&#26126;&#40664;&#35748;&#23646;&#24615;
    </p>
    <p>
      var Greeting = createReactClass({
    </p>
    <p>
      &#160;&#160;getDefaultProps: function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;name: 'Mary'
    </p>
    <p>
      &#160;&#160;&#160;&#160;};
    </p>
    <p>
      &#160;&#160;},
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;// ...
    </p>
    <p>
      
    </p>
    <p>
      });
    </p>
    <p>
      3&#12289;&#35774;&#32622;&#21021;&#22987;&#29366;&#24577;
    </p>
    <p>
      var Counter = createReactClass({
    </p>
    <p>
      &#160;&#160;getInitialState: function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return {count: this.props.initialCount};
    </p>
    <p>
      &#160;&#160;},
    </p>
    <p>
      &#160;&#160;// ...
    </p>
    <p>
      });
    </p>
    <p>
      4&#12289;&#26041;&#27861;&#33258;&#21160;&#32465;&#23450;this
    </p>
    <p>
      var SayHello = createReactClass({
    </p>
    <p>
      &#160;&#160;getInitialState: function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return {message: 'Hello!'};
    </p>
    <p>
      &#160;&#160;},
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;handleClick: function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;alert(this.state.message);
    </p>
    <p>
      &#160;&#160;},
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;render: function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;button onClick={this.handleClick}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Say hello
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/button&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      });
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512559707770" ID="ID_997783671" MODIFIED="1512574554916">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19981;&#20351;&#29992;JSX&#30340;React
    </p>
    <p>
      1&#12289;JSX&#20854;&#23454;&#26159;React.createElement(component, props, ...children)&#30340;&#35821;&#27861;&#31958;
    </p>
    <p>
      2&#12289;&#22312;&#32447;Babel&#32534;&#35793;&#22120;&#65306;https://babeljs.io/repl/#?presets=react&amp;code_lz=GYVwdgxgLglg9mABACwKYBt1wBQEpEDeAUIogE6pQhlIA8AJjAG4B8AEhlogO5xnr0AhLQD0jVgG4iAXyJA
    </p>
    <p>
      3&#12289;&#22914;&#26524;&#37325;&#22797;&#36755;&#20837;React.createElement&#24456;&#40635;&#28902;&#65292;&#21487;&#20197;&#23558;&#23427;&#20445;&#23384;&#21040;&#19968;&#20010;&#21464;&#37327;&#20013;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512575822617" FOLDED="true" ID="ID_1379926266" MODIFIED="1540645030817">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19978;&#19979;&#25991;Context
    </p>
    <p>
      1&#12289;Context &#36890;&#36807;&#32452;&#20214;&#26641;&#25552;&#20379;&#20102;&#19968;&#20010;&#20256;&#36882;&#25968;&#25454;&#30340;&#26041;&#27861;&#65292;&#20174;&#32780;&#36991;&#20813;&#20102;&#22312;&#27599;&#19968;&#20010;&#23618;&#32423;&#25163;&#21160;&#30340;&#20256;&#36882; props &#23646;&#24615;&#12290;
    </p>
    <p>
      2&#12289;&#22312;&#19968;&#20010;&#20856;&#22411;&#30340; React &#24212;&#29992;&#20013;&#65292;&#25968;&#25454;&#26159;&#36890;&#36807; props &#23646;&#24615;&#30001;&#19978;&#21521;&#19979;&#65288;&#30001;&#29238;&#21450;&#23376;&#65289;&#30340;&#36827;&#34892;&#20256;&#36882;&#30340;&#65292;&#20294;&#36825;&#23545;&#20110;&#26576;&#20123;&#31867;&#22411;&#30340;&#23646;&#24615;&#32780;&#35328;&#26159;&#26497;&#20854;&#32321;&#29712;&#30340;&#65288;&#20363;&#22914;&#65306;&#22320;&#21306;&#20559;&#22909;&#65292;UI&#20027;&#39064;&#65289;&#65292;&#36825;&#26159;&#24212;&#29992;&#31243;&#24207;&#20013;&#35768;&#22810;&#32452;&#20214;&#37117;&#25152;&#38656;&#35201;&#30340;&#12290; Context &#25552;&#20379;&#20102;&#19968;&#31181;&#22312;&#32452;&#20214;&#20043;&#38388;&#20849;&#20139;&#27492;&#31867;&#20540;&#30340;&#26041;&#24335;&#65292;&#32780;&#19981;&#24517;&#36890;&#36807;&#32452;&#20214;&#26641;&#30340;&#27599;&#20010;&#23618;&#32423;&#26174;&#24335;&#22320;&#20256;&#36882; props &#12290;
    </p>
    <p>
      3&#12289;React.createContext
    </p>
    <p>
      const {Provider, Consumer} = React.createContext(defaultValue);
    </p>
    <p>
      &#21019;&#24314;&#19968;&#23545; { Provider, Consumer }&#12290;&#24403; React &#28210;&#26579; context &#32452;&#20214; Consumer &#26102;&#65292;&#23427;&#23558;&#20174;&#32452;&#20214;&#26641;&#30340;&#19978;&#23618;&#20013;&#26368;&#25509;&#36817;&#30340;&#21305;&#37197;&#30340; Provider &#35835;&#21462;&#24403;&#21069;&#30340; context &#20540;&#12290;
    </p>
    <p>
      &#22914;&#26524;&#19978;&#23618;&#30340;&#32452;&#20214;&#26641;&#27809;&#26377;&#19968;&#20010;&#21305;&#37197;&#30340; Provider&#65292;&#32780;&#27492;&#26102;&#20320;&#38656;&#35201;&#28210;&#26579;&#19968;&#20010; Consumer &#32452;&#20214;&#65292;&#37027;&#20040;&#20320;&#21487;&#20197;&#29992;&#21040; defaultValue &#12290;&#36825;&#26377;&#21161;&#20110;&#22312;&#19981;&#23553;&#35013;&#23427;&#20204;&#30340;&#24773;&#20917;&#19979;&#23545;&#32452;&#20214;&#36827;&#34892;&#27979;&#35797;&#12290;
    </p>
    <p>
      4&#12289;&#27599;&#24403;Provider&#30340;&#20540;&#21457;&#36865;&#25913;&#21464;&#26102;, &#20316;&#20026;Provider&#21518;&#20195;&#30340;&#25152;&#26377;Consumers&#37117;&#20250;&#37325;&#26032;&#28210;&#26579;&#12290; &#20174;Provider&#21040;&#20854;&#21518;&#20195;&#30340;Consumers&#20256;&#25773;&#19981;&#21463;shouldComponentUpdate&#26041;&#27861;&#30340;&#32422;&#26463;&#65292;&#22240;&#27492;&#21363;&#20351;&#31062;&#20808;&#32452;&#20214;&#36864;&#20986;&#26356;&#26032;&#26102;&#65292;&#21518;&#20195;Consumer&#20063;&#20250;&#34987;&#26356;&#26032;&#12290;
    </p>
  </body>
</html></richcontent>
<node CREATED="1540644783552" ID="ID_1585726984" MODIFIED="1540644790015">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      // &#21019;&#24314;&#19968;&#20010; theme Context,&#160;&#160;&#40664;&#35748; theme &#30340;&#20540;&#20026; light
    </p>
    <p>
      const ThemeContext = React.createContext('light');
    </p>
    <p>
      
    </p>
    <p>
      function ThemedButton(props) {
    </p>
    <p>
      &#160;&#160;// ThemedButton &#32452;&#20214;&#20174; context &#25509;&#25910; theme
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;ThemeContext.Consumer&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{theme =&gt; &lt;Button {...props} theme={theme} /&gt;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/ThemeContext.Consumer&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      // &#20013;&#38388;&#32452;&#20214;
    </p>
    <p>
      function Toolbar(props) {
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;ThemedButton /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      class App extends React.Component {
    </p>
    <p>
      &#160;&#160;render() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;ThemeContext.Provider value=&quot;dark&quot;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt;Toolbar /&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&lt;/ThemeContext.Provider&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1540736154606" ID="ID_1441167978" MODIFIED="1540736168529">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#39640;&#38454;&#32452;&#20214;HOC
    </p>
    <p>
      &#39640;&#38454;&#32452;&#20214;&#65288;HOC&#65289;&#26159;react&#20013;&#23545;&#32452;&#20214;&#36923;&#36753;&#36827;&#34892;&#37325;&#29992;&#30340;&#39640;&#32423;&#25216;&#26415;&#12290;&#20294;&#39640;&#38454;&#32452;&#20214;&#26412;&#36523;&#24182;&#19981;&#26159;React API&#12290;&#23427;&#21482;&#26159;&#19968;&#31181;&#27169;&#24335;&#65292;&#36825;&#31181;&#27169;&#24335;&#26159;&#30001;react&#33258;&#36523;&#30340;&#32452;&#21512;&#24615;&#36136;&#24517;&#28982;&#20135;&#29983;&#30340;&#12290;
    </p>
    <p>
      &#20855;&#20307;&#32780;&#35328;&#65292;&#39640;&#38454;&#32452;&#20214;&#23601;&#26159;&#19968;&#20010;&#20989;&#25968;&#65292;&#19988;&#35813;&#20989;&#25968;&#25509;&#21463;&#19968;&#20010;&#32452;&#20214;&#20316;&#20026;&#21442;&#25968;&#65292;&#24182;&#36820;&#22238;&#19968;&#20010;&#26032;&#30340;&#32452;&#20214;
    </p>
    <p>
      const EnhancedComponent = higherOrderComponent(WrappedComponent);
    </p>
    <p>
      &#23545;&#27604;&#32452;&#20214;&#23558;props&#23646;&#24615;&#36716;&#21464;&#25104;UI&#65292;&#39640;&#38454;&#32452;&#20214;&#21017;&#26159;&#23558;&#19968;&#20010;&#32452;&#20214;&#36716;&#25442;&#25104;&#21478;&#19968;&#20010;&#26032;&#32452;&#20214;&#12290;
    </p>
    <p>
      &#39640;&#38454;&#32452;&#20214;&#22312;React&#31532;&#19977;&#26041;&#24211;&#20013;&#24456;&#24120;&#35265;&#65292;&#27604;&#22914;Redux&#30340;connect&#26041;&#27861;&#21644;Relay&#30340;createContainer.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512576098861" ID="ID_1136087011" MODIFIED="1512576981854">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Portals
    </p>
    <p>
      1&#12289;&#27604;&#22914;&#19979;&#38754;&#36825;&#20010;&#20363;&#23376;
    </p>
    <p>
      render() {
    </p>
    <p>
      &#160;&#160;// React mounts a new div and renders the children into it
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{this.props.children}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      &#23427;&#20250;&#25346;&#36733;&#19968;&#20010;&#26032;&#30340;div&#65292;&#24182;&#22312;&#20854;&#20013;&#25554;&#20837;&#23376;&#33410;&#28857;&#12290;
    </p>
    <p>
      &#20294;&#26159;&#26377;&#26102;&#25105;&#20204;&#24076;&#26395;&#25226;&#23427;&#30340;&#20869;&#23481;&#25346;&#36733;&#21040;&#19968;&#20010;&#24050;&#32463;&#23384;&#22312;&#30340;DOM&#33410;&#28857;&#20013;&#65292;&#21487;&#20197;&#37319;&#29992;&#22914;&#19979;&#20570;&#27861;
    </p>
    <p>
      render() {
    </p>
    <p>
      &#160;&#160;// React does *not* create a new div. It renders the children into `domNode`.
    </p>
    <p>
      &#160;&#160;// `domNode` is any valid DOM node, regardless of its location in the DOM.
    </p>
    <p>
      &#160;&#160;return ReactDOM.createPortal(
    </p>
    <p>
      &#160;&#160;&#160;&#160;this.props.children,
    </p>
    <p>
      &#160;&#160;&#160;&#160;domNode,
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1540986675374" ID="ID_1142903588" MODIFIED="1540986945020">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Fragments
    </p>
    <p>
      1&#12289;React&#35268;&#23450;render&#26041;&#27861;&#36820;&#22238;&#30340;JSX&#24517;&#38656;&#26377;&#19968;&#20010;&#23481;&#22120;
    </p>
    <p>
      2&#12289;&#36825;&#20250;&#23548;&#33268;&#19968;&#20123;&#40635;&#28902;&#65292;Fragment&#26159;&#29992;&#26469;&#35299;&#20915;&#36825;&#20010;&#38382;&#39064;&#30340;
    </p>
    <p>
      3&#12289;Fragment&#30340;&#20889;&#27861;
    </p>
    <p>
      &lt;&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;&lt;/div&gt;
    </p>
    <p>
      &lt;/&gt;
    </p>
    <p>
      &#25110;&#32773;
    </p>
    <p>
      &lt;React.Fragment&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;&lt;/div&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;div&gt;&lt;/div&gt;
    </p>
    <p>
      &lt;/React.Fragment&gt;
    </p>
    <p>
      &#21069;&#32773;&#26159;&#21518;&#32773;&#30340;&#35821;&#27861;&#31958;&#65292;&#26377;&#26102;&#20505;&#35201;&#28210;&#26579;Fragment&#21015;&#34920;&#65292;&#27492;&#26102;&#35201;&#35774;&#32622;key&#23646;&#24615;&#65292;&#36825;&#20010;&#26102;&#20505;&#21482;&#33021;&#29992;React.Fragment&#65292;&#32780;&#19988;&#30446;&#21069;&#21482;&#26377;key&#23646;&#24615;&#33021;&#29992;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1540628810309" FOLDED="true" ID="ID_148175221" MODIFIED="1540986409510" POSITION="right" TEXT="PureComponent">
<node CREATED="1540628819045" ID="ID_558704731" MODIFIED="1540629158100">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;PureComponent&#21644;Component&#19968;&#26679;&#65292;&#21482;&#26159;&#22312;shouldComponentUpdate&#21028;&#26029;&#19978;&#20351;&#29992;&#30340;&#26159;&#27973;&#23545;&#27604;&#65292;&#36825;&#26679;&#30340;&#35805;&#20250;&#25552;&#39640;&#24615;&#33021;
    </p>
    <p>
      2&#12289;&#22914;&#26524;PureComponent&#25552;&#20379;&#20102;shouldComponentUpdate&#65292;&#21017;&#20351;&#29992;&#32452;&#20214;&#33258;&#36523;&#30340;&#65292;&#21542;&#21017;&#20351;&#29992;&#40664;&#35748;&#30340;&#27973;&#23545;&#27604;&#26041;&#27861;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1524732562215" ID="ID_1188365749" MODIFIED="1544505933003" POSITION="right" TEXT="Redux">
<node CREATED="1538385581186" FOLDED="true" ID="ID_1297279110" MODIFIED="1542180273379" TEXT="&#x81ea;&#x8ff0;">
<node CREATED="1538385590783" ID="ID_765741199" MODIFIED="1538385833492">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;Redux &#30001; Flux &#28436;&#21464;&#32780;&#26469;&#65292;&#20294;&#21463; Elm &#30340;&#21551;&#21457;&#65292;&#36991;&#24320;&#20102; Flux &#30340;&#22797;&#26434;&#24615;&#12290; &#19981;&#31649;&#20320;&#26377;&#27809;&#26377;&#20351;&#29992;&#36807;&#23427;&#20204;&#65292;&#21482;&#38656;&#20960;&#20998;&#38047;&#23601;&#33021;&#19978;&#25163; Redux&#12290;
    </p>
    <p>
      2&#12289;&#24212;&#29992;&#20013;&#25152;&#26377;&#30340; state &#37117;&#20197;&#19968;&#20010;&#23545;&#35937;&#26641;&#30340;&#24418;&#24335;&#20648;&#23384;&#22312;&#19968;&#20010;&#21333;&#19968;&#30340; store &#20013;&#12290; &#24799;&#19968;&#25913;&#21464; state &#30340;&#21150;&#27861;&#26159;&#35302;&#21457; action&#65292;&#19968;&#20010;&#25551;&#36848;&#21457;&#29983;&#20160;&#20040;&#30340;&#23545;&#35937;&#12290; &#20026;&#20102;&#25551;&#36848; action &#22914;&#20309;&#25913;&#21464; state &#26641;&#65292;&#20320;&#38656;&#35201;&#32534;&#20889; reducers&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1524816575525" FOLDED="true" ID="ID_174761253" MODIFIED="1542180295808" TEXT="&#x4ecb;&#x7ecd;">
<node CREATED="1524732569025" ID="ID_1752573410" MODIFIED="1524816872339">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#24212;&#29992;&#20013;&#25152;&#26377;&#30340; state &#37117;&#20197;&#19968;&#20010;&#23545;&#35937;&#26641;&#30340;&#24418;&#24335;&#20648;&#23384;&#22312;&#19968;&#20010;&#21333;&#19968;&#30340; store &#20013;&#12290; &#24799;&#19968;&#25913;&#21464; state &#30340;&#21150;&#27861;&#26159;&#35302;&#21457; action&#65292;&#19968;&#20010;&#25551;&#36848;&#21457;&#29983;&#20160;&#20040;&#30340;&#23545;&#35937;&#12290; &#20026;&#20102;&#25551;&#36848; action &#22914;&#20309;&#25913;&#21464; state &#26641;&#65292;&#20320;&#38656;&#35201;&#32534;&#20889; reducers&#12290;
    </p>
    <p>
      &#20108;&#12289;&#19977;&#22823;&#21407;&#21017;
    </p>
    <p>
      1&#12289;&#21333;&#19968;&#25968;&#25454;&#28304;
    </p>
    <p>
      &#25972;&#20010;&#24212;&#29992;&#30340; state &#34987;&#20648;&#23384;&#22312;&#19968;&#26869; object tree &#20013;&#65292;&#24182;&#19988;&#36825;&#20010; object tree &#21482;&#23384;&#22312;&#20110;&#21807;&#19968;&#19968;&#20010; store &#20013;&#12290;
    </p>
    <p>
      2&#12289;state&#26159;&#21482;&#35835;&#30340;
    </p>
    <p>
      &#21807;&#19968;&#25913;&#21464; state &#30340;&#26041;&#27861;&#23601;&#26159;&#35302;&#21457; action&#65292;action &#26159;&#19968;&#20010;&#29992;&#20110;&#25551;&#36848;&#24050;&#21457;&#29983;&#20107;&#20214;&#30340;&#26222;&#36890;&#23545;&#35937;&#12290;
    </p>
    <p>
      Action &#23601;&#26159;&#26222;&#36890;&#23545;&#35937;&#32780;&#24050;&#65292;&#22240;&#27492;&#23427;&#20204;&#21487;&#20197;&#34987;&#26085;&#24535;&#25171;&#21360;&#12289;&#24207;&#21015;&#21270;&#12289;&#20648;&#23384;&#12289;&#21518;&#26399;&#35843;&#35797;&#25110;&#27979;&#35797;&#26102;&#22238;&#25918;&#20986;&#26469;&#12290;
    </p>
    <p>
      store.dispatch({
    </p>
    <p>
      &#160;&#160;type: 'COMPLETE_TODO',
    </p>
    <p>
      &#160;&#160;index: 1
    </p>
    <p>
      })
    </p>
    <p>
      3&#12289;&#20351;&#29992;&#32431;&#20989;&#25968;&#26469;&#25191;&#34892;&#20462;&#25913;
    </p>
    <p>
      &#20026;&#20102;&#25551;&#36848; action &#22914;&#20309;&#25913;&#21464; state tree &#65292;&#20320;&#38656;&#35201;&#32534;&#20889; reducers&#12290;
    </p>
    <p>
      Reducer &#21482;&#26159;&#19968;&#20123;&#32431;&#20989;&#25968;&#65292;&#23427;&#25509;&#25910;&#20808;&#21069;&#30340; state &#21644; action&#65292;&#24182;&#36820;&#22238;&#26032;&#30340; state&#12290;&#21018;&#24320;&#22987;&#20320;&#21487;&#20197;&#21482;&#26377;&#19968;&#20010; reducer&#65292;&#38543;&#30528;&#24212;&#29992;&#21464;&#22823;&#65292;&#20320;&#21487;&#20197;&#25226;&#23427;&#25286;&#25104;&#22810;&#20010;&#23567;&#30340; reducers&#65292;&#20998;&#21035;&#29420;&#31435;&#22320;&#25805;&#20316; state tree &#30340;&#19981;&#21516;&#37096;&#20998;&#65292;&#22240;&#20026; reducer &#21482;&#26159;&#20989;&#25968;&#65292;&#20320;&#21487;&#20197;&#25511;&#21046;&#23427;&#20204;&#34987;&#35843;&#29992;&#30340;&#39034;&#24207;&#65292;&#20256;&#20837;&#38468;&#21152;&#25968;&#25454;&#65292;&#29978;&#33267;&#32534;&#20889;&#21487;&#22797;&#29992;&#30340; reducer &#26469;&#22788;&#29702;&#19968;&#20123;&#36890;&#29992;&#20219;&#21153;&#65292;&#22914;&#20998;&#39029;&#22120;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1524817956774" FOLDED="true" ID="ID_706086607" MODIFIED="1542180267193" TEXT="&#x57fa;&#x7840;">
<node CREATED="1524817964941" ID="ID_202257207" MODIFIED="1538389020985">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;Action
    </p>
    <p>
      &#23558;&#25968;&#25454;&#20174;&#24212;&#29992;&#20256;&#21040;store&#30340;&#26377;&#25928;&#36733;&#33655;&#65292;&#23427;&#26159;store&#25968;&#25454;&#30340;&#21807;&#19968;&#26469;&#28304;&#65292;&#19968;&#33324;&#26469;&#35828;&#36890;&#36807;store.dispatch&#23558;action&#20256;&#21040;store&#12290;
    </p>
    <p>
      &#25105;&#20204;&#32422;&#23450;&#65292;action &#20869;&#24517;&#39035;&#20351;&#29992;&#19968;&#20010;&#23383;&#31526;&#20018;&#31867;&#22411;&#30340; type &#23383;&#27573;&#26469;&#34920;&#31034;&#23558;&#35201;&#25191;&#34892;&#30340;&#21160;&#20316;&#12290;&#22810;&#25968;&#24773;&#20917;&#19979;&#65292;type &#20250;&#34987;&#23450;&#20041;&#25104;&#23383;&#31526;&#20018;&#24120;&#37327;&#12290;&#24403;&#24212;&#29992;&#35268;&#27169;&#36234;&#26469;&#36234;&#22823;&#26102;&#65292;&#24314;&#35758;&#20351;&#29992;&#21333;&#29420;&#30340;&#27169;&#22359;&#25110;&#25991;&#20214;&#26469;&#23384;&#25918; action&#12290;
    </p>
    <p>
      store &#37324;&#33021;&#30452;&#25509;&#36890;&#36807; store.dispatch() &#35843;&#29992; dispatch() &#26041;&#27861;&#65292;&#20294;&#26159;&#22810;&#25968;&#24773;&#20917;&#19979;&#20320;&#20250;&#20351;&#29992; react-redux &#25552;&#20379;&#30340; connect() &#24110;&#21161;&#22120;&#26469;&#35843;&#29992;&#12290;bindActionCreators() &#21487;&#20197;&#33258;&#21160;&#25226;&#22810;&#20010; action &#21019;&#24314;&#20989;&#25968; &#32465;&#23450;&#21040; dispatch() &#26041;&#27861;&#19978;&#12290;
    </p>
    <p>
      &#20108;&#12289;Reducer
    </p>
    <p>
      &#20445;&#25345; reducer &#32431;&#20928;&#38750;&#24120;&#37325;&#35201;&#12290;&#27704;&#36828;&#19981;&#35201;&#22312; reducer &#37324;&#20570;&#36825;&#20123;&#25805;&#20316;&#65306;
    </p>
    <p>
      &#20462;&#25913;&#20256;&#20837;&#21442;&#25968;&#65307;
    </p>
    <p>
      &#25191;&#34892;&#26377;&#21103;&#20316;&#29992;&#30340;&#25805;&#20316;&#65292;&#22914; API &#35831;&#27714;&#21644;&#36335;&#30001;&#36339;&#36716;&#65307;
    </p>
    <p>
      &#35843;&#29992;&#38750;&#32431;&#20989;&#25968;&#65292;&#22914; Date.now() &#25110; Math.random()&#12290;
    </p>
    <p>
      &#19977;&#12289;Store
    </p>
    <p>
      Store &#26159;&#25226;action&#21644;reducer&#32852;&#31995;&#21040;&#19968;&#36215;&#30340;&#23545;&#35937;&#12290;Store &#26377;&#20197;&#19979;&#32844;&#36131;&#65306;
    </p>
    <p>
      &#32500;&#25345;&#24212;&#29992;&#30340; state&#65307;
    </p>
    <p>
      &#25552;&#20379; getState() &#26041;&#27861;&#33719;&#21462; state&#65307;
    </p>
    <p>
      &#25552;&#20379; dispatch(action) &#26041;&#27861;&#26356;&#26032; state&#65307;
    </p>
    <p>
      &#36890;&#36807; subscribe(listener) &#27880;&#20876;&#30417;&#21548;&#22120;;
    </p>
    <p>
      &#36890;&#36807; subscribe(listener) &#36820;&#22238;&#30340;&#20989;&#25968;&#27880;&#38144;&#30417;&#21548;&#22120;&#12290;
    </p>
    <p>
      &#24378;&#35843;&#19968;&#19979; Redux &#24212;&#29992;&#21482;&#26377;&#19968;&#20010;&#21333;&#19968;&#30340; store&#12290;&#24403;&#38656;&#35201;&#25286;&#20998;&#25968;&#25454;&#22788;&#29702;&#36923;&#36753;&#26102;&#65292;&#20320;&#24212;&#35813;&#20351;&#29992; reducer &#32452;&#21512; &#32780;&#19981;&#26159;&#21019;&#24314;&#22810;&#20010; store&#12290;
    </p>
    <p>
      &#22235;&#12289;&#25968;&#25454;&#27969;
    </p>
    <p>
      &#21333;&#21521;&#25968;&#25454;&#27969;
    </p>
    <p>
      &#20116;&#12289;&#25645;&#37197;React&#65288;react-redux&#32452;&#20214;&#65289;
    </p>
    <p>
      1&#12289;&#20877;&#24378;&#35843;&#19968;&#19979;&#65306;Redux &#21644; React &#20043;&#38388;&#27809;&#26377;&#20851;&#31995;&#12290;Redux &#25903;&#25345; React&#12289;Angular&#12289;Ember&#12289;jQuery &#29978;&#33267;&#32431; JavaScript&#12290;
    </p>
    <p>
      2&#12289;Provider&#32452;&#20214;&#26159;&#23427;&#25552;&#20379;&#30340;&#65306;&#21033;&#29992;React Context API&#65292;&#23427;&#30340;&#23646;&#24615;&#23558;&#20256;&#36882;&#32473;&#23376;&#23385;&#32452;&#20214;&#32780;&#19981;&#38656;&#35201;&#19968;&#23618;&#23618;&#36890;&#36807;props&#24448;&#19979;&#20256;&#36882;&#65292;&#23376;&#23385;&#32452;&#20214;&#20013;&#21487;&#36890;&#36807;this.context.[name]&#35775;&#38382;&#21040;&#23545;&#24212;&#30340;&#23646;&#24615;&#20540;
    </p>
    <p>
      3&#12289;connect&#26041;&#27861;&#26159;&#23427;&#25552;&#20379;&#30340;
    </p>
    <p>
      4&#12289;&#23481;&#22120;&#32452;&#20214;&#21644;&#23637;&#31034;&#32452;&#20214;
    </p>
    <p>
      &#23637;&#31034;&#32452;&#20214;&#29992;&#26469;&#20889;&#20855;&#20307;&#30340;view&#65292;&#20294;&#26159;&#19981;&#21644;store&#20132;&#20114;&#65292;&#36890;&#36807;&#35843;&#29992;&#23481;&#22120;&#32452;&#20214;&#20256;&#36882;&#30340;props&#19982;store&#20132;&#20114;
    </p>
    <p>
      &#23481;&#22120;&#32452;&#20214;&#20889;&#19982;store&#30456;&#20851;&#30340;&#36923;&#36753;&#65288;dispatch&#20043;&#31867;&#30340;&#65289;
    </p>
    <p>
      &#25216;&#26415;&#19978;&#35762;&#20320;&#21487;&#20197;&#30452;&#25509;&#20351;&#29992; store.subscribe() &#26469;&#32534;&#20889;&#23481;&#22120;&#32452;&#20214;&#12290;&#20294;&#19981;&#24314;&#35758;&#36825;&#20040;&#20570;&#30340;&#21407;&#22240;&#26159;&#26080;&#27861;&#20351;&#29992; React Redux &#24102;&#26469;&#30340;&#24615;&#33021;&#20248;&#21270;&#12290;&#20063;&#22240;&#27492;&#65292;&#19981;&#35201;&#25163;&#20889;&#23481;&#22120;&#32452;&#20214;&#65292;&#32780;&#20351;&#29992; React Redux &#30340; connect() &#26041;&#27861;&#26469;&#29983;&#25104;&#65292;&#21518;&#38754;&#20250;&#35814;&#32454;&#20171;&#32461;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1524831587443" ID="ID_1872665382" MODIFIED="1524832269093">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#39640;&#32423;
    </p>
    <p>
      &#19968;&#12289;&#24322;&#27493;Action
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1526954390626" FOLDED="true" ID="ID_985132713" MODIFIED="1541505771445" TEXT="Redux DevTools">
<node CREATED="1526954400255" ID="ID_494149977" MODIFIED="1526954779091">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#19979;&#36733;&#25554;&#20214;
    </p>
    <p>
      &#20108;&#12289;&#28155;&#21152;createStore&#26368;&#21518;&#19968;&#20010;&#21442;&#25968;
    </p>
    <p>
      &#21407;&#20195;&#30721;
    </p>
    <p>
      const store = createStore(reducer);
    </p>
    <p>
      &#20462;&#25913;&#20026;
    </p>
    <p>
      const store = createStore(reducer, window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__());
    </p>
    <p>
      &#22914;&#26524;&#20351;&#29992;&#20102;Middleware&#65292;&#28304;&#20195;&#30721;&#26159;
    </p>
    <p>
      const store = createStore(reducer, applyMiddleware(thunk))
    </p>
    <p>
      &#38656;&#35201;&#20462;&#25913;&#20026;
    </p>
    <p>
      const store = createStore(combineReducers(reducers), compose(applyMiddleware(thunk), window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__()))
    </p>
    <p>
      &#27809;&#26377;&#23433;&#35013;&#25554;&#20214;&#30340;&#21516;&#23398;&#25253;&#38169;&#24590;&#20040;&#21150;&#65311;&#20570;&#20010;&#21028;&#26029;&#21363;&#21487;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1540383315048" ID="ID_1948649604" MODIFIED="1544505939129" TEXT="&#x6e90;&#x7801;">
<node CREATED="1540384295415" ID="ID_946836096" MODIFIED="1540482319145">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      createStore
    </p>
    <p>
      1&#12289;&#35843;&#29992;&#35813;&#26041;&#27861;&#29983;&#25104;&#19968;&#20010;store&#23545;&#35937;
    </p>
    <p>
      2&#12289;createStore(Function reducer, [any initState], [Function enhancer])
    </p>
    <p>
      enhancer&#29992;&#20110;&#22686;&#24378;redux&#30340;&#21151;&#33021;&#65292;&#22914;&#35768;&#22810;&#20013;&#38388;&#20214;
    </p>
    <p>
      enhancer&#25509;&#21463;createStore&#20316;&#20026;&#21442;&#25968;&#65292;&#36820;&#22238;&#19968;&#20010;&#26032;&#30340;createStore&#26041;&#27861;
    </p>
    <p>
      Redux&#25552;&#20379;&#30340;applyMiddleware&#26041;&#27861;&#23558;&#22810;&#20010;&#20013;&#38388;&#20214;&#32452;&#21512;&#36215;&#26469;&#21518;&#36820;&#22238;&#19968;&#20010;enhancer&#26041;&#27861;
    </p>
    <p>
      3&#12289;store&#25552;&#20379;&#30340;&#26041;&#27861;
    </p>
    <p>
      dispatch
    </p>
    <p>
      subscribe(Function listener)&#65306;&#35746;&#38405;&#65292;&#35746;&#38405;&#21518;&#24403;&#26377;dispatch&#21457;&#29983;&#26102;&#65292;listener&#23558;&#25191;&#34892;&#65292;&#20808;&#35746;&#38405;&#20808;&#25191;&#34892;
    </p>
    <p>
      getState()&#65306;&#36820;&#22238;store&#24403;&#21069;&#29366;&#24577;
    </p>
    <p>
      replaceReducer
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1540383338847" ID="ID_1310473090" MODIFIED="1540480497352">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;reducer&#26159;&#19968;&#20010;function&#65292;reducer&#25191;&#34892;&#26102;&#19981;&#33021;dispath
    </p>
    <p>
      2&#12289;&#21487;&#20197;&#20351;&#29992;combineReducers&#23558;&#22810;&#20010;reducer&#36827;&#34892;&#32452;&#21512;
    </p>
    <p>
      3&#12289;reducer&#30340;&#40664;&#35748;&#20540;&#19981;&#33021;&#35774;&#32622;&#20026;undefined&#65292;&#22914;&#26524;&#19968;&#20010;&#29366;&#24577;&#30340;&#21021;&#22987;&#20540;&#20026;&#31354;&#65292;&#20351;&#29992;null&#20195;&#26367;
    </p>
    <p>
      4&#12289;&#35843;&#29992;reducer&#26102;&#22914;&#26524;&#20256;&#36882;&#30340;&#29366;&#24577;&#20540;&#26159;undefined&#25110;&#32773;&#26159;&#19981;&#33021;&#35782;&#21035;&#30340;action&#65292;&#37027;&#20040;&#23427;&#19981;&#33021;&#36820;&#22238;undefined&#20540;
    </p>
    <p>
      5&#12289;&#22914;&#26524;&#19968;&#20010;&#29366;&#24577;&#20540;&#26159;&#24341;&#29992;&#31867;&#22411;&#65292;&#37027;&#20040;&#20462;&#25913;&#26102;reducer&#24517;&#39035;&#25171;&#30772;&#24341;&#29992;&#36820;&#22238;&#19968;&#20010;&#26032;&#23545;&#35937;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1540383353515" ID="ID_1193129667" MODIFIED="1540383633464">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      action&#26159;&#19968;&#20010;&#32431;&#26222;&#36890;&#23545;&#35937;
    </p>
    <p>
      @@redux/INIT&#26159;Redux&#21019;&#24314;&#25104;&#26524;&#21518;&#25191;&#34892;&#30340;action&#65292;&#35843;&#29992;replaceReducer&#26102;&#20063;&#20250;&#35302;&#21457;&#35813;action
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1540481259981" ID="ID_403164962" MODIFIED="1544506110044">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20013;&#38388;&#20214;
    </p>
    <p>
      1&#12289;middlare&#26159;&#19968;&#20010;&#20989;&#25968;&#65292;&#35843;&#29992;&#26102;&#25509;&#21463;&#19968;&#20010;&#23545;&#35937;&#21442;&#25968;&#65292;&#23427;&#26377;dispatch&#21644;getState&#20004;&#20010;&#23646;&#24615;
    </p>
    <p>
      2&#12289;middleware&#35843;&#29992;&#21518;&#36820;&#22238;&#19968;&#20010;&#26032;&#30340;&#20989;&#25968;&#65292;&#25191;&#34892;&#35813;&#20989;&#25968;&#26102;&#20256;&#36882;&#32473;&#23427;&#30340;&#21442;&#25968;&#26159;store.dispatch&#12290;
    </p>
    <p>
      2&#12289;&#20351;&#29992;Redux&#30340;applyMiddleware(m1, m2, ...)&#21487;&#20197;&#23558;&#22810;&#20010;middleware&#32452;&#21512;&#36215;&#26469;&#65292;&#25191;&#34892;&#26102;&#21069;&#38754;&#30340;middleware&#20808;&#22788;&#29702;
    </p>
    <p>
      3&#12289;&#19968;&#20010;&#20363;&#23376;
    </p>
    <p>
      export default function (_ref) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;var dispatch = _ref.dispatch,
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;getState = _ref.getState;
    </p>
    <p>
      &#160;&#160;&#160;&#160;return function (next) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return function (action) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log('middleware2', JSON.stringify(action))
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return next(action);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;};
    </p>
    <p>
      &#160;&#160;&#160;&#160;};
    </p>
    <p>
      };
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1540387106010" ID="ID_791460262" MODIFIED="1540645294629">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Redux&#22914;&#20309;&#21516;React&#21327;&#20316;&#65311;
    </p>
    <p>
      1&#12289;react-redux&#21253;&#25552;&#20379;&#20102;Provider&#32452;&#20214;&#65292;&#26159;React Context API&#20013;Provider&#30340;&#22686;&#24378;&#65292;Provider&#20013;&#25968;&#25454;&#21464;&#21270;&#65292;&#25152;&#26377;&#23427;&#30340;&#28040;&#36153;&#32773;&#37117;&#35201;&#37325;&#26032;&#28210;&#26579;
    </p>
    <p>
      2&#12289;&#20351;&#29992;connect&#30340;&#32452;&#20214;&#37117;&#26159;Provider&#30340;&#28040;&#36153;&#32773;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1524801697644" ID="ID_1396336138" MODIFIED="1524801702135" POSITION="right" TEXT="react-router">
<node CREATED="1537410625957" ID="ID_1230327086" MODIFIED="1537410630254" TEXT="react-router-redux"/>
</node>
<node CREATED="1526278902602" FOLDED="true" ID="ID_393551626" MODIFIED="1526561863527" POSITION="right" TEXT="create-react-app">
<node CREATED="1526278911210" ID="ID_681114060" MODIFIED="1526279197571">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#26356;&#26032;&#29256;&#26412;
    </p>
    <p>
      1&#12289;create-react-app&#30001;&#20004;&#20010;&#21253;&#32452;&#25104;&#65306;create-react-app&#21644;react-scripts&#65292;&#21069;&#32773;&#24456;&#31283;&#23450;&#19981;&#38656;&#35201;&#22826;&#22810;&#21319;&#32423;
    </p>
    <p>
      2&#12289;&#20462;&#25913;package.json&#20013;&#21253;react-scripts&#30340;&#29256;&#26412;&#65292;&#28982;&#21518;&#36816;&#33829;npm install&#26469;&#23433;&#35013;&#23545;&#24212;&#30340;&#29256;&#26412;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1526279273038" ID="ID_378786580" MODIFIED="1526279523368">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#30446;&#24405;&#32467;&#26500;
    </p>
    <p>
      1&#12289;public/index.html&#21644;src/index.js&#26159;&#24517;&#38656;&#23384;&#22312;&#30340;&#25991;&#20214;&#12290;
    </p>
    <p>
      2&#12289;&#21487;&#20197;&#22312;src&#30446;&#24405;&#19979;&#21019;&#24314;&#26032;&#30446;&#24405;&#65292;&#20026;&#20102;&#25552;&#39640;&#25928;&#29575;&#65292;&#21482;&#26377;src&#19979;&#30340;&#25991;&#20214;&#25165;&#20250;&#34987;webpack&#22788;&#29702;&#65292;&#25152;&#20197;&#24517;&#38656;&#25226;js&#21644;css&#25991;&#20214;&#25918;&#21040;&#36825;&#20010;&#30446;&#24405;&#19979;&#12290;
    </p>
    <p>
      3&#12289;&#21482;&#26377;public&#30446;&#24405;&#19979;&#30340;&#25991;&#20214;&#25165;&#33021;&#22312;public/index.html&#25991;&#20214;&#20013;&#24341;&#20837;&#65288;&#27604;&#22914;&#22270;&#29255;&#31561;&#31561;&#65289;
    </p>
    <p>
      4&#12289;&#21487;&#20197;&#21019;&#24314;&#26356;&#22810;&#30340;&#19968;&#32423;&#30446;&#24405;&#65292;&#29983;&#20135;&#26500;&#24314;&#19981;&#20250;&#29992;&#21040;&#20182;&#20204;&#65292;&#20320;&#21487;&#20197;&#29992;&#23427;&#20204;&#25918;&#25991;&#26723;&#20043;&#31867;&#30340;&#19996;&#19996;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1526281958874" ID="ID_107451608" MODIFIED="1526282477532">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21487;&#29992;&#33050;&#26412;
    </p>
    <p>
      1&#12289;npm start
    </p>
    <p>
      2&#12289;npm test
    </p>
    <p>
      3&#12289;npm run build
    </p>
    <p>
      4&#12289;npm run eject
    </p>
    <p>
      &#25226;&#37197;&#32622;&#25991;&#20214;&#30452;&#25509;&#20174;react-scripts&#20013;&#25335;&#36125;&#20986;&#26469;&#65292;&#24320;&#21457;&#32773;&#21487;&#20197;&#33258;&#24049;&#36827;&#34892;&#35843;&#25972;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1526286534706" ID="ID_84831932" MODIFIED="1526286562038">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22312;&#32534;&#36753;&#22120;&#20013;&#35843;&#35797;
    </p>
    <p>
      1&#12289;vscode
    </p>
    <p>
      2&#12289;webstorm
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1526287147242" ID="ID_903891671" MODIFIED="1526287195143">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20462;&#25913;&#39029;&#38754;title
    </p>
    <p>
      1&#12289;&#20462;&#25913;public/index.html
    </p>
    <p>
      2&#12289;&#20351;&#29992;document.title = 'xxx'
    </p>
    <p>
      3&#12289;&#20351;&#29992;react-helmet
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1526287203700" ID="ID_788139919" MODIFIED="1526287227110">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23433;&#35013;&#20381;&#36182;
    </p>
    <p>
      1&#12289;&#20351;&#29992;npm install&#21363;&#21487;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1526287438645" ID="ID_499525040" MODIFIED="1526287690916">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Code Splitting
    </p>
    <p>
      1&#12289;&#20351;&#29992;import()&#21160;&#24577;&#21152;&#36733;&#30340;&#27169;&#22359;&#65292;&#36825;&#26679;&#30340;&#35805;&#65292;&#27169;&#22359;&#20197;&#21450;&#23427;&#30340;&#21807;&#19968;&#20381;&#36182;&#20250;&#34987;&#21333;&#29420;&#20986;&#26469;&#19968;&#20010;chunk
    </p>
    <p>
      2&#12289;&#19982;react-router&#32467;&#21512;&#20351;&#29992;&#30340;&#20195;&#30721;&#20998;&#21106;&#35265;&#25991;&#26723;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1527850705840" FOLDED="true" ID="ID_1134727443" MODIFIED="1531390900394" POSITION="right">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19994;&#30028;&#26415;&#35821;
    </p>
  </body>
</html></richcontent>
<node CREATED="1527850720708" ID="ID_514436420" MODIFIED="1527850920943">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;FSA&#65306;Flux Standard Action
    </p>
    <p>
      &#38500;&#20102;type&#12289;payload&#12289;error&#12289;meta&#20043;&#22806;&#27809;&#26377;&#20854;&#20182;&#23646;&#24615;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1543840797787" FOLDED="true" ID="ID_378898394" MODIFIED="1544505987544" POSITION="right" TEXT="&#x65b0;&#x7248;&#x672c;&#x65b0;&#x7279;&#x6027;">
<node CREATED="1543841648602" ID="ID_1191347329" MODIFIED="1544068999172">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      16.x&#65288;2019-Q1&#65289;
    </p>
    <p>
      1&#12289;Hooks
    </p>
    <p>
      http://taobaofed.org/blog/2018/11/27/hooks-and-function-component/
    </p>
    <p>
      https://medium.com/@dan_abramov/making-sense-of-react-hooks-fdbde8803889
    </p>
    <p>
      Hooks are functions that let you &#8220;hook into&#8221; React state and lifecycle features from function components.
    </p>
    <p>
      Hooks&#25552;&#20379;&#22312;Function&#32452;&#20214;&#20013;&#20351;&#29992;&#29366;&#24577;&#21644;&#29983;&#21629;&#21608;&#26399;&#20989;&#25968;&#30340;&#33021;&#21147;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#23427;&#35299;&#20915;&#30340;&#38382;&#39064;
    </p>
    <p>
      render props&#21644;HOC&#24102;&#26469;&#30340;&#23884;&#22871;&#22320;&#22495;&#65288;wrapper hell&#65289;
    </p>
    <p>
      class&#20013;&#26377;&#29366;&#24577;&#30340;&#36923;&#36753;&#38590;&#37325;&#29992;&#30340;&#38382;&#39064;&#65292;class&#20013;&#20351;&#29992;render props&#21644;HOC&#26469;&#35299;&#20915;
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#23427;&#24102;&#26469;&#30340;&#38382;&#39064;
    </p>
    <p>
      &#20195;&#30721;&#22823;&#23567;&#65306;Hooks&#22686;&#37327;1.5k&#65292;&#19981;&#36807;Hooks&#32534;&#20889;&#30340;&#32452;&#20214;&#27604;class&#32452;&#20214;&#20307;&#31215;&#35201;&#19979;
    </p>
    <p>
      useState&#22312;&#27599;&#27425;render&#26102;&#25191;&#34892;&#39034;&#24207;&#24517;&#39035;&#20445;&#25345;&#19968;&#33268;&#65292;&#19981;&#35201;&#25918;&#22312;if&#20998;&#25903;&#30340;&#24773;&#20917;&#12290;&#21363;&#65292;&#21482;&#33021;&#22312;&#39030;&#23618;&#35843;&#29992;Hooks&#65292;&#19981;&#35201;&#22312;&#24490;&#29615;&#12289;&#26465;&#20214;&#20998;&#25903;&#12289;&#20869;&#23884;&#20989;&#25968;&#20013;&#35843;&#29992;Hooks
    </p>
    <p>
      &#27809;&#26377;shouldComponentUpdate&#25903;&#25345;
    </p>
    <p>
      &#65288;3&#65289;&#12289;&#33258;&#23450;&#20041;Hooks
    </p>
    <p>
      &#20197;use&#24320;&#22836;&#30340;&#20989;&#25968;&#65292;&#37324;&#38754;&#35843;&#29992;&#20854;&#20182;Hooks
    </p>
    <p>
      import { useState, useEffect } from 'react';
    </p>
    <p>
      // &#33258;&#23450;&#20041;Hook
    </p>
    <p>
      function useFriendStatus(friendID) {
    </p>
    <p>
      &#160;&#160;const [isOnline, setIsOnline] = useState(null);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;function handleStatusChange(status) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;setIsOnline(status.isOnline);
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;useEffect(() =&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange);
    </p>
    <p>
      &#160;&#160;&#160;&#160;return () =&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);
    </p>
    <p>
      &#160;&#160;&#160;&#160;};
    </p>
    <p>
      &#160;&#160;});
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;return isOnline;
    </p>
    <p>
      }
    </p>
    <p>
      //&#20351;&#29992;&#19968;
    </p>
    <p>
      function FriendStatus(props) {
    </p>
    <p>
      &#160;&#160;const isOnline = useFriendStatus(props.friend.id);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;if (isOnline === null) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return 'Loading...';
    </p>
    <p>
      &#160;&#160;}
    </p>
    <p>
      &#160;&#160;return isOnline ? 'Online' : 'Offline';
    </p>
    <p>
      }
    </p>
    <p>
      //&#20351;&#29992;&#20108;
    </p>
    <p>
      function FriendListItem(props) {
    </p>
    <p>
      &#160;&#160;const isOnline = useFriendStatus(props.friend.id);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;return (
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;li style={{ color: isOnline ? 'green' : 'black' }}&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;{props.friend.name}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;/li&gt;
    </p>
    <p>
      &#160;&#160;);
    </p>
    <p>
      }
    </p>
    <p>
      &#65288;4&#65289;&#12289;Hooks&#21015;&#34920;
    </p>
    <p>
      useState
    </p>
    <p>
      &#35821;&#27861;&#65306;const [state, setState] = useState(initialState);
    </p>
    <p>
      &#32452;&#20214;&#21021;&#22987;&#28210;&#26579;&#26102;state&#30340;&#20540;&#26159;initialState
    </p>
    <p>
      &#35843;&#29992;setState(newState)&#36827;&#34892;&#26356;&#26032;&#65292;&#20250;&#35302;&#21457;&#32452;&#20214;render
    </p>
    <p>
      &#22914;&#26524;&#26032;&#29366;&#24577;&#26159;&#36890;&#36807;&#21069;&#19968;&#20010;&#29366;&#24577;&#35745;&#31639;&#24471;&#26469;&#30340;&#65292;&#21017;&#21487;&#20197;&#20256;&#19968;&#20010;&#20989;&#25968;&#32473;setState&#65292;setState(preState=&gt;{return preState+1})
    </p>
    <p>
      &#19982;class&#32452;&#20214;setState&#19981;&#21516;&#65292;useState&#19981;&#20250;&#21512;&#24182;&#26356;&#26032;
    </p>
    <p>
      initialState&#21482;&#22312;&#21021;&#22987;&#28210;&#26579;&#26102;&#20351;&#29992;&#65292;&#22914;&#26524;&#35745;&#31639;initialState&#30340;&#36923;&#36753;&#24456;&#32791;&#26102;&#65292;&#21487;&#20197;&#23558;&#20854;&#25351;&#23450;&#20026;&#19968;&#20010;&#20989;&#25968;&#65292;&#36825;&#26679;React&#20250;&#30830;&#20445;&#35813;&#20989;&#25968;&#21482;&#22312;&#21021;&#22987;&#28210;&#26579;&#26102;&#25191;&#34892;&#65306;useState(() =&gt; {&#35745;&#31639;initialState&#24182;&#36820;&#22238;})
    </p>
    <p>
      useEffect
    </p>
    <p>
      &#35821;&#27861;&#65306;useEffect(didUpdate)
    </p>
    <p>
      didUpdate&#20250;&#22312;&#27599;&#19968;&#27425;&#26356;&#26032;&#35745;&#31639;&#21518;&#21363;&#23558;&#25191;&#34892;&#21069;&#35843;&#29992;
    </p>
    <p>
      didUpdate&#25191;&#34892;&#21518;&#21487;&#20197;&#36820;&#22238;&#19968;&#20010;&#20989;&#25968;&#65292;&#35813;&#20989;&#25968;&#20250;&#22312;&#32452;&#20214;&#21368;&#36733;&#26102;&#25191;&#34892;
    </p>
    <p>
      useReducer
    </p>
    <p>
      useContext
    </p>
    <p>
      &#35821;&#27861;&#65306;const context = useContext(Context)
    </p>
    <p>
      Context&#26159;&#36890;&#36807;React.createContext&#21019;&#24314;&#30340;&#19978;&#19979;&#25991;&#23545;&#35937;
    </p>
    <p>
      &#24403;Context&#30340;Privider&#21464;&#21270;&#20250;&#23548;&#33268;&#35813;Hook&#35302;&#21457;&#32452;&#20214;&#26356;&#26032;
    </p>
    <p>
      useCallback
    </p>
    <p>
      useMemo
    </p>
    <p>
      useRef
    </p>
    <p>
      useImperativeMethods
    </p>
    <p>
      useLayoutEffect
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1544455492864" ID="ID_1064183459" MODIFIED="1544455496627" POSITION="right" TEXT="&#x597d;&#x6587;&#x7ae0;">
<node CREATED="1544455504998" ID="ID_268761692" MODIFIED="1544455507488" TEXT="https://overreacted.io/how-does-setstate-know-what-to-do/"/>
</node>
<node CREATED="1510812635865" ID="ID_1466204335" MODIFIED="1544455733508" POSITION="left">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#30097;&#38382;
    </p>
    <p>
      1&#12289;react&#12289;react-dom&#26159;&#20160;&#20040;&#65311;
    </p>
    <p>
      &#30456;&#24403;&#20110;Vue&#20013;&#30340;runtime&#21644;compiler&#30340;&#20851;&#31995;&#65292;&#21151;&#33021;&#20195;&#30721;&#22312;react&#21253;&#20013;&#65292;&#19982;&#24179;&#21488;&#30456;&#20851;&#30340;&#20195;&#30721;&#25918;&#22312;react-dom&#12289;react-native&#31561;&#31561;&#20013;&#65292;&#21483;&#20570;reconciler&#12290;reconciler&#36890;&#36807;&#20381;&#36182;&#27880;&#20837;&#23558;&#21151;&#33021;&#27880;&#20837;&#21040;react&#20013;&#65292;&#27604;&#22914;setState&#25509;&#21475;&#22312;react&#20013;&#65292;&#35843;&#29992;&#23427;&#20043;&#21518;&#65292;&#21482;&#26159;&#23558;&#21464;&#26356;&#30340;&#29366;&#24577;&#20256;&#36882;&#32473;updater&#65292;updater&#23601;&#26159;react-dom&#36890;&#36807;&#20381;&#36182;&#27880;&#20837;&#27880;&#20837;&#21040;react&#20013;&#30340;&#12290;
    </p>
    <p>
      2&#12289;JSX&#26159;&#24590;&#20040;&#35299;&#26512;&#30340;&#65311;
    </p>
    <p>
      3&#12289;data-reactroot&#26159;SSR&#28210;&#26579;&#20986;&#26469;&#30340;&#23646;&#24615;&#21527;&#65311;
    </p>
    <p>
      &#26159;&#30340;&#65292;&#31867;&#20284;Vue&#30340;data-server-rendered&#23646;&#24615;
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1526540445862" ID="ID_1203599986" MODIFIED="1541750701965" POSITION="left">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#23454;&#36341;&#25216;&#24039;
    </p>
    <p>
      1&#12289;&#19981;&#35201;&#23558;props&#26144;&#23556;&#20026;&#20869;&#37096;state&#65292;&#22914;&#26524;&#19968;&#23450;&#35201;&#36825;&#20040;&#20570;&#65292;&#38656;&#35201;&#22312;componentWillReceiveProps(nextProps)&#38057;&#23376;&#20013;&#37325;&#26032;&#35774;&#32622;state&#12290;
    </p>
    <p>
      2&#12289;&#20256;&#36882;props&#26368;&#22909;&#20351;&#29992;...&#36816;&#31639;&#31526;&#36879;&#20256;&#21040;&#23376;&#33410;&#28857;&#20013;&#21435;
    </p>
    <p>
      &lt;SearchListComponent {...this.props} ref=&quot;target&quot; /&gt;
    </p>
    <p>
      3&#12289;&#26041;&#27861;&#23646;&#24615;&#21517;&#22312;&#20256;&#36882;&#36807;&#31243;&#20013;&#19981;&#35201;&#21464;&#65292;&#21363;&#20351;&#20869;&#37096;&#35201;&#21253;&#35013;&#19968;&#19979;&#65292;&#20063;&#19981;&#35201;&#21464;&#21517;&#23383;
    </p>
    <p>
      4&#12289;&#35302;&#21457;state&#21464;&#26356;&#38598;&#20013;&#22312;view&#23618;&#65292;&#32452;&#20214;&#20869;&#37096;&#19981;&#35201;&#21464;&#26356;state
    </p>
    <p>
      5&#12289;&#38656;&#35201;&#32771;&#34385;&#21021;&#22987;&#29366;&#24577;&#65292;&#27604;&#22914;&#8220;&#20462;&#25913;&#8221;&#30340;&#26102;&#20505;&#38656;&#35201;load&#25968;&#25454;&#36827;&#34892;&#21021;&#22987;&#24577;&#35774;&#32622;
    </p>
    <p>
      6&#12289;&#24910;&#29992;shouldComponentUpdate&#65292;&#65288;PureComponent&#21487;&#20197;&#25552;&#21319;&#37096;&#20998;&#24615;&#33021;&#65289;
    </p>
    <p>
      7&#12289;redux&#20013;&#30340;&#25968;&#25454;&#22914;&#26524;&#26159;&#24341;&#29992;&#31867;&#22411;&#65288;&#23545;&#35937;&#25110;&#25968;&#32452;&#65289;&#65292;&#26356;&#26032;&#26102;&#38656;&#35201;&#35774;&#32622;&#19968;&#20010;&#26032;&#30340;&#23545;&#35937;&#25110;&#25968;&#32452;&#65292;&#25165;&#33021;&#35302;&#21457;&#26356;&#26032;&#65288;immutable&#26041;&#26696;&#65289;
    </p>
    <p>
      8&#12289;&#19981;&#35201;&#38144;&#27585;&#38656;&#35201;&#39057;&#32321;&#26174;&#31034;/&#38544;&#34255;&#30340;vm&#65292;&#23613;&#37327;&#36890;&#36807;display&#25511;&#21046;&#35270;&#22270;&#30340;&#26174;&#31034;&#21644;&#38544;&#34255;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#27604;&#22914;&#35270;&#22270;&#23545;&#35937;&#26377;&#20869;&#37096;&#29366;&#24577;&#65292;&#22312;&#26576;&#20123;&#25805;&#20316;&#20043;&#21518;&#29366;&#24577;&#24050;&#32463;&#26377;&#19968;&#23450;&#30340;&#21464;&#21270;&#65292;&#38144;&#27585;&#20877;&#26174;&#31034;&#20250;&#37325;&#24314;&#29366;&#24577;&#65292;&#27492;&#26102;&#20250;&#23548;&#33268;&#32452;&#20214;&#20869;&#37096;&#30340;&#29366;&#24577;&#34987;&#20002;&#24323;&#20102;
    </p>
    <p>
      9&#12289;&#22823;&#22411;&#39033;&#30446;&#20013;&#19968;&#23450;&#35201;&#24378;&#35843;actions&#23618;&#65292;&#19981;&#35201;&#30452;&#25509;&#22312;&#19994;&#21153;&#20195;&#30721;&#37324;&#30452;&#25509;&#35302;&#21457;&#21407;&#29983;action&#65292;&#32780;&#36890;&#36807;&#35843;&#29992;actions&#20013;&#30340;&#20855;&#20307;&#26041;&#27861;&#26469;&#23454;&#29616;&#65292;&#26377;&#20960;&#20010;&#22909;&#22788;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#36923;&#36753;&#21487;&#20197;&#38598;&#20013;&#22788;&#29702;&#65292;&#26041;&#20415;&#26085;&#21518;&#35843;&#25972;&#65292;&#22914;&#26524;&#22312;&#19994;&#21153;&#20013;&#30452;&#25509;&#35302;&#21457;&#21407;&#29983;action&#20250;&#23548;&#33268;&#36923;&#36753;&#27604;&#36739;&#25955;&#20081;&#65292;&#21518;&#21488;&#35843;&#25972;&#36923;&#36753;&#21313;&#20998;&#40635;&#28902;
    </p>
    <p>
      10&#12289;&#20197;&#19979;&#22330;&#26223;&#26377;&#39118;&#38505;
    </p>
    <p>
      somedata
    </p>
    <p>
      dispach(....somedata)
    </p>
    <p>
      setTimeout(
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;...&#32487;&#32493;&#21152;&#24037;somedata
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;dispatch(...somedata)//&#22312;timeout&#35302;&#21457;&#20043;&#21069;&#21487;&#33021;&#20854;&#20182;&#22320;&#26041;&#23545;&#29366;&#24577;&#36827;&#34892;&#20102;&#21464;&#26356;&#65292;&#32780;&#36825;&#37324;&#30340;&#21464;&#26356;&#20250;&#23558;&#20854;&#35206;&#30422;&#25481;
    </p>
    <p>
      )
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512576998032" ID="ID_1065426133" MODIFIED="1540629417007" POSITION="left" TEXT="&#x6e90;&#x7801;">
<node CREATED="1512577003239" FOLDED="true" ID="ID_1567298764" MODIFIED="1540629497218">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      React
    </p>
    <p>
      1&#12289;&#20195;&#30721;&#20837;&#21475;&#20301;&#20110;packages/react/index.js
    </p>
  </body>
</html></richcontent>
<node CREATED="1512627688081" ID="ID_281399311" MODIFIED="1512635913495">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      React.Component&#31867;
    </p>
    <p>
      1&#12289;&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      Component(props, context, updater)
    </p>
    <p>
      2&#12289;&#23646;&#24615;
    </p>
    <p>
      props
    </p>
    <p>
      context
    </p>
    <p>
      refs
    </p>
    <p>
      updater
    </p>
    <p>
      isReactComponent
    </p>
    <p>
      3&#12289;&#26041;&#27861;
    </p>
    <p>
      setState(partialState, callback)
    </p>
    <p>
      forceUpdate(callback)
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512636468797" ID="ID_778682717" MODIFIED="1512637047816">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      React.PureComponent&#31867;
    </p>
    <p>
      1&#12289;&#25509;&#21475;&#36319;React.Component&#19968;&#26679;&#65292;&#21482;&#26159;&#22810;&#20102;&#19968;&#20010;&#23646;&#24615;
    </p>
    <p>
      isPureReactComponent&#65306;&#20540;&#20026;true
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512636984036" ID="ID_664311702" MODIFIED="1512637114397">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      React.unstable_AsyncComponent&#31867;
    </p>
    <p>
      1&#12289;&#25509;&#21475;&#36319;React.Component&#19968;&#26679;&#65292;&#22810;&#20102;&#19968;&#20010;&#23646;&#24615;&#65292;&#23450;&#20041;&#20102;&#40664;&#35748;&#30340;render&#26041;&#27861;
    </p>
    <p>
      unstable_isAsyncReactComponent&#65306;&#20540;&#20026;true
    </p>
    <p>
      render&#65306;function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return this.props.children;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512639744337" ID="ID_1335307378" MODIFIED="1512726906548">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      React.createElement(type, [props], [...children])&#26041;&#27861;
    </p>
    <p>
      1&#12289;JSX&#26368;&#32456;&#20250;&#36716;&#25442;&#20026;&#36825;&#20010;&#20989;&#25968;&#30340;&#35843;&#29992;&#65292;&#22914;&#26524;&#29992;JSX&#19981;&#38656;&#35201;&#26174;&#24335;&#29992;&#35813;&#26041;&#27861;
    </p>
    <p>
      2&#12289;&#20445;&#30041;&#30340;props&#26377;key&#12289;ref&#12289;__self&#12289;__source
    </p>
    <p>
      3&#12289;&#29983;&#25104;&#19968;&#20010;element&#23545;&#35937;&#65292;&#26368;&#21518;&#32473;&#21040;ReactDOM&#36827;&#34892;&#28210;&#26579;&#65292;&#23427;&#21253;&#21547;&#20197;&#19979;&#23646;&#24615;
    </p>
    <p>
      $$typeof&#65306;&#26631;&#35782;&#26159;&#19968;&#20010;React&#23545;&#35937;
    </p>
    <p>
      type&#65306;&#26631;&#31614;&#31867;&#22411;&#65292;&#27604;&#22914;div&#65292;&#22914;&#26524;&#26159;&#33258;&#23450;&#20041;&#32452;&#20214;&#65292;&#21017;&#26159;&#33258;&#23450;&#20041;&#32452;&#20214;&#30340;&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      key&#65306;
    </p>
    <p>
      ref&#65306;
    </p>
    <p>
      props&#65306;
    </p>
    <p>
      _owner&#65306;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1512608374105" FOLDED="true" ID="ID_848843609" MODIFIED="1540629502334">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ReactDOM
    </p>
    <p>
      1&#12289;&#28304;&#30721;&#20837;&#21475;&#20301;&#20110;packages/react-dom/index.js
    </p>
  </body>
</html></richcontent>
<node CREATED="1512734195642" ID="ID_453797809" MODIFIED="1512993054532">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ReactDOM.render(element, container, callback)
    </p>
    <p>
      1&#12289;render-&gt;renderSubtreeIntoContainer-&gt;DOMRenderer.updateContainer
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1512734269728" ID="ID_1504483941" MODIFIED="1512734279011" TEXT="ReactDOM.hydrate(element, container, callback)"/>
</node>
<node CREATED="1516085123137" FOLDED="true" ID="ID_219285457" MODIFIED="1540629484571">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ReactDOMServer
    </p>
    <p>
      1&#12289;SSR&#36923;&#36753;&#20301;&#20110;packages/react-dom/server.js
    </p>
  </body>
</html></richcontent>
<node CREATED="1516085157523" ID="ID_1669326775" MODIFIED="1516085408306">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      ReactDOMServer.renderToString
    </p>
    <p>
      ReactDOMServer.renderToNodeStream
    </p>
    <p>
      ReactDOMServer.renderToStaticMarkup
    </p>
    <p>
      ReactDOMServer.renderToStaticNodeStream
    </p>
    <p>
      &#21069;&#38754;2&#20010;&#36319;Vue&#24046;&#19981;&#22810;&#65292;&#21518;&#38754;2&#20010;&#26041;&#27861;&#36866;&#29992;&#20110;&#20570;&#32431;&#30452;&#20986;&#19981;&#38656;&#35201;&#21069;&#31471;hydrate&#30340;&#39029;&#38754;&#65292;&#27492;&#26102;React&#19981;&#38656;&#35201;&#28210;&#26579;&#19968;&#20123;&#39069;&#22806;&#30340;&#23646;&#24615;&#22914;data-reactroot
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1512734854462" ID="ID_1525666386" MODIFIED="1512734861681" TEXT="Renderer&#xff08;&#x6e32;&#x67d3;&#x5668;&#xff09;">
<node CREATED="1512734864723" ID="ID_1957125366" MODIFIED="1512734868739" TEXT="DOMRenderer"/>
</node>
</node>
</node>
</map>
