<map version="1.0.1">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1507987312775" ID="ID_936269374" MODIFIED="1508153904389">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typescript
    </p>
    <p>
      &#22522;&#32447;&#29256;&#26412;&#65306;2.4
    </p>
  </body>
</html></richcontent>
<node CREATED="1508067043492" FOLDED="true" ID="ID_601916027" MODIFIED="1542352483393" POSITION="right" TEXT="&#x57fa;&#x7840;&#x7c7b;&#x578b;">
<node CREATED="1508067086436" ID="ID_89928941" MODIFIED="1508074722888">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#20171;&#32461;
    </p>
    <p>
      &#20108;&#12289;&#24067;&#23572;&#20540;
    </p>
    <p>
      let isDone: boolean = false;
    </p>
    <p>
      &#19977;&#12289;&#25968;&#23383;&#65292;&#21644;JS&#19968;&#26679;&#65292;&#25152;&#26377;&#25968;&#23383;&#37117;&#26159;&#28014;&#28857;&#25968;&#65292;&#31867;&#22411;&#20026;number
    </p>
    <p>
      let decLiteral: number = 6;
    </p>
    <p>
      let hexLiteral: number = 0xf00d;
    </p>
    <p>
      let binaryLiteral: number = 0b1010;
    </p>
    <p>
      let octalLiteral: number = 0o744;
    </p>
    <p>
      &#22235;&#12289;&#23383;&#31526;&#20018;
    </p>
    <p>
      let name: string = &quot;bob&quot;;
    </p>
    <p>
      name = &quot;smith&quot;;
    </p>
    <p>
      &#20063;&#25903;&#25345;&#27169;&#26495;&#23383;&#31526;&#20018;
    </p>
    <p>
      let name: string = `Gene`;
    </p>
    <p>
      let age: number = 37;
    </p>
    <p>
      let sentence: string = `Hello, my name is ${ name }.
    </p>
    <p>
      I'll be ${ age + 1 } years old next month.`;
    </p>
    <p>
      &#20116;&#12289;&#25968;&#32452;
    </p>
    <p>
      &#26377;&#20004;&#31181;&#26041;&#24335;&#21487;&#20197;&#23450;&#20041;&#25968;&#32452;&#12290; &#31532;&#19968;&#31181;&#65292;&#21487;&#20197;&#22312;&#20803;&#32032;&#31867;&#22411;&#21518;&#38754;&#25509;&#19978; []&#65292;&#34920;&#31034;&#30001;&#27492;&#31867;&#22411;&#20803;&#32032;&#32452;&#25104;&#30340;&#19968;&#20010;&#25968;&#32452;&#65306;
    </p>
    <p>
      let list: number[] = [1, 2, 3];
    </p>
    <p>
      &#31532;&#20108;&#31181;&#26041;&#24335;&#26159;&#20351;&#29992;&#25968;&#32452;&#27867;&#22411;&#65292;Array&lt;&#20803;&#32032;&#31867;&#22411;&gt;&#65306;
    </p>
    <p>
      let list: Array&lt;number&gt; = [1, 2, 3];
    </p>
    <p>
      &#20845;&#12289;&#20803;&#32452;Tuple
    </p>
    <p>
      &#20803;&#32452;&#31867;&#22411;&#20801;&#35768;&#34920;&#31034;&#19968;&#20010;&#24050;&#30693;&#20803;&#32032;&#25968;&#37327;&#21644;&#31867;&#22411;&#30340;&#25968;&#32452;&#65292;&#21508;&#20803;&#32032;&#30340;&#31867;&#22411;&#19981;&#24517;&#30456;&#21516;&#12290; &#27604;&#22914;&#65292;&#20320;&#21487;&#20197;&#23450;&#20041;&#19968;&#23545;&#20540;&#20998;&#21035;&#20026; string&#21644;number&#31867;&#22411;&#30340;&#20803;&#32452;&#12290;
    </p>
    <p>
      // Declare a tuple type
    </p>
    <p>
      let x: [string, number];
    </p>
    <p>
      // Initialize it
    </p>
    <p>
      x = ['hello', 10]; // OK
    </p>
    <p>
      // Initialize it incorrectly
    </p>
    <p>
      x = [10, 'hello']; // Error
    </p>
    <p>
      &#24403;&#35775;&#38382;&#19968;&#20010;&#24050;&#30693;&#32034;&#24341;&#30340;&#20803;&#32032;&#65292;&#20250;&#24471;&#21040;&#27491;&#30830;&#30340;&#31867;&#22411;&#65306;
    </p>
    <p>
      console.log(x[0].substr(1)); // OK
    </p>
    <p>
      console.log(x[1].substr(1)); // Error, 'number' does not have 'substr'
    </p>
    <p>
      &#24403;&#35775;&#38382;&#19968;&#20010;&#36234;&#30028;&#30340;&#20803;&#32032;&#65292;&#20250;&#20351;&#29992;&#32852;&#21512;&#31867;&#22411;&#26367;&#20195;&#65306;
    </p>
    <p>
      x[3] = 'world'; // OK, &#23383;&#31526;&#20018;&#21487;&#20197;&#36171;&#20540;&#32473;(string | number)&#31867;&#22411;
    </p>
    <p>
      console.log(x[5].toString()); // OK, 'string' &#21644; 'number' &#37117;&#26377; toString
    </p>
    <p>
      x[6] = true; // Error, &#24067;&#23572;&#19981;&#26159;(string | number)&#31867;&#22411;
    </p>
    <p>
      &#32852;&#21512;&#31867;&#22411;&#26159;&#39640;&#32423;&#20027;&#39064;&#65292;&#25105;&#20204;&#20250;&#22312;&#20197;&#21518;&#30340;&#31456;&#33410;&#37324;&#35752;&#35770;&#23427;&#12290;
    </p>
    <p>
      &#19971;&#12289;&#26522;&#20030;
    </p>
    <p>
      enum&#31867;&#22411;&#26159;&#23545;JavaScript&#26631;&#20934;&#25968;&#25454;&#31867;&#22411;&#30340;&#19968;&#20010;&#34917;&#20805;&#12290; &#20687;C#&#31561;&#20854;&#23427;&#35821;&#35328;&#19968;&#26679;&#65292;&#20351;&#29992;&#26522;&#20030;&#31867;&#22411;&#21487;&#20197;&#20026;&#19968;&#32452;&#25968;&#20540;&#36171;&#20104;&#21451;&#22909;&#30340;&#21517;&#23383;&#12290;
    </p>
    <p>
      enum Color {Red, Green, Blue}
    </p>
    <p>
      let c: Color = Color.Green;
    </p>
    <p>
      &#40664;&#35748;&#24773;&#20917;&#19979;&#65292;&#20174;0&#24320;&#22987;&#20026;&#20803;&#32032;&#32534;&#21495;&#12290; &#20320;&#20063;&#21487;&#20197;&#25163;&#21160;&#30340;&#25351;&#23450;&#25104;&#21592;&#30340;&#25968;&#20540;&#12290; &#20363;&#22914;&#65292;&#25105;&#20204;&#23558;&#19978;&#38754;&#30340;&#20363;&#23376;&#25913;&#25104;&#20174; 1&#24320;&#22987;&#32534;&#21495;&#65306;
    </p>
    <p>
      enum Color {Red = 1, Green, Blue}
    </p>
    <p>
      let c: Color = Color.Green;
    </p>
    <p>
      &#25110;&#32773;&#65292;&#20840;&#37096;&#37117;&#37319;&#29992;&#25163;&#21160;&#36171;&#20540;&#65306;
    </p>
    <p>
      enum Color {Red = 1, Green = 2, Blue = 4}
    </p>
    <p>
      let c: Color = Color.Green;
    </p>
    <p>
      &#26522;&#20030;&#31867;&#22411;&#25552;&#20379;&#30340;&#19968;&#20010;&#20415;&#21033;&#26159;&#20320;&#21487;&#20197;&#30001;&#26522;&#20030;&#30340;&#20540;&#24471;&#21040;&#23427;&#30340;&#21517;&#23383;&#12290; &#20363;&#22914;&#65292;&#25105;&#20204;&#30693;&#36947;&#25968;&#20540;&#20026;2&#65292;&#20294;&#26159;&#19981;&#30830;&#23450;&#23427;&#26144;&#23556;&#21040;Color&#37324;&#30340;&#21738;&#20010;&#21517;&#23383;&#65292;&#25105;&#20204;&#21487;&#20197;&#26597;&#25214;&#30456;&#24212;&#30340;&#21517;&#23383;&#65306;
    </p>
    <p>
      enum Color {Red = 1, Green, Blue}
    </p>
    <p>
      let colorName: string = Color[2];
    </p>
    <p>
      alert(colorName);
    </p>
    <p>
      &#20843;&#12289;Any
    </p>
    <p>
      &#26377;&#26102;&#20505;&#65292;&#25105;&#20204;&#20250;&#24819;&#35201;&#20026;&#37027;&#20123;&#22312;&#32534;&#31243;&#38454;&#27573;&#36824;&#19981;&#28165;&#26970;&#31867;&#22411;&#30340;&#21464;&#37327;&#25351;&#23450;&#19968;&#20010;&#31867;&#22411;&#12290; &#36825;&#20123;&#20540;&#21487;&#33021;&#26469;&#33258;&#20110;&#21160;&#24577;&#30340;&#20869;&#23481;&#65292;&#27604;&#22914;&#26469;&#33258;&#29992;&#25143;&#36755;&#20837;&#25110;&#31532;&#19977;&#26041;&#20195;&#30721;&#24211;&#12290; &#36825;&#31181;&#24773;&#20917;&#19979;&#65292;&#25105;&#20204;&#19981;&#24076;&#26395;&#31867;&#22411;&#26816;&#26597;&#22120;&#23545;&#36825;&#20123;&#20540;&#36827;&#34892;&#26816;&#26597;&#32780;&#26159;&#30452;&#25509;&#35753;&#23427;&#20204;&#36890;&#36807;&#32534;&#35793;&#38454;&#27573;&#30340;&#26816;&#26597;&#12290; &#37027;&#20040;&#25105;&#20204;&#21487;&#20197;&#20351;&#29992; any&#31867;&#22411;&#26469;&#26631;&#35760;&#36825;&#20123;&#21464;&#37327;&#65306;
    </p>
    <p>
      let notSure: any = 4;
    </p>
    <p>
      notSure = &quot;maybe a string instead&quot;;
    </p>
    <p>
      notSure = false; // okay, definitely a boolean
    </p>
    <p>
      &#22312;&#23545;&#29616;&#26377;&#20195;&#30721;&#36827;&#34892;&#25913;&#20889;&#30340;&#26102;&#20505;&#65292;any&#31867;&#22411;&#26159;&#21313;&#20998;&#26377;&#29992;&#30340;&#65292;&#23427;&#20801;&#35768;&#20320;&#22312;&#32534;&#35793;&#26102;&#21487;&#36873;&#25321;&#22320;&#21253;&#21547;&#25110;&#31227;&#38500;&#31867;&#22411;&#26816;&#26597;&#12290; &#20320;&#21487;&#33021;&#35748;&#20026; Object&#26377;&#30456;&#20284;&#30340;&#20316;&#29992;&#65292;&#23601;&#20687;&#23427;&#22312;&#20854;&#23427;&#35821;&#35328;&#20013;&#37027;&#26679;&#12290; &#20294;&#26159; Object&#31867;&#22411;&#30340;&#21464;&#37327;&#21482;&#26159;&#20801;&#35768;&#20320;&#32473;&#23427;&#36171;&#20219;&#24847;&#20540; - &#20294;&#26159;&#21364;&#19981;&#33021;&#22815;&#22312;&#23427;&#19978;&#38754;&#35843;&#29992;&#20219;&#24847;&#30340;&#26041;&#27861;&#65292;&#21363;&#20415;&#23427;&#30495;&#30340;&#26377;&#36825;&#20123;&#26041;&#27861;&#65288;&#25968;&#23383;&#26377;toFixed&#26041;&#27861;&#65292;&#20294;&#26159;Object&#20013;&#27809;&#26377;&#35813;&#26041;&#27861;&#65289;&#65306;
    </p>
    <p>
      let notSure: any = 4;
    </p>
    <p>
      notSure.ifItExists(); // okay, ifItExists might exist at runtime
    </p>
    <p>
      notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)
    </p>
    <p>
      let prettySure: Object = 4;
    </p>
    <p>
      prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.
    </p>
    <p>
      &#24403;&#20320;&#21482;&#30693;&#36947;&#19968;&#37096;&#20998;&#25968;&#25454;&#30340;&#31867;&#22411;&#26102;&#65292;any&#31867;&#22411;&#20063;&#26159;&#26377;&#29992;&#30340;&#12290; &#27604;&#22914;&#65292;&#20320;&#26377;&#19968;&#20010;&#25968;&#32452;&#65292;&#23427;&#21253;&#21547;&#20102;&#19981;&#21516;&#30340;&#31867;&#22411;&#30340;&#25968;&#25454;&#65306;
    </p>
    <p>
      let list: any[] = [1, true, &quot;free&quot;];
    </p>
    <p>
      list[1] = 100;
    </p>
    <p>
      &#20061;&#12289;Void
    </p>
    <p>
      &#26576;&#31181;&#31243;&#24230;&#19978;&#26469;&#35828;&#65292;void&#31867;&#22411;&#20687;&#26159;&#19982;any&#31867;&#22411;&#30456;&#21453;&#65292;&#23427;&#34920;&#31034;&#27809;&#26377;&#20219;&#20309;&#31867;&#22411;&#12290; &#24403;&#19968;&#20010;&#20989;&#25968;&#27809;&#26377;&#36820;&#22238;&#20540;&#26102;&#65292;&#20320;&#36890;&#24120;&#20250;&#35265;&#21040;&#20854;&#36820;&#22238;&#20540;&#31867;&#22411;&#26159; void&#65306;
    </p>
    <p>
      function warnUser(): void {
    </p>
    <p>
      &#160;&#160;&#160;&#160;alert(&quot;This is my warning message&quot;);
    </p>
    <p>
      }
    </p>
    <p>
      &#22768;&#26126;&#19968;&#20010;void&#31867;&#22411;&#30340;&#21464;&#37327;&#27809;&#26377;&#20160;&#20040;&#22823;&#29992;&#65292;&#22240;&#20026;&#20320;&#21482;&#33021;&#20026;&#23427;&#36171;&#20104;undefined&#21644;null&#65306;
    </p>
    <p>
      let unusable: void = undefined;
    </p>
    <p>
      &#21313;&#12289;Null&#21644;Undefined
    </p>
    <p>
      TypeScript&#37324;&#65292;undefined&#21644;null&#20004;&#32773;&#21508;&#33258;&#26377;&#33258;&#24049;&#30340;&#31867;&#22411;&#20998;&#21035;&#21483;&#20570;undefined&#21644;null&#12290; &#21644; void&#30456;&#20284;&#65292;&#23427;&#20204;&#30340;&#26412;&#36523;&#30340;&#31867;&#22411;&#29992;&#22788;&#19981;&#26159;&#24456;&#22823;&#65306;
    </p>
    <p>
      // Not much else we can assign to these variables!
    </p>
    <p>
      let u: undefined = undefined;
    </p>
    <p>
      let n: null = null;
    </p>
    <p>
      &#40664;&#35748;&#24773;&#20917;&#19979;null&#21644;undefined&#26159;&#25152;&#26377;&#31867;&#22411;&#30340;&#23376;&#31867;&#22411;&#12290; &#23601;&#26159;&#35828;&#20320;&#21487;&#20197;&#25226; null&#21644;undefined&#36171;&#20540;&#32473;number&#31867;&#22411;&#30340;&#21464;&#37327;&#12290;
    </p>
    <p>
      &#28982;&#32780;&#65292;&#24403;&#20320;&#25351;&#23450;&#20102;--strictNullChecks&#26631;&#35760;&#65292;null&#21644;undefined&#21482;&#33021;&#36171;&#20540;&#32473;void&#21644;&#23427;&#20204;&#21508;&#33258;&#12290; &#36825;&#33021;&#36991;&#20813; &#24456;&#22810;&#24120;&#35265;&#30340;&#38382;&#39064;&#12290; &#20063;&#35768;&#22312;&#26576;&#22788;&#20320;&#24819;&#20256;&#20837;&#19968;&#20010; string&#25110;null&#25110;undefined&#65292;&#20320;&#21487;&#20197;&#20351;&#29992;&#32852;&#21512;&#31867;&#22411;string | null | undefined&#12290; &#20877;&#27425;&#35828;&#26126;&#65292;&#31245;&#21518;&#25105;&#20204;&#20250;&#20171;&#32461;&#32852;&#21512;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#21313;&#19968;&#12289;Never
    </p>
    <p>
      never&#31867;&#22411;&#34920;&#31034;&#30340;&#26159;&#37027;&#20123;&#27704;&#19981;&#23384;&#22312;&#30340;&#20540;&#30340;&#31867;&#22411;&#12290; &#20363;&#22914;&#65292; never&#31867;&#22411;&#26159;&#37027;&#20123;&#24635;&#26159;&#20250;&#25243;&#20986;&#24322;&#24120;&#25110;&#26681;&#26412;&#23601;&#19981;&#20250;&#26377;&#36820;&#22238;&#20540;&#30340;&#20989;&#25968;&#34920;&#36798;&#24335;&#25110;&#31661;&#22836;&#20989;&#25968;&#34920;&#36798;&#24335;&#30340;&#36820;&#22238;&#20540;&#31867;&#22411;&#65307; &#21464;&#37327;&#20063;&#21487;&#33021;&#26159; never&#31867;&#22411;&#65292;&#24403;&#23427;&#20204;&#34987;&#27704;&#19981;&#20026;&#30495;&#30340;&#31867;&#22411;&#20445;&#25252;&#25152;&#32422;&#26463;&#26102;&#12290;
    </p>
    <p>
      never&#31867;&#22411;&#26159;&#20219;&#20309;&#31867;&#22411;&#30340;&#23376;&#31867;&#22411;&#65292;&#20063;&#21487;&#20197;&#36171;&#20540;&#32473;&#20219;&#20309;&#31867;&#22411;&#65307;&#28982;&#32780;&#65292;&#27809;&#26377;&#31867;&#22411;&#26159;never&#30340;&#23376;&#31867;&#22411;&#25110;&#21487;&#20197;&#36171;&#20540;&#32473;never&#31867;&#22411;&#65288;&#38500;&#20102;never&#26412;&#36523;&#20043;&#22806;&#65289;&#12290; &#21363;&#20351; any&#20063;&#19981;&#21487;&#20197;&#36171;&#20540;&#32473;never&#12290;
    </p>
    <p>
      &#19979;&#38754;&#26159;&#19968;&#20123;&#36820;&#22238;never&#31867;&#22411;&#30340;&#20989;&#25968;&#65306;
    </p>
    <p>
      // &#36820;&#22238;never&#30340;&#20989;&#25968;&#24517;&#39035;&#23384;&#22312;&#26080;&#27861;&#36798;&#21040;&#30340;&#32456;&#28857;
    </p>
    <p>
      function error(message: string): never {
    </p>
    <p>
      &#160;&#160;&#160;&#160;throw new Error(message);
    </p>
    <p>
      }
    </p>
    <p>
      // &#25512;&#26029;&#30340;&#36820;&#22238;&#20540;&#31867;&#22411;&#20026;never
    </p>
    <p>
      function fail() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return error(&quot;Something failed&quot;);
    </p>
    <p>
      }
    </p>
    <p>
      // &#36820;&#22238;never&#30340;&#20989;&#25968;&#24517;&#39035;&#23384;&#22312;&#26080;&#27861;&#36798;&#21040;&#30340;&#32456;&#28857;
    </p>
    <p>
      function infiniteLoop(): never {
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (true) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      &#21313;&#20108;&#12289;&#31867;&#22411;&#26029;&#35328;
    </p>
    <p>
      &#26377;&#26102;&#20505;&#20320;&#20250;&#36935;&#21040;&#36825;&#26679;&#30340;&#24773;&#20917;&#65292;&#20320;&#20250;&#27604;TypeScript&#26356;&#20102;&#35299;&#26576;&#20010;&#20540;&#30340;&#35814;&#32454;&#20449;&#24687;&#12290; &#36890;&#24120;&#36825;&#20250;&#21457;&#29983;&#22312;&#20320;&#28165;&#26970;&#22320;&#30693;&#36947;&#19968;&#20010;&#23454;&#20307;&#20855;&#26377;&#27604;&#23427;&#29616;&#26377;&#31867;&#22411;&#26356;&#30830;&#20999;&#30340;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#36890;&#36807;&#31867;&#22411;&#26029;&#35328;&#36825;&#31181;&#26041;&#24335;&#21487;&#20197;&#21578;&#35785;&#32534;&#35793;&#22120;&#65292;&#8220;&#30456;&#20449;&#25105;&#65292;&#25105;&#30693;&#36947;&#33258;&#24049;&#22312;&#24178;&#20160;&#20040;&#8221;&#12290; &#31867;&#22411;&#26029;&#35328;&#22909;&#27604;&#20854;&#23427;&#35821;&#35328;&#37324;&#30340;&#31867;&#22411;&#36716;&#25442;&#65292;&#20294;&#26159;&#19981;&#36827;&#34892;&#29305;&#27530;&#30340;&#25968;&#25454;&#26816;&#26597;&#21644;&#35299;&#26500;&#12290; &#23427;&#27809;&#26377;&#36816;&#34892;&#26102;&#30340;&#24433;&#21709;&#65292;&#21482;&#26159;&#22312;&#32534;&#35793;&#38454;&#27573;&#36215;&#20316;&#29992;&#12290; TypeScript&#20250;&#20551;&#35774;&#20320;&#65292;&#31243;&#24207;&#21592;&#65292;&#24050;&#32463;&#36827;&#34892;&#20102;&#24517;&#39035;&#30340;&#26816;&#26597;&#12290;
    </p>
    <p>
      &#31867;&#22411;&#26029;&#35328;&#26377;&#20004;&#31181;&#24418;&#24335;&#12290; &#20854;&#19968;&#26159;&#8220;&#23574;&#25324;&#21495;&#8221;&#35821;&#27861;&#65306;
    </p>
    <p>
      let someValue: any = &quot;this is a string&quot;;
    </p>
    <p>
      let strLength: number = (&lt;string&gt;someValue).length;
    </p>
    <p>
      &#21478;&#19968;&#20010;&#20026;as&#35821;&#27861;&#65306;
    </p>
    <p>
      let someValue: any = &quot;this is a string&quot;;
    </p>
    <p>
      let strLength: number = (someValue as string).length;
    </p>
    <p>
      &#20004;&#31181;&#24418;&#24335;&#26159;&#31561;&#20215;&#30340;&#12290; &#33267;&#20110;&#20351;&#29992;&#21738;&#20010;&#22823;&#22810;&#25968;&#24773;&#20917;&#19979;&#26159;&#20973;&#20010;&#20154;&#21916;&#22909;&#65307;&#28982;&#32780;&#65292;&#24403;&#20320;&#22312;TypeScript&#37324;&#20351;&#29992;JSX&#26102;&#65292;&#21482;&#26377; as&#35821;&#27861;&#26029;&#35328;&#26159;&#34987;&#20801;&#35768;&#30340;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1508074799467" FOLDED="true" ID="ID_365513339" MODIFIED="1508765872644" POSITION="right" TEXT="&#x53d8;&#x91cf;&#x58f0;&#x660e;">
<node CREATED="1508153914076" ID="ID_298872295" MODIFIED="1508154215928">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      var&#22768;&#26126;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508154219378" ID="ID_1929333545" MODIFIED="1508154572655">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      let&#22768;&#26126;
    </p>
    <p>
      1&#12289;&#24403;&#29992;let&#22768;&#26126;&#19968;&#20010;&#21464;&#37327;&#65292;&#23427;&#20351;&#29992;&#30340;&#26159;&#35789;&#27861;&#20316;&#29992;&#22495;&#25110;&#22359;&#20316;&#29992;&#22495;&#12290; &#19981;&#21516;&#20110;&#20351;&#29992; var&#22768;&#26126;&#30340;&#21464;&#37327;&#37027;&#26679;&#21487;&#20197;&#22312;&#21253;&#21547;&#23427;&#20204;&#30340;&#20989;&#25968;&#22806;&#35775;&#38382;&#65292;&#22359;&#20316;&#29992;&#22495;&#21464;&#37327;&#22312;&#21253;&#21547;&#23427;&#20204;&#30340;&#22359;&#25110;for&#24490;&#29615;&#20043;&#22806;&#26159;&#19981;&#33021;&#35775;&#38382;&#30340;&#12290;
    </p>
    <p>
      2&#12289;&#25317;&#26377;&#22359;&#32423;&#20316;&#29992;&#22495;&#30340;&#21464;&#37327;&#30340;&#21478;&#19968;&#20010;&#29305;&#28857;&#26159;&#65292;&#23427;&#20204;&#19981;&#33021;&#22312;&#34987;&#22768;&#26126;&#20043;&#21069;&#35835;&#25110;&#20889;&#12290; &#34429;&#28982;&#36825;&#20123;&#21464;&#37327;&#22987;&#32456;&#8220;&#23384;&#22312;&#8221;&#20110;&#23427;&#20204;&#30340;&#20316;&#29992;&#22495;&#37324;&#65292;&#20294;&#22312;&#30452;&#21040;&#22768;&#26126;&#23427;&#30340;&#20195;&#30721;&#20043;&#21069;&#30340;&#21306;&#22495;&#37117;&#23646;&#20110; &#26242;&#26102;&#24615;&#27515;&#21306;&#12290; &#23427;&#21482;&#26159;&#29992;&#26469;&#35828;&#26126;&#25105;&#20204;&#19981;&#33021;&#22312; let&#35821;&#21477;&#20043;&#21069;&#35775;&#38382;&#23427;&#20204;&#65292;&#24184;&#36816;&#30340;&#26159;TypeScript&#21487;&#20197;&#21578;&#35785;&#25105;&#20204;&#36825;&#20123;&#20449;&#24687;&#12290;
    </p>
    <p>
      a++; // illegal to use 'a' before it's declared;
    </p>
    <p>
      let a;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508156020903" ID="ID_306476421" MODIFIED="1508156027380" TEXT="const&#x58f0;&#x660e;"/>
</node>
<node CREATED="1508253559996" FOLDED="true" ID="ID_1098410938" MODIFIED="1508765889594" POSITION="right" TEXT="&#x63a5;&#x53e3;">
<node CREATED="1508253705816" ID="ID_1107676513" MODIFIED="1508255232015">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25509;&#21475;&#21021;&#25506;
    </p>
    <p>
      1&#12289;&#23454;&#20363;
    </p>
    <p>
      interface LabelledValue {
    </p>
    <p>
      &#160;&#160;label: string;
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      function printLabel(labelledObj: LabelledValue) {
    </p>
    <p>
      &#160;&#160;console.log(labelledObj.label);
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      let myObj = {size: 10, label: &quot;Size 10 Object&quot;};
    </p>
    <p>
      printLabel(myObj);
    </p>
    <p>
      2&#12289;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;&#25105;&#20204;&#22312;&#36825;&#37324;&#24182;&#19981;&#33021;&#20687;&#22312;&#20854;&#23427;&#35821;&#35328;&#37324;&#19968;&#26679;&#65292;&#35828;&#20256;&#32473; printLabel&#30340;&#23545;&#35937;&#23454;&#29616;&#20102;&#36825;&#20010;&#25509;&#21475;&#12290;&#25105;&#20204;&#21482;&#20250;&#21435;&#20851;&#27880;&#20540;&#30340;&#22806;&#24418;&#12290; &#21482;&#35201;&#20256;&#20837;&#30340;&#23545;&#35937;&#28385;&#36275;&#19978;&#38754;&#25552;&#21040;&#30340;&#24517;&#35201;&#26465;&#20214;&#65292;&#37027;&#20040;&#23427;&#23601;&#26159;&#34987;&#20801;&#35768;&#30340;&#12290;
    </p>
    <p>
      3&#12289;&#36824;&#26377;&#19968;&#28857;&#20540;&#24471;&#25552;&#30340;&#26159;&#65292;&#31867;&#22411;&#26816;&#26597;&#22120;&#19981;&#20250;&#21435;&#26816;&#26597;&#23646;&#24615;&#30340;&#39034;&#24207;&#65292;&#21482;&#35201;&#30456;&#24212;&#30340;&#23646;&#24615;&#23384;&#22312;&#24182;&#19988;&#31867;&#22411;&#20063;&#26159;&#23545;&#30340;&#23601;&#21487;&#20197;&#12290;
    </p>
    <p>
      4&#12289;&#22914;&#19979;&#20195;&#30721;
    </p>
    <p>
      function printLabel(labelledObj: { label: string }) {
    </p>
    <p>
      &#160;&#160;console.log(labelledObj.label);
    </p>
    <p>
      }
    </p>
    <p>
      let myObj = { size: 10, label: &quot;Size 10 Object&quot; };
    </p>
    <p>
      printLabel(myObj);
    </p>
    <p>
      &#25105;&#20204;&#20256;&#20837;&#30340;&#23545;&#35937;&#21442;&#25968;&#23454;&#38469;&#19978;&#20250;&#21253;&#21547;&#24456;&#22810;&#23646;&#24615;&#65292;&#20294;&#26159;&#32534;&#35793;&#22120;&#21482;&#20250;&#26816;&#26597;&#37027;&#20123;&#24517;&#38656;&#30340;&#23646;&#24615;&#26159;&#21542;&#23384;&#22312;&#65292;&#24182;&#19988;&#20854;&#31867;&#22411;&#26159;&#21542;&#21305;&#37197;&#12290;
    </p>
    <p>
      &#22914;&#26524;&#25913;&#25104;&#19979;&#38754;&#36825;&#26679;&#65288;&#29992;&#25509;&#21475;&#23454;&#29616;&#65289;
    </p>
    <p>
      interface LabelledValue {
    </p>
    <p>
      &#160;&#160;label: string;
    </p>
    <p>
      }
    </p>
    <p>
      function printLabel(labelledObj: LabelledValue) {
    </p>
    <p>
      &#160;&#160;console.log(labelledObj.label);
    </p>
    <p>
      }
    </p>
    <p>
      printLabel({size: 10, label: &quot;Size 10 Object&quot;});
    </p>
    <p>
      &#27492;&#26102;&#20250;&#25253;&#38169;&#65292;&#25509;&#21475;&#35201;&#27714;&#23646;&#24615;&#30340;&#20010;&#25968;&#21450;&#31867;&#22411;&#24517;&#39035;&#20005;&#26684;&#36798;&#26631;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508253862901" ID="ID_380655265" MODIFIED="1508254008861">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21487;&#36873;&#23646;&#24615;
    </p>
    <p>
      1&#12289;&#24102;&#26377;&#21487;&#36873;&#23646;&#24615;&#30340;&#25509;&#21475;&#19982;&#26222;&#36890;&#30340;&#25509;&#21475;&#23450;&#20041;&#24046;&#19981;&#22810;&#65292;&#21482;&#26159;&#22312;&#21487;&#36873;&#23646;&#24615;&#21517;&#23383;&#23450;&#20041;&#30340;&#21518;&#38754;&#21152;&#19968;&#20010;?&#31526;&#21495;&#12290;
    </p>
    <p>
      interface SquareConfig {
    </p>
    <p>
      &#160;&#160;color?: string;
    </p>
    <p>
      &#160;&#160;width?: number;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508254409530" ID="ID_1201257502" MODIFIED="1508254444617">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21482;&#35835;&#23646;&#24615;
    </p>
    <p>
      1&#12289;&#35821;&#27861;
    </p>
    <p>
      interface Point {
    </p>
    <p>
      &#160;&#160;&#160;&#160;readonly x: number;
    </p>
    <p>
      &#160;&#160;&#160;&#160;readonly y: number;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508254580333" ID="ID_1241223546" MODIFIED="1508255323886">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#39069;&#22806;&#30340;&#23646;&#24615;&#26816;&#26597;
    </p>
    <p>
      1&#12289;&#35265;&#8220;&#25509;&#21475;&#21021;&#25506;&#8221;&#31456;&#33410;&#65292;&#23646;&#24615;&#21517;&#24517;&#39035;&#23436;&#20840;&#21305;&#37197;&#65292;&#21542;&#21017;&#20250;&#25253;&#38169;
    </p>
    <p>
      2&#12289;&#32469;&#24320;&#26816;&#26597;&#24456;&#31616;&#21333;&#65292;&#26368;&#31616;&#20415;&#30340;&#26041;&#27861;&#26159;&#20351;&#29992;&#31867;&#22411;&#26029;&#35328;
    </p>
    <p>
      interface LabelledValue {
    </p>
    <p>
      &#160;&#160;label: string;
    </p>
    <p>
      }
    </p>
    <p>
      function printLabel(labelledObj: LabelledValue) {
    </p>
    <p>
      &#160;&#160;console.log(labelledObj.label);
    </p>
    <p>
      }
    </p>
    <p>
      printLabel({size: 10, label: &quot;Size 10 Object&quot;} as LabelledValue); //&#31867;&#22411;&#26029;&#35328;
    </p>
    <p>
      3&#12289;&#26368;&#20339;&#30340;&#26041;&#24335;&#26159;&#33021;&#22815;&#28155;&#21152;&#19968;&#20010;&#23383;&#31526;&#20018;&#32034;&#24341;&#31614;&#21517;&#65292;&#21069;&#25552;&#26159;&#20320;&#33021;&#22815;&#30830;&#23450;&#36825;&#20010;&#23545;&#35937;&#21487;&#33021;&#20855;&#26377;&#26576;&#20123;&#20570;&#20026;&#29305;&#27530;&#29992;&#36884;&#20351;&#29992;&#30340;&#39069;&#22806;&#23646;&#24615;&#12290;
    </p>
    <p>
      interface LabelledValue {
    </p>
    <p>
      &#160;&#160;label: string;
    </p>
    <p>
      &#160;&#160;[propName: string]: any; //&#21578;&#35785;TS&#65292;&#21487;&#20197;&#26377;&#20219;&#24847;&#25968;&#37327;&#30340;&#23646;&#24615;&#65292;&#22914;&#26524;&#19981;&#26159;label&#23646;&#24615;&#65292;&#21017;&#23427;&#30340;&#20540;&#21487;&#20197;&#26159;&#20219;&#20309;&#31867;&#22411;
    </p>
    <p>
      }
    </p>
    <p>
      function printLabel(labelledObj: LabelledValue) {
    </p>
    <p>
      &#160;&#160;console.log(labelledObj.label);
    </p>
    <p>
      }
    </p>
    <p>
      printLabel({size: 10, label: &quot;Size 10 Object&quot;});
    </p>
    <p>
      4&#12289;&#36824;&#26377;&#26368;&#21518;&#19968;&#31181;&#36339;&#36807;&#36825;&#20123;&#26816;&#26597;&#30340;&#26041;&#24335;&#65292;&#36825;&#21487;&#33021;&#20250;&#35753;&#20320;&#24863;&#21040;&#24778;&#35766;&#65292;&#23427;&#23601;&#26159;&#23558;&#36825;&#20010;&#23545;&#35937;&#36171;&#20540;&#32473;&#19968;&#20010;&#21478;&#19968;&#20010;&#21464;&#37327;
    </p>
    <p>
      interface LabelledValue {
    </p>
    <p>
      &#160;&#160;label: string;
    </p>
    <p>
      }
    </p>
    <p>
      function printLabel(labelledObj: LabelledValue) {
    </p>
    <p>
      &#160;&#160;console.log(labelledObj.label);
    </p>
    <p>
      }
    </p>
    <p>
      let myObj = {size: 10, label: &quot;Size 10 Object&quot;}; //&#22240;&#20026;myObj&#27809;&#26377;&#31867;&#22411;&#26816;&#26597;&#65292;&#25152;&#20197;&#19981;&#25253;&#38169;
    </p>
    <p>
      printLabel(myObj);
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508255391866" ID="ID_1217981069" MODIFIED="1508566561049">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#29992;&#25509;&#21475;&#34920;&#31034;&#20989;&#25968;&#31867;&#22411;
    </p>
    <p>
      1&#12289;&#23454;&#20363;
    </p>
    <p>
      interface SearchFunc {
    </p>
    <p>
      &#160;&#160;(source: string, subString: string): boolean;
    </p>
    <p>
      }
    </p>
    <p>
      let mySearch: SearchFunc;
    </p>
    <p>
      mySearch = function(source: string, subString: string) {
    </p>
    <p>
      &#160;&#160;let result = source.search(subString);
    </p>
    <p>
      &#160;&#160;return result &gt; -1;
    </p>
    <p>
      }
    </p>
    <p>
      2&#12289;&#23545;&#20110;&#20989;&#25968;&#31867;&#22411;&#30340;&#31867;&#22411;&#26816;&#26597;&#26469;&#35828;&#65292;&#20989;&#25968;&#30340;&#21442;&#25968;&#21517;&#19981;&#38656;&#35201;&#19982;&#25509;&#21475;&#37324;&#23450;&#20041;&#30340;&#21517;&#23383;&#30456;&#21305;&#37197;&#12290;&#20989;&#25968;&#30340;&#21442;&#25968;&#20250;&#36880;&#20010;&#36827;&#34892;&#26816;&#26597;&#65292;&#35201;&#27714;&#23545;&#24212;&#20301;&#32622;&#19978;&#30340;&#21442;&#25968;&#31867;&#22411;&#26159;&#20860;&#23481;&#30340;&#12290; &#22914;&#26524;&#20320;&#19981;&#24819;&#25351;&#23450;&#31867;&#22411;&#65292;TypeScript&#30340;&#31867;&#22411;&#31995;&#32479;&#20250;&#25512;&#26029;&#20986;&#21442;&#25968;&#31867;&#22411;&#65292;&#22240;&#20026;&#20989;&#25968;&#30452;&#25509;&#36171;&#20540;&#32473;&#20102; SearchFunc&#31867;&#22411;&#21464;&#37327;&#12290; &#20989;&#25968;&#30340;&#36820;&#22238;&#20540;&#31867;&#22411;&#26159;&#36890;&#36807;&#20854;&#36820;&#22238;&#20540;&#25512;&#26029;&#20986;&#26469;&#30340;&#65288;&#27492;&#20363;&#26159; false&#21644;true&#65289;&#12290; &#22914;&#26524;&#35753;&#36825;&#20010;&#20989;&#25968;&#36820;&#22238;&#25968;&#23383;&#25110;&#23383;&#31526;&#20018;&#65292;&#31867;&#22411;&#26816;&#26597;&#22120;&#20250;&#35686;&#21578;&#25105;&#20204;&#20989;&#25968;&#30340;&#36820;&#22238;&#20540;&#31867;&#22411;&#19982; SearchFunc&#25509;&#21475;&#20013;&#30340;&#23450;&#20041;&#19981;&#21305;&#37197;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508566589073" ID="ID_1358385392" MODIFIED="1508567136914">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#21487;&#32034;&#24341;&#30340;&#31867;&#22411;
    </p>
    <p>
      1&#12289;&#8220;&#36890;&#36807;&#32034;&#24341;&#24471;&#21040;&#8221;&#30340;&#31867;&#22411;&#65292;&#27604;&#22914;a[10]&#25110;ageMap[&quot;daniel&quot;]&#12290;
    </p>
    <p>
      2&#12289;&#20030;&#20363;
    </p>
    <p>
      interface StringArray {
    </p>
    <p>
      &#160;&#160;[index: number]: string;
    </p>
    <p>
      }
    </p>
    <p>
      let myArray: StringArray;
    </p>
    <p>
      myArray = [&quot;Bob&quot;, &quot;Fred&quot;];
    </p>
    <p>
      let myStr: string = myArray[0];
    </p>
    <p>
      &#34920;&#31034;&#20102;&#24403;&#29992; number&#21435;&#32034;&#24341;StringArray&#26102;&#20250;&#24471;&#21040;string&#31867;&#22411;&#30340;&#36820;&#22238;&#20540;&#12290;
    </p>
    <p>
      3&#12289;&#20849;&#26377;&#25903;&#25345;&#20004;&#31181;&#32034;&#24341;&#31614;&#21517;&#65306;&#23383;&#31526;&#20018;&#21644;&#25968;&#23383;&#12290; &#21487;&#20197;&#21516;&#26102;&#20351;&#29992;&#20004;&#31181;&#31867;&#22411;&#30340;&#32034;&#24341;&#65292;&#20294;&#26159;&#25968;&#23383;&#32034;&#24341;&#30340;&#36820;&#22238;&#20540;&#24517;&#39035;&#26159;&#23383;&#31526;&#20018;&#32034;&#24341;&#36820;&#22238;&#20540;&#31867;&#22411;&#30340;&#23376;&#31867;&#22411;&#12290; &#36825;&#26159;&#22240;&#20026;&#24403;&#20351;&#29992; number&#26469;&#32034;&#24341;&#26102;&#65292;JavaScript&#20250;&#23558;&#23427;&#36716;&#25442;&#25104;string&#28982;&#21518;&#20877;&#21435;&#32034;&#24341;&#23545;&#35937;&#12290; &#20063;&#23601;&#26159;&#35828;&#29992; 100&#65288;&#19968;&#20010;number&#65289;&#21435;&#32034;&#24341;&#31561;&#21516;&#20110;&#20351;&#29992;&quot;100&quot;&#65288;&#19968;&#20010;string&#65289;&#21435;&#32034;&#24341;&#65292;&#22240;&#27492;&#20004;&#32773;&#38656;&#35201;&#20445;&#25345;&#19968;&#33268;&#12290;
    </p>
    <p>
      4&#12289;&#23383;&#31526;&#20018;&#32034;&#24341;&#31614;&#21517;&#33021;&#22815;&#24456;&#22909;&#30340;&#25551;&#36848;dictionary&#27169;&#24335;&#65292;&#24182;&#19988;&#23427;&#20204;&#20063;&#20250;&#30830;&#20445;&#25152;&#26377;&#23646;&#24615;&#19982;&#20854;&#36820;&#22238;&#20540;&#31867;&#22411;&#30456;&#21305;&#37197;&#12290; &#22240;&#20026;&#23383;&#31526;&#20018;&#32034;&#24341;&#22768;&#26126;&#20102; obj.property&#21644;obj[&quot;property&quot;]&#20004;&#31181;&#24418;&#24335;&#37117;&#21487;&#20197;&#12290; &#19979;&#38754;&#30340;&#20363;&#23376;&#37324;&#65292; name&#30340;&#31867;&#22411;&#19982;&#23383;&#31526;&#20018;&#32034;&#24341;&#31867;&#22411;&#19981;&#21305;&#37197;&#65292;&#25152;&#20197;&#31867;&#22411;&#26816;&#26597;&#22120;&#32473;&#20986;&#19968;&#20010;&#38169;&#35823;&#25552;&#31034;&#65306;
    </p>
    <p>
      interface NumberDictionary {
    </p>
    <p>
      &#160;&#160;[index: string]: number;
    </p>
    <p>
      &#160;&#160;length: number;&#160;&#160;&#160;&#160;// &#21487;&#20197;&#65292;length&#26159;number&#31867;&#22411;
    </p>
    <p>
      &#160;&#160;name: string&#160;&#160;&#160;&#160;&#160;&#160;&#160;// &#38169;&#35823;&#65292;`name`&#30340;&#31867;&#22411;&#19982;&#32034;&#24341;&#31867;&#22411;&#36820;&#22238;&#20540;&#30340;&#31867;&#22411;&#19981;&#21305;&#37197;
    </p>
    <p>
      }
    </p>
    <p>
      5&#12289;&#26368;&#21518;&#65292;&#20320;&#21487;&#20197;&#23558;&#32034;&#24341;&#31614;&#21517;&#35774;&#32622;&#20026;&#21482;&#35835;&#65292;&#36825;&#26679;&#23601;&#38450;&#27490;&#20102;&#32473;&#32034;&#24341;&#36171;&#20540;&#65306;
    </p>
    <p>
      interface ReadonlyStringArray {
    </p>
    <p>
      &#160;&#160;&#160;&#160;readonly [index: number]: string;
    </p>
    <p>
      }
    </p>
    <p>
      let myArray: ReadonlyStringArray = [&quot;Alice&quot;, &quot;Bob&quot;];
    </p>
    <p>
      myArray[2] = &quot;Mallory&quot;; // error!
    </p>
    <p>
      &#20320;&#19981;&#33021;&#35774;&#32622;myArray[2]&#65292;&#22240;&#20026;&#32034;&#24341;&#31614;&#21517;&#26159;&#21482;&#35835;&#30340;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508567146427" ID="ID_503343481" MODIFIED="1508568169584">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#31867;&#31867;&#22411;
    </p>
    <p>
      &#19968;&#12289;&#23454;&#29616;&#25509;&#21475;
    </p>
    <p>
      1&#12289;&#19982;C#&#25110;Java&#37324;&#25509;&#21475;&#30340;&#22522;&#26412;&#20316;&#29992;&#19968;&#26679;&#65292;TypeScript&#20063;&#33021;&#22815;&#29992;&#23427;&#26469;&#26126;&#30830;&#30340;&#24378;&#21046;&#19968;&#20010;&#31867;&#21435;&#31526;&#21512;&#26576;&#31181;&#22865;&#32422;&#12290;
    </p>
    <p>
      interface ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;currentTime: Date;
    </p>
    <p>
      }
    </p>
    <p>
      class Clock implements ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;currentTime: Date;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(h: number, m: number) { }
    </p>
    <p>
      }
    </p>
    <p>
      2&#12289;&#20320;&#20063;&#21487;&#20197;&#22312;&#25509;&#21475;&#20013;&#25551;&#36848;&#19968;&#20010;&#26041;&#27861;&#65292;&#22312;&#31867;&#37324;&#23454;&#29616;&#23427;&#65292;&#22914;&#21516;&#19979;&#38754;&#30340;setTime&#26041;&#27861;&#19968;&#26679;&#65306;
    </p>
    <p>
      interface ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;currentTime: Date;
    </p>
    <p>
      &#160;&#160;&#160;&#160;setTime(d: Date);
    </p>
    <p>
      }
    </p>
    <p>
      class Clock implements ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;currentTime: Date;
    </p>
    <p>
      &#160;&#160;&#160;&#160;setTime(d: Date) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this.currentTime = d;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(h: number, m: number) { }
    </p>
    <p>
      }
    </p>
    <p>
      &#20108;&#12289;&#31867;&#38745;&#24577;&#37096;&#20998;&#19982;&#23454;&#20363;&#37096;&#20998;&#30340;&#21306;&#21035;
    </p>
    <p>
      1&#12289;&#24403;&#20320;&#25805;&#20316;&#31867;&#21644;&#25509;&#21475;&#30340;&#26102;&#20505;&#65292;&#20320;&#35201;&#30693;&#36947;&#31867;&#26159;&#20855;&#26377;&#20004;&#20010;&#31867;&#22411;&#30340;&#65306;&#38745;&#24577;&#37096;&#20998;&#30340;&#31867;&#22411;&#21644;&#23454;&#20363;&#30340;&#31867;&#22411;&#12290; &#20320;&#20250;&#27880;&#24847;&#21040;&#65292;&#24403;&#20320;&#29992;&#26500;&#36896;&#22120;&#31614;&#21517;&#21435;&#23450;&#20041;&#19968;&#20010;&#25509;&#21475;&#24182;&#35797;&#22270;&#23450;&#20041;&#19968;&#20010;&#31867;&#21435;&#23454;&#29616;&#36825;&#20010;&#25509;&#21475;&#26102;&#20250;&#24471;&#21040;&#19968;&#20010;&#38169;&#35823;&#65306;
    </p>
    <p>
      interface ClockConstructor {
    </p>
    <p>
      &#160;&#160;&#160;&#160;new (hour: number, minute: number);
    </p>
    <p>
      }
    </p>
    <p>
      class Clock implements ClockConstructor {
    </p>
    <p>
      &#160;&#160;&#160;&#160;currentTime: Date;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(h: number, m: number) { }
    </p>
    <p>
      }
    </p>
    <p>
      //Type 'Clock' provides no match for the signature 'new (hour: number, minute: number): any'.
    </p>
    <p>
      &#36825;&#37324;&#22240;&#20026;&#24403;&#19968;&#20010;&#31867;&#23454;&#29616;&#20102;&#19968;&#20010;&#25509;&#21475;&#26102;&#65292;&#21482;&#23545;&#20854;&#23454;&#20363;&#37096;&#20998;&#36827;&#34892;&#31867;&#22411;&#26816;&#26597;&#12290; constructor&#23384;&#22312;&#20110;&#31867;&#30340;&#38745;&#24577;&#37096;&#20998;&#65292;&#25152;&#20197;&#19981;&#22312;&#26816;&#26597;&#30340;&#33539;&#22260;&#20869;&#12290;
    </p>
    <p>
      2&#12289;&#22240;&#27492;&#65292;&#25105;&#20204;&#24212;&#35813;&#30452;&#25509;&#25805;&#20316;&#31867;&#30340;&#38745;&#24577;&#37096;&#20998;&#12290; &#30475;&#19979;&#38754;&#30340;&#20363;&#23376;&#65292;&#25105;&#20204;&#23450;&#20041;&#20102;&#20004;&#20010;&#25509;&#21475;&#65292; ClockConstructor&#20026;&#26500;&#36896;&#20989;&#25968;&#25152;&#29992;&#21644;ClockInterface&#20026;&#23454;&#20363;&#26041;&#27861;&#25152;&#29992;&#12290; &#20026;&#20102;&#26041;&#20415;&#25105;&#20204;&#23450;&#20041;&#19968;&#20010;&#26500;&#36896;&#20989;&#25968; createClock&#65292;&#23427;&#29992;&#20256;&#20837;&#30340;&#31867;&#22411;&#21019;&#24314;&#23454;&#20363;&#12290;
    </p>
    <p>
      interface ClockConstructor {
    </p>
    <p>
      &#160;&#160;&#160;&#160;new (hour: number, minute: number): ClockInterface;
    </p>
    <p>
      }
    </p>
    <p>
      interface ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;tick();
    </p>
    <p>
      }
    </p>
    <p>
      function createClock(ctor: ClockConstructor, hour: number, minute: number): ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return new ctor(hour, minute);
    </p>
    <p>
      }
    </p>
    <p>
      class DigitalClock implements ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(h: number, m: number) { }
    </p>
    <p>
      &#160;&#160;&#160;&#160;tick() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;beep beep&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      class AnalogClock implements ClockInterface {
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(h: number, m: number) { }
    </p>
    <p>
      &#160;&#160;&#160;&#160;tick() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;tick tock&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      let digital = createClock(DigitalClock, 12, 17);
    </p>
    <p>
      let analog = createClock(AnalogClock, 7, 32);
    </p>
    <p>
      &#22240;&#20026;createClock&#30340;&#31532;&#19968;&#20010;&#21442;&#25968;&#26159;ClockConstructor&#31867;&#22411;&#65292;&#22312;createClock(AnalogClock, 7, 32)&#37324;&#65292;&#20250;&#26816;&#26597;AnalogClock&#26159;&#21542;&#31526;&#21512;&#26500;&#36896;&#20989;&#25968;&#31614;&#21517;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508568189432" ID="ID_1354591475" MODIFIED="1508568282642">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#32487;&#25215;&#25509;&#21475;
    </p>
    <p>
      1&#12289;&#21644;&#31867;&#19968;&#26679;&#65292;&#25509;&#21475;&#20063;&#21487;&#20197;&#30456;&#20114;&#32487;&#25215;&#12290; &#36825;&#35753;&#25105;&#20204;&#33021;&#22815;&#20174;&#19968;&#20010;&#25509;&#21475;&#37324;&#22797;&#21046;&#25104;&#21592;&#21040;&#21478;&#19968;&#20010;&#25509;&#21475;&#37324;&#65292;&#21487;&#20197;&#26356;&#28789;&#27963;&#22320;&#23558;&#25509;&#21475;&#20998;&#21106;&#21040;&#21487;&#37325;&#29992;&#30340;&#27169;&#22359;&#37324;&#12290;
    </p>
    <p>
      &#19968;&#20010;&#25509;&#21475;&#21487;&#20197;&#32487;&#25215;&#22810;&#20010;&#25509;&#21475;&#65292;&#21019;&#24314;&#20986;&#22810;&#20010;&#25509;&#21475;&#30340;&#21512;&#25104;&#25509;&#21475;&#12290;
    </p>
    <p>
      interface Shape {
    </p>
    <p>
      &#160;&#160;&#160;&#160;color: string;
    </p>
    <p>
      }
    </p>
    <p>
      interface PenStroke {
    </p>
    <p>
      &#160;&#160;&#160;&#160;penWidth: number;
    </p>
    <p>
      }
    </p>
    <p>
      interface Square extends Shape, PenStroke {
    </p>
    <p>
      &#160;&#160;&#160;&#160;sideLength: number;
    </p>
    <p>
      }
    </p>
    <p>
      let square = &lt;Square&gt;{};
    </p>
    <p>
      square.color = &quot;blue&quot;;
    </p>
    <p>
      square.sideLength = 10;
    </p>
    <p>
      square.penWidth = 5.0;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508568288236" ID="ID_168975735" MODIFIED="1508568420475">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#28151;&#21512;&#31867;&#22411;
    </p>
    <p>
      &#20808;&#21069;&#25105;&#20204;&#25552;&#36807;&#65292;&#25509;&#21475;&#33021;&#22815;&#25551;&#36848;JavaScript&#37324;&#20016;&#23500;&#30340;&#31867;&#22411;&#12290; &#22240;&#20026;JavaScript&#20854;&#21160;&#24577;&#28789;&#27963;&#30340;&#29305;&#28857;&#65292;&#26377;&#26102;&#20320;&#20250;&#24076;&#26395;&#19968;&#20010;&#23545;&#35937;&#21487;&#20197;&#21516;&#26102;&#20855;&#26377;&#19978;&#38754;&#25552;&#21040;&#30340;&#22810;&#31181;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#19968;&#20010;&#20363;&#23376;&#23601;&#26159;&#65292;&#19968;&#20010;&#23545;&#35937;&#21487;&#20197;&#21516;&#26102;&#20570;&#20026;&#20989;&#25968;&#21644;&#23545;&#35937;&#20351;&#29992;&#65292;&#24182;&#24102;&#26377;&#39069;&#22806;&#30340;&#23646;&#24615;&#12290;
    </p>
    <p>
      interface Counter {
    </p>
    <p>
      &#160;&#160;&#160;&#160;(start: number): string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;interval: number;
    </p>
    <p>
      &#160;&#160;&#160;&#160;reset(): void;
    </p>
    <p>
      }
    </p>
    <p>
      function getCounter(): Counter {
    </p>
    <p>
      &#160;&#160;&#160;&#160;let counter = &lt;Counter&gt;function (start: number) { };
    </p>
    <p>
      &#160;&#160;&#160;&#160;counter.interval = 123;
    </p>
    <p>
      &#160;&#160;&#160;&#160;counter.reset = function () { };
    </p>
    <p>
      &#160;&#160;&#160;&#160;return counter;
    </p>
    <p>
      }
    </p>
    <p>
      let c = getCounter();
    </p>
    <p>
      c(10);
    </p>
    <p>
      c.reset();
    </p>
    <p>
      c.interval = 5.0;
    </p>
    <p>
      &#22312;&#20351;&#29992;JavaScript&#31532;&#19977;&#26041;&#24211;&#30340;&#26102;&#20505;&#65292;&#20320;&#21487;&#33021;&#38656;&#35201;&#20687;&#19978;&#38754;&#37027;&#26679;&#21435;&#23436;&#25972;&#22320;&#23450;&#20041;&#31867;&#22411;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508568436279" ID="ID_223651447" MODIFIED="1508568689923">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#25509;&#21475;&#32487;&#25215;&#31867;
    </p>
    <p>
      1&#12289;&#24403;&#25509;&#21475;&#32487;&#25215;&#20102;&#19968;&#20010;&#31867;&#31867;&#22411;&#26102;&#65292;&#23427;&#20250;&#32487;&#25215;&#31867;&#30340;&#25104;&#21592;&#20294;&#19981;&#21253;&#25324;&#20854;&#23454;&#29616;&#12290; &#23601;&#22909;&#20687;&#25509;&#21475;&#22768;&#26126;&#20102;&#25152;&#26377;&#31867;&#20013;&#23384;&#22312;&#30340;&#25104;&#21592;&#65292;&#20294;&#24182;&#27809;&#26377;&#25552;&#20379;&#20855;&#20307;&#23454;&#29616;&#19968;&#26679;&#12290; &#25509;&#21475;&#21516;&#26679;&#20250;&#32487;&#25215;&#21040;&#31867;&#30340;private&#21644;protected&#25104;&#21592;&#12290; &#36825;&#24847;&#21619;&#30528;&#24403;&#20320;&#21019;&#24314;&#20102;&#19968;&#20010;&#25509;&#21475;&#32487;&#25215;&#20102;&#19968;&#20010;&#25317;&#26377;&#31169;&#26377;&#25110;&#21463;&#20445;&#25252;&#30340;&#25104;&#21592;&#30340;&#31867;&#26102;&#65292;&#36825;&#20010;&#25509;&#21475;&#31867;&#22411;&#21482;&#33021;&#34987;&#36825;&#20010;&#31867;&#25110;&#20854;&#23376;&#31867;&#25152;&#23454;&#29616;&#65288;implement&#65289;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1508765026967" FOLDED="true" ID="ID_346613187" MODIFIED="1508767703307" POSITION="right" TEXT="&#x7c7b;">
<node CREATED="1508765216147" ID="ID_1533161094" MODIFIED="1508765249982">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#31867;
    </p>
    <p>
      1&#12289;&#20363;&#23376;&#65306;
    </p>
    <p>
      class Greeter {
    </p>
    <p>
      &#160;&#160;&#160;&#160;greeting: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(message: string) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this.greeting = message;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;greet() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return &quot;Hello, &quot; + this.greeting;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      let greeter = new Greeter(&quot;world&quot;);
    </p>
    <p>
      &#22914;&#26524;&#20320;&#20351;&#29992;&#36807;C#&#25110;Java&#65292;&#20320;&#20250;&#23545;&#36825;&#31181;&#35821;&#27861;&#38750;&#24120;&#29087;&#24713;&#12290; &#25105;&#20204;&#22768;&#26126;&#19968;&#20010; Greeter&#31867;&#12290;&#36825;&#20010;&#31867;&#26377;3&#20010;&#25104;&#21592;&#65306;&#19968;&#20010;&#21483;&#20570;greeting&#30340;&#23646;&#24615;&#65292;&#19968;&#20010;&#26500;&#36896;&#20989;&#25968;&#21644;&#19968;&#20010;greet&#26041;&#27861;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508765332142" ID="ID_182309351" MODIFIED="1508765617888">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20108;&#12289;&#32487;&#25215;
    </p>
    <p>
      1&#12289;&#20363;&#23376;&#65306;
    </p>
    <p>
      class Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;name:string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(theName: string) { this.name = theName; }
    </p>
    <p>
      &#160;&#160;&#160;&#160;move(distanceInMeters: number = 0) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(`${this.name} moved ${distanceInMeters}m.`);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      class Snake extends Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(name: string) { super(name); }
    </p>
    <p>
      &#160;&#160;&#160;&#160;move(distanceInMeters = 5) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;Slithering...&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super.move(distanceInMeters);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      class Horse extends Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(name: string) { super(name); }
    </p>
    <p>
      &#160;&#160;&#160;&#160;move(distanceInMeters = 45) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;Galloping...&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;super.move(distanceInMeters);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      let sam = new Snake(&quot;Sammy the Python&quot;);
    </p>
    <p>
      let tom: Animal = new Horse(&quot;Tommy the Palomino&quot;);
    </p>
    <p>
      sam.move();
    </p>
    <p>
      tom.move(34);
    </p>
    <p>
      &#36825;&#20010;&#20363;&#23376;&#23637;&#31034;&#20102;TypeScript&#20013;&#32487;&#25215;&#30340;&#19968;&#20123;&#29305;&#24449;&#65292;&#23427;&#20204;&#19982;&#20854;&#23427;&#35821;&#35328;&#31867;&#20284;&#12290; &#25105;&#20204;&#20351;&#29992; extends&#20851;&#38190;&#23383;&#26469;&#21019;&#24314;&#23376;&#31867;&#12290;&#20320;&#21487;&#20197;&#30475;&#21040;Horse&#21644;Snake&#31867;&#26159;&#22522;&#31867;Animal&#30340;&#23376;&#31867;&#65292;&#24182;&#19988;&#21487;&#20197;&#35775;&#38382;&#20854;&#23646;&#24615;&#21644;&#26041;&#27861;&#12290;
    </p>
    <p>
      &#21253;&#21547;&#26500;&#36896;&#20989;&#25968;&#30340;&#27966;&#29983;&#31867;&#24517;&#39035;&#65288;&#27880;&#24847;&#26159;&#24517;&#39035;&#65289;&#35843;&#29992;super()&#65292;&#23427;&#20250;&#25191;&#34892;&#22522;&#31867;&#30340;&#26500;&#36896;&#26041;&#27861;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508765797466" ID="ID_1615434846" MODIFIED="1508767343688">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19977;&#12289;&#20844;&#20849;&#12289;&#31169;&#26377;&#21644;&#21463;&#20445;&#25252;&#20462;&#39280;&#31526;
    </p>
    <p>
      1&#12289;&#40664;&#35748;&#20026;public&#65292;&#21487;&#20197;&#25353;&#29031;&#19979;&#38754;&#30340;&#26041;&#27861;&#26174;&#24335;&#22768;&#26126;
    </p>
    <p>
      class Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;public name: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;public constructor(theName: string) { this.name = theName; }
    </p>
    <p>
      &#160;&#160;&#160;&#160;public move(distanceInMeters: number) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(`${this.name} moved ${distanceInMeters}m.`);
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      2&#12289;&#29702;&#35299;private
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#24403;&#25104;&#21592;&#34987;&#26631;&#35760;&#25104;private&#26102;&#65292;&#23427;&#23601;&#19981;&#33021;&#22312;&#22768;&#26126;&#23427;&#30340;&#31867;&#30340;&#22806;&#37096;&#35775;&#38382;&#12290;&#27604;&#22914;&#65306;
    </p>
    <p>
      class Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private name: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(theName: string) { this.name = theName; }
    </p>
    <p>
      }
    </p>
    <p>
      new Animal(&quot;Cat&quot;).name; // Error: 'name' is private;
    </p>
    <p>
      &#65288;2&#65289;&#12289;TypeScript&#20351;&#29992;&#30340;&#26159;&#32467;&#26500;&#24615;&#31867;&#22411;&#31995;&#32479;&#12290; &#24403;&#25105;&#20204;&#27604;&#36739;&#20004;&#31181;&#19981;&#21516;&#30340;&#31867;&#22411;&#26102;&#65292;&#24182;&#19981;&#22312;&#20046;&#23427;&#20204;&#20174;&#20309;&#22788;&#32780;&#26469;&#65292;&#22914;&#26524;&#25152;&#26377;&#25104;&#21592;&#30340;&#31867;&#22411;&#37117;&#26159;&#20860;&#23481;&#30340;&#65292;&#25105;&#20204;&#23601;&#35748;&#20026;&#23427;&#20204;&#30340;&#31867;&#22411;&#26159;&#20860;&#23481;&#30340;&#12290;
    </p>
    <p>
      &#28982;&#32780;&#65292;&#24403;&#25105;&#20204;&#27604;&#36739;&#24102;&#26377;private&#25110;protected&#25104;&#21592;&#30340;&#31867;&#22411;&#30340;&#26102;&#20505;&#65292;&#24773;&#20917;&#23601;&#19981;&#21516;&#20102;&#12290; &#22914;&#26524;&#20854;&#20013;&#19968;&#20010;&#31867;&#22411;&#37324;&#21253;&#21547;&#19968;&#20010; private&#25104;&#21592;&#65292;&#37027;&#20040;&#21482;&#26377;&#24403;&#21478;&#22806;&#19968;&#20010;&#31867;&#22411;&#20013;&#20063;&#23384;&#22312;&#36825;&#26679;&#19968;&#20010;private&#25104;&#21592;&#65292; &#24182;&#19988;&#23427;&#20204;&#37117;&#26159;&#26469;&#33258;&#21516;&#19968;&#22788;&#22768;&#26126;&#26102;&#65288;&#20063;&#23601;&#26159;&#35828;&#26159;&#32487;&#25215;&#36807;&#26469;&#30340;&#65289;&#65292;&#25105;&#20204;&#25165;&#35748;&#20026;&#36825;&#20004;&#20010;&#31867;&#22411;&#26159;&#20860;&#23481;&#30340;&#12290; &#23545;&#20110; protected&#25104;&#21592;&#20063;&#20351;&#29992;&#36825;&#20010;&#35268;&#21017;&#12290;
    </p>
    <p>
      class Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private name: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(theName: string) { this.name = theName; }
    </p>
    <p>
      }
    </p>
    <p>
      class Rhino extends Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor() { super(&quot;Rhino&quot;); }
    </p>
    <p>
      }
    </p>
    <p>
      class Employee {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private name: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor(theName: string) { this.name = theName; }
    </p>
    <p>
      }
    </p>
    <p>
      let animal = new Animal(&quot;Goat&quot;);
    </p>
    <p>
      let rhino = new Rhino();
    </p>
    <p>
      let employee = new Employee(&quot;Bob&quot;);
    </p>
    <p>
      animal = rhino;
    </p>
    <p>
      animal = employee; // Error: Animal and Employee are not compatible
    </p>
    <p>
      3&#12289;&#29702;&#35299;protected
    </p>
    <p>
      &#65288;1&#65289;&#12289;protected&#20462;&#39280;&#31526;&#19982;private&#20462;&#39280;&#31526;&#30340;&#34892;&#20026;&#24456;&#30456;&#20284;&#65292;&#20294;&#26377;&#19968;&#28857;&#19981;&#21516;&#65292;protected&#25104;&#21592;&#22312;&#27966;&#29983;&#31867;&#20013;&#20173;&#28982;&#21487;&#20197;&#35775;&#38382;&#12290;
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#26500;&#36896;&#20989;&#25968;&#20063;&#21487;&#20197;&#34987;&#26631;&#35760;&#25104;protected&#12290; &#36825;&#24847;&#21619;&#30528;&#36825;&#20010;&#31867;&#19981;&#33021;&#22312;&#21253;&#21547;&#23427;&#30340;&#31867;&#22806;&#34987;&#23454;&#20363;&#21270;&#65292;&#20294;&#26159;&#33021;&#34987;&#32487;&#25215;&#12290;
    </p>
    <p>
      4&#12289;readonly&#20462;&#39280;&#31526;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#21482;&#35835;&#23646;&#24615;&#24517;&#39035;&#22312;&#22768;&#26126;&#26102;&#25110;&#26500;&#36896;&#20989;&#25968;&#37324;&#34987;&#21021;&#22987;&#21270;&#12290;
    </p>
    <p>
      class Octopus {
    </p>
    <p>
      &#160;&#160;&#160;&#160;readonly name: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;readonly numberOfLegs: number = 8;
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor (theName: string) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this.name = theName;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      let dad = new Octopus(&quot;Man with the 8 strong legs&quot;);
    </p>
    <p>
      dad.name = &quot;Man with the 3-piece suit&quot;; // error! name is readonly.
    </p>
    <p>
      5&#12289;&#21442;&#25968;&#23646;&#24615;
    </p>
    <p>
      &#35821;&#27861;&#19981;&#26131;&#35835;
    </p>
    <p>
      6&#12289;&#23384;&#21462;&#22120;
    </p>
    <p>
      &#65288;1&#65289;&#12289;TypeScript&#25903;&#25345;&#36890;&#36807;getters/setters&#26469;&#25130;&#21462;&#23545;&#23545;&#35937;&#25104;&#21592;&#30340;&#35775;&#38382;&#12290; &#23427;&#33021;&#24110;&#21161;&#20320;&#26377;&#25928;&#30340;&#25511;&#21046;&#23545;&#23545;&#35937;&#25104;&#21592;&#30340;&#35775;&#38382;&#12290;
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#23454;&#20363;
    </p>
    <p>
      let passcode = &quot;secret passcode&quot;;
    </p>
    <p>
      class Employee {
    </p>
    <p>
      &#160;&#160;&#160;&#160;private _fullName: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;get fullName(): string {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return this._fullName;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;set fullName(newName: string) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (passcode &amp;&amp; passcode == &quot;secret passcode&quot;) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;this._fullName = newName;
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;else {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log(&quot;Error: Unauthorized update of employee!&quot;);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      let employee = new Employee();
    </p>
    <p>
      employee.fullName = &quot;Bob Smith&quot;;
    </p>
    <p>
      if (employee.fullName) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;alert(employee.fullName);
    </p>
    <p>
      }
    </p>
    <p>
      &#65288;3&#65289;&#12289;&#23384;&#21462;&#22120;&#35201;&#27714;&#20320;&#23558;&#32534;&#35793;&#22120;&#35774;&#32622;&#20026;&#36755;&#20986;ECMAScript 5&#25110;&#26356;&#39640;&#12290; &#19981;&#25903;&#25345;&#38477;&#32423;&#21040;ECMAScript 3&#12290; &#20854;&#27425;&#65292;&#21482;&#24102;&#26377; get&#19981;&#24102;&#26377;set&#30340;&#23384;&#21462;&#22120;&#33258;&#21160;&#34987;&#25512;&#26029;&#20026;readonly&#12290; &#36825;&#22312;&#20174;&#20195;&#30721;&#29983;&#25104; .d.ts&#25991;&#20214;&#26102;&#26159;&#26377;&#24110;&#21161;&#30340;&#65292;&#22240;&#20026;&#21033;&#29992;&#36825;&#20010;&#23646;&#24615;&#30340;&#29992;&#25143;&#20250;&#30475;&#21040;&#19981;&#20801;&#35768;&#22815;&#25913;&#21464;&#23427;&#30340;&#20540;&#12290;
    </p>
    <p>
      7&#12289;&#38745;&#24577;&#23646;&#24615;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#23454;&#20363;
    </p>
    <p>
      class Grid {
    </p>
    <p>
      &#160;&#160;&#160;&#160;static origin = {x: 0, y: 0};
    </p>
    <p>
      &#160;&#160;&#160;&#160;calculateDistanceFromOrigin(point: {x: number; y: number;}) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let xDist = (point.x - Grid.origin.x);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let yDist = (point.y - Grid.origin.y);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return Math.sqrt(xDist * xDist + yDist * yDist) / this.scale;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;constructor (public scale: number) { }
    </p>
    <p>
      }
    </p>
    <p>
      let grid1 = new Grid(1.0);&#160;&#160;// 1x scale
    </p>
    <p>
      let grid2 = new Grid(5.0);&#160;&#160;// 5x scale
    </p>
    <p>
      console.log(grid1.calculateDistanceFromOrigin({x: 10, y: 10}));
    </p>
    <p>
      console.log(grid2.calculateDistanceFromOrigin({x: 10, y: 10}));
    </p>
    <p>
      8&#12289;&#25277;&#35937;&#31867;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#25277;&#35937;&#31867;&#20570;&#20026;&#20854;&#23427;&#27966;&#29983;&#31867;&#30340;&#22522;&#31867;&#20351;&#29992;&#12290; &#23427;&#20204;&#19968;&#33324;&#19981;&#20250;&#30452;&#25509;&#34987;&#23454;&#20363;&#21270;&#12290; &#19981;&#21516;&#20110;&#25509;&#21475;&#65292;&#25277;&#35937;&#31867;&#21487;&#20197;&#21253;&#21547;&#25104;&#21592;&#30340;&#23454;&#29616;&#32454;&#33410;&#12290; abstract&#20851;&#38190;&#23383;&#26159;&#29992;&#20110;&#23450;&#20041;&#25277;&#35937;&#31867;&#21644;&#22312;&#25277;&#35937;&#31867;&#20869;&#37096;&#23450;&#20041;&#25277;&#35937;&#26041;&#27861;&#12290;
    </p>
    <p>
      abstract class Animal {
    </p>
    <p>
      &#160;&#160;&#160;&#160;abstract makeSound(): void;
    </p>
    <p>
      &#160;&#160;&#160;&#160;move(): void {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;console.log('roaming the earch...');
    </p>
    <p>
      &#160;&#160;&#160;&#160;},
    </p>
    <p>
      &#160;&#160;&#160;&#160;abstract printMeeting(): void; // &#25277;&#35937;&#26041;&#27861;&#24517;&#39035;&#22312;&#27966;&#29983;&#31867;&#20013;&#23454;&#29616;
    </p>
    <p>
      }
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#25277;&#35937;&#31867;&#20013;&#30340;&#25277;&#35937;&#26041;&#27861;&#19981;&#21253;&#21547;&#20855;&#20307;&#23454;&#29616;&#24182;&#19988;&#24517;&#39035;&#22312;&#27966;&#29983;&#31867;&#20013;&#23454;&#29616;&#12290; &#25277;&#35937;&#26041;&#27861;&#30340;&#35821;&#27861;&#19982;&#25509;&#21475;&#26041;&#27861;&#30456;&#20284;&#12290; &#20004;&#32773;&#37117;&#26159;&#23450;&#20041;&#26041;&#27861;&#31614;&#21517;&#20294;&#19981;&#21253;&#21547;&#26041;&#27861;&#20307;&#12290; &#28982;&#32780;&#65292;&#25277;&#35937;&#26041;&#27861;&#24517;&#39035;&#21253;&#21547; abstract&#20851;&#38190;&#23383;&#24182;&#19988;&#21487;&#20197;&#21253;&#21547;&#35775;&#38382;&#20462;&#39280;&#31526;&#12290;
    </p>
    <p>
      9&#12289;&#39640;&#32423;&#25216;&#24039;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#26500;&#36896;&#20989;&#25968;
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#25226;&#31867;&#24403;&#20570;&#25509;&#21475;&#20351;&#29992;
    </p>
    <p>
      &#31867;&#23450;&#20041;&#20250;&#21019;&#24314;&#20004;&#20010;&#19996;&#35199;&#65306;&#31867;&#30340;&#23454;&#20363;&#31867;&#22411;&#21644;&#19968;&#20010;&#26500;&#36896;&#20989;&#25968;&#12290; &#22240;&#20026;&#31867;&#21487;&#20197;&#21019;&#24314;&#20986;&#31867;&#22411;&#65292;&#25152;&#20197;&#20320;&#33021;&#22815;&#22312;&#20801;&#35768;&#20351;&#29992;&#25509;&#21475;&#30340;&#22320;&#26041;&#20351;&#29992;&#31867;&#12290;
    </p>
    <p>
      class Point {
    </p>
    <p>
      &#160;&#160;&#160;&#160;x: number;
    </p>
    <p>
      &#160;&#160;&#160;&#160;y: number;
    </p>
    <p>
      }
    </p>
    <p>
      interface Point3d extends Point {
    </p>
    <p>
      &#160;&#160;&#160;&#160;z: number;
    </p>
    <p>
      }
    </p>
    <p>
      let point3d: Point3d = {x: 1, y: 2, z: 3};
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1508767384562" FOLDED="true" ID="ID_1526629533" MODIFIED="1509236373508" POSITION="right" TEXT="&#x51fd;&#x6570;">
<node CREATED="1508767707931" ID="ID_1417665005" MODIFIED="1508768133378">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#20989;&#25968;&#31867;&#22411;
    </p>
    <p>
      1&#12289;&#20026;&#20989;&#25968;&#23450;&#20041;&#31867;&#22411;
    </p>
    <p>
      function add(x: number, y: number): number {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return x + y;
    </p>
    <p>
      }
    </p>
    <p>
      let myAdd = function(x: number, y: number): number { return x + y; };
    </p>
    <p>
      TypeScript&#33021;&#22815;&#26681;&#25454;&#36820;&#22238;&#35821;&#21477;&#33258;&#21160;&#25512;&#26029;&#20986;&#36820;&#22238;&#20540;&#31867;&#22411;&#65292;&#22240;&#27492;&#25105;&#20204;&#36890;&#24120;&#30465;&#30053;&#23427;&#12290;
    </p>
    <p>
      2&#12289;&#20070;&#20889;&#23436;&#25972;&#30340;&#20989;&#25968;&#31867;&#22411;
    </p>
    <p>
      let myAdd: (x: number, y: number) =&gt; number =
    </p>
    <p>
      &#160;&#160;&#160;&#160;function(x: number, y: number): number { return x + y; };
    </p>
    <p>
      3&#12289;&#25512;&#26029;&#31867;&#22411;
    </p>
    <p>
      &#20320;&#20250;&#21457;&#29616;&#22914;&#26524;&#20320;&#22312;&#36171;&#20540;&#35821;&#21477;&#30340;&#19968;&#36793;&#25351;&#23450;&#20102;&#31867;&#22411;&#20294;&#26159;&#21478;&#19968;&#36793;&#27809;&#26377;&#31867;&#22411;&#30340;&#35805;&#65292;TypeScript&#32534;&#35793;&#22120;&#20250;&#33258;&#21160;&#35782;&#21035;&#20986;&#31867;&#22411;&#65306;
    </p>
    <p>
      // myAdd has the full function type
    </p>
    <p>
      let myAdd = function(x: number, y: number): number { return x + y; };
    </p>
    <p>
      // The parameters `x` and `y` have the type number
    </p>
    <p>
      let myAdd: (baseValue: number, increment: number) =&gt; number =
    </p>
    <p>
      &#160;&#160;&#160;&#160;function(x, y) { return x + y; };
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508768193757" ID="ID_1544653765" MODIFIED="1508769228737">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20108;&#12289;&#21487;&#36873;&#21442;&#25968;&amp;&#40664;&#35748;&#21442;&#25968;
    </p>
    <p>
      1&#12289;&#22312;TypeScript&#37324;&#25105;&#20204;&#21487;&#20197;&#22312;&#21442;&#25968;&#21517;&#26049;&#20351;&#29992; ?&#23454;&#29616;&#21487;&#36873;&#21442;&#25968;&#30340;&#21151;&#33021;&#12290; &#27604;&#22914;&#65292;&#25105;&#20204;&#24819;&#35753;last name&#26159;&#21487;&#36873;&#30340;&#65288;&#21487;&#36873;&#21442;&#25968;&#24517;&#39035;&#25918;&#22312;&#38750;&#21487;&#36873;&#21442;&#25968;&#21518;&#38754;&#65289;&#65306;
    </p>
    <p>
      function buildName(firstName: string, lastName?: string) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (lastName)
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return firstName + &quot; &quot; + lastName;
    </p>
    <p>
      &#160;&#160;&#160;&#160;else
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return firstName;
    </p>
    <p>
      }
    </p>
    <p>
      let result1 = buildName(&quot;Bob&quot;);&#160;&#160;// works correctly now
    </p>
    <p>
      let result2 = buildName(&quot;Bob&quot;, &quot;Adams&quot;, &quot;Sr.&quot;);&#160;&#160;// error, too many parameters
    </p>
    <p>
      let result3 = buildName(&quot;Bob&quot;, &quot;Adams&quot;);&#160;&#160;// ah, just right
    </p>
    <p>
      2&#12289;&#25105;&#20204;&#20063;&#21487;&#20197;&#20026;&#21442;&#25968;&#25552;&#20379;&#19968;&#20010;&#40664;&#35748;&#20540;&#65292;&#24403;&#29992;&#25143;&#27809;&#26377;&#20256;&#36882;&#36825;&#20010;&#21442;&#25968;&#25110;&#20256;&#36882;&#30340;&#20540;&#26159;undefined&#26102;&#20351;&#29992;&#23427;&#12290; &#23427;&#20204;&#21483;&#20570;&#26377;&#40664;&#35748;&#21021;&#22987;&#21270;&#20540;&#30340;&#21442;&#25968;&#12290;
    </p>
    <p>
      function buildName(firstName: string, lastName = &quot;Smith&quot;) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return firstName + &quot; &quot; + lastName;
    </p>
    <p>
      }
    </p>
    <p>
      &#22312;&#25152;&#26377;&#24517;&#39035;&#21442;&#25968;&#21518;&#38754;&#30340;&#24102;&#40664;&#35748;&#21021;&#22987;&#21270;&#30340;&#21442;&#25968;&#37117;&#26159;&#21487;&#36873;&#30340;&#65292;&#19982;&#21487;&#36873;&#21442;&#25968;&#19968;&#26679;&#65292;&#22312;&#35843;&#29992;&#20989;&#25968;&#30340;&#26102;&#20505;&#21487;&#20197;&#30465;&#30053;&#12290; &#20063;&#23601;&#26159;&#35828;&#21487;&#36873;&#21442;&#25968;&#19982;&#26411;&#23614;&#30340;&#40664;&#35748;&#21442;&#25968;&#20849;&#20139;&#21442;&#25968;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#19982;&#26222;&#36890;&#21487;&#36873;&#21442;&#25968;&#19981;&#21516;&#30340;&#26159;&#65292;&#24102;&#40664;&#35748;&#20540;&#30340;&#21442;&#25968;&#19981;&#38656;&#35201;&#25918;&#22312;&#24517;&#39035;&#21442;&#25968;&#30340;&#21518;&#38754;&#12290; &#22914;&#26524;&#24102;&#40664;&#35748;&#20540;&#30340;&#21442;&#25968;&#20986;&#29616;&#22312;&#24517;&#39035;&#21442;&#25968;&#21069;&#38754;&#65292;&#29992;&#25143;&#24517;&#39035;&#26126;&#30830;&#30340;&#20256;&#20837; undefined&#20540;&#26469;&#33719;&#24471;&#40664;&#35748;&#20540;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508769232758" ID="ID_1695873398" MODIFIED="1508839840181">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19977;&#12289;&#21097;&#20313;&#21442;&#25968;
    </p>
    <p>
      1&#12289;&#24517;&#35201;&#21442;&#25968;&#65292;&#40664;&#35748;&#21442;&#25968;&#21644;&#21487;&#36873;&#21442;&#25968;&#26377;&#20010;&#20849;&#21516;&#28857;&#65306;&#23427;&#20204;&#34920;&#31034;&#26576;&#19968;&#20010;&#21442;&#25968;&#12290; &#26377;&#26102;&#65292;&#20320;&#24819;&#21516;&#26102;&#25805;&#20316;&#22810;&#20010;&#21442;&#25968;&#65292;&#25110;&#32773;&#20320;&#24182;&#19981;&#30693;&#36947;&#20250;&#26377;&#22810;&#23569;&#21442;&#25968;&#20256;&#36882;&#36827;&#26469;&#12290; &#22312;JavaScript&#37324;&#65292;&#20320;&#21487;&#20197;&#20351;&#29992; arguments&#26469;&#35775;&#38382;&#25152;&#26377;&#20256;&#20837;&#30340;&#21442;&#25968;&#12290;
    </p>
    <p>
      &#22312;TypeScript&#37324;&#65292;&#20320;&#21487;&#20197;&#25226;&#25152;&#26377;&#21442;&#25968;&#25910;&#38598;&#21040;&#19968;&#20010;&#21464;&#37327;&#37324;&#65306;
    </p>
    <p>
      function buildName(firstName: string, ...restOfName: string[]) {
    </p>
    <p>
      &#160;&#160;return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);
    </p>
    <p>
      }
    </p>
    <p>
      2&#12289;&#21097;&#20313;&#21442;&#25968;&#20250;&#34987;&#24403;&#20570;&#20010;&#25968;&#19981;&#38480;&#30340;&#21487;&#36873;&#21442;&#25968;&#12290; &#21487;&#20197;&#19968;&#20010;&#37117;&#27809;&#26377;&#65292;&#21516;&#26679;&#20063;&#21487;&#20197;&#26377;&#20219;&#24847;&#20010;&#12290; &#32534;&#35793;&#22120;&#21019;&#24314;&#21442;&#25968;&#25968;&#32452;&#65292;&#21517;&#23383;&#26159;&#20320;&#22312;&#30465;&#30053;&#21495;&#65288; ...&#65289;&#21518;&#38754;&#32473;&#23450;&#30340;&#21517;&#23383;&#65292;&#20320;&#21487;&#20197;&#22312;&#20989;&#25968;&#20307;&#20869;&#20351;&#29992;&#36825;&#20010;&#25968;&#32452;&#12290;
    </p>
    <p>
      3&#12289;&#36825;&#20010;&#30465;&#30053;&#21495;&#20063;&#20250;&#22312;&#24102;&#26377;&#21097;&#20313;&#21442;&#25968;&#30340;&#20989;&#25968;&#31867;&#22411;&#23450;&#20041;&#19978;&#20351;&#29992;&#21040;&#65306;
    </p>
    <p>
      function buildName(firstName: string, ...restOfName: string[]) {
    </p>
    <p>
      &#160;&#160;return firstName + &quot; &quot; + restOfName.join(&quot; &quot;);
    </p>
    <p>
      }
    </p>
    <p>
      let buildNameFun: (fname: string, ...rest: string[]) =&gt; string = buildName;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508839846500" ID="ID_1775916275" MODIFIED="1508843707378">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#22235;&#12289;this
    </p>
    <p>
      1&#12289;this&#21644;&#31661;&#22836;&#20989;&#25968;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#20363;&#23376;
    </p>
    <p>
      let deck = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;suits: [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;],
    </p>
    <p>
      &#160;&#160;&#160;&#160;cards: Array(52),
    </p>
    <p>
      &#160;&#160;&#160;&#160;createCardPicker: function() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;// NOTE: the line below is now an arrow function, allowing us to capture 'this' right here
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return () =&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pickedCard = Math.floor(Math.random() * 52);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pickedSuit = Math.floor(pickedCard / 13);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {suit: this.suits[pickedSuit], card: pickedCard % 13};
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      let cardPicker = deck.createCardPicker();
    </p>
    <p>
      let pickedCard = cardPicker();
    </p>
    <p>
      
    </p>
    <p>
      alert(&quot;card: &quot; + pickedCard.card + &quot; of &quot; + pickedCard.suit);
    </p>
    <p>
      &#19978;&#38754;&#20363;&#23376;&#20013;&#65292;TypeScript&#20250;&#35686;&#21578;&#20320;&#29359;&#20102;&#19968;&#20010;&#38169;&#35823;&#65292;&#22914;&#26524;&#20320;&#32473;&#32534;&#35793;&#22120;&#35774;&#32622;&#20102;--noImplicitThis&#26631;&#35760;&#12290; &#23427;&#20250;&#25351;&#20986; this.suits[pickedSuit]&#37324;&#30340;this&#30340;&#31867;&#22411;&#20026;any&#12290;
    </p>
    <p>
      2&#12289;this&#21442;&#25968;
    </p>
    <p>
      interface Card {
    </p>
    <p>
      &#160;&#160;&#160;&#160;suit: string;
    </p>
    <p>
      &#160;&#160;&#160;&#160;card: number;
    </p>
    <p>
      }
    </p>
    <p>
      interface Deck {
    </p>
    <p>
      &#160;&#160;&#160;&#160;suits: string[];
    </p>
    <p>
      &#160;&#160;&#160;&#160;cards: number[];
    </p>
    <p>
      &#160;&#160;&#160;&#160;createCardPicker(this: Deck): () =&gt; Card;
    </p>
    <p>
      }
    </p>
    <p>
      let deck: Deck = {
    </p>
    <p>
      &#160;&#160;&#160;&#160;suits: [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;],
    </p>
    <p>
      &#160;&#160;&#160;&#160;cards: Array(52),
    </p>
    <p>
      &#160;&#160;&#160;&#160;// NOTE: The function now explicitly specifies that its callee must be of type Deck
    </p>
    <p>
      &#160;&#160;&#160;&#160;createCardPicker: function(this: Deck) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return () =&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pickedCard = Math.floor(Math.random() * 52);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pickedSuit = Math.floor(pickedCard / 13);
    </p>
    <p>
      
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return {suit: this.suits[pickedSuit], card: pickedCard % 13};
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      let cardPicker = deck.createCardPicker();
    </p>
    <p>
      let pickedCard = cardPicker();
    </p>
    <p>
      alert(&quot;card: &quot; + pickedCard.card + &quot; of &quot; + pickedCard.suit);
    </p>
    <p>
      &#29616;&#22312;TypeScript&#30693;&#36947;createCardPicker&#26399;&#26395;&#22312;&#26576;&#20010;Deck&#23545;&#35937;&#19978;&#35843;&#29992;&#12290; &#20063;&#23601;&#26159;&#35828; this&#26159;Deck&#31867;&#22411;&#30340;&#65292;&#32780;&#38750;any&#65292;&#22240;&#27492;--noImplicitThis&#19981;&#20250;&#25253;&#38169;&#20102;&#12290;
    </p>
    <p>
      3&#12289;this&#21442;&#25968;&#22312;&#22238;&#35843;&#20989;&#25968;&#37324;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1508843877185" ID="ID_228753242" MODIFIED="1508844195072">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20116;&#12289;&#37325;&#36733;
    </p>
    <p>
      1&#12289;&#26041;&#27861;&#26159;&#20026;&#21516;&#19968;&#20010;&#20989;&#25968;&#25552;&#20379;&#22810;&#20010;&#20989;&#25968;&#31867;&#22411;&#23450;&#20041;&#26469;&#36827;&#34892;&#20989;&#25968;&#37325;&#36733;&#12290; &#32534;&#35793;&#22120;&#20250;&#26681;&#25454;&#36825;&#20010;&#21015;&#34920;&#21435;&#22788;&#29702;&#20989;&#25968;&#30340;&#35843;&#29992;&#12290;
    </p>
    <p>
      2&#12289;&#20026;&#20102;&#35753;&#32534;&#35793;&#22120;&#33021;&#22815;&#36873;&#25321;&#27491;&#30830;&#30340;&#26816;&#26597;&#31867;&#22411;&#65292;&#23427;&#19982;JavaScript&#37324;&#30340;&#22788;&#29702;&#27969;&#31243;&#30456;&#20284;&#12290; &#23427;&#26597;&#25214;&#37325;&#36733;&#21015;&#34920;&#65292;&#23581;&#35797;&#20351;&#29992;&#31532;&#19968;&#20010;&#37325;&#36733;&#23450;&#20041;&#12290; &#22914;&#26524;&#21305;&#37197;&#30340;&#35805;&#23601;&#20351;&#29992;&#36825;&#20010;&#12290; &#22240;&#27492;&#65292;&#22312;&#23450;&#20041;&#37325;&#36733;&#30340;&#26102;&#20505;&#65292;&#19968;&#23450;&#35201;&#25226;&#26368;&#31934;&#30830;&#30340;&#23450;&#20041;&#25918;&#22312;&#26368;&#21069;&#38754;&#12290;
    </p>
    <p>
      3&#12289;&#23454;&#20363;
    </p>
    <p>
      let suits = [&quot;hearts&quot;, &quot;spades&quot;, &quot;clubs&quot;, &quot;diamonds&quot;];
    </p>
    <p>
      
    </p>
    <p>
      function pickCard(x: {suit: string; card: number; }[]): number;
    </p>
    <p>
      function pickCard(x: number): {suit: string; card: number; };
    </p>
    <p>
      function pickCard(x): any {
    </p>
    <p>
      &#160;&#160;&#160;&#160;// Check to see if we're working with an object/array
    </p>
    <p>
      &#160;&#160;&#160;&#160;// if so, they gave us the deck and we'll pick the card
    </p>
    <p>
      &#160;&#160;&#160;&#160;if (typeof x == &quot;object&quot;) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pickedCard = Math.floor(Math.random() * x.length);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return pickedCard;
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      &#160;&#160;&#160;&#160;// Otherwise just let them pick the card
    </p>
    <p>
      &#160;&#160;&#160;&#160;else if (typeof x == &quot;number&quot;) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;let pickedSuit = Math.floor(x / 13);
    </p>
    <p>
      &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return { suit: suits[pickedSuit], card: x % 13 };
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      
    </p>
    <p>
      let myDeck = [{ suit: &quot;diamonds&quot;, card: 2 }, { suit: &quot;spades&quot;, card: 10 }, { suit: &quot;hearts&quot;, card: 4 }];
    </p>
    <p>
      let pickedCard1 = myDeck[pickCard(myDeck)];
    </p>
    <p>
      alert(&quot;card: &quot; + pickedCard1.card + &quot; of &quot; + pickedCard1.suit);
    </p>
    <p>
      
    </p>
    <p>
      let pickedCard2 = pickCard(15);
    </p>
    <p>
      alert(&quot;card: &quot; + pickedCard2.card + &quot; of &quot; + pickedCard2.suit);
    </p>
    <p>
      4&#12289;&#27880;&#24847;&#65292;function pickCard(x): any&#24182;&#19981;&#26159;&#37325;&#36733;&#21015;&#34920;&#30340;&#19968;&#37096;&#20998;&#65292;&#22240;&#27492;&#36825;&#37324;&#21482;&#26377;&#20004;&#20010;&#37325;&#36733;&#65306;&#19968;&#20010;&#26159;&#25509;&#25910;&#23545;&#35937;&#21478;&#19968;&#20010;&#25509;&#25910;&#25968;&#23383;&#12290; &#20197;&#20854;&#23427;&#21442;&#25968;&#35843;&#29992; pickCard&#20250;&#20135;&#29983;&#38169;&#35823;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1508844270571" FOLDED="true" ID="ID_310680360" MODIFIED="1509236399703" POSITION="right">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#27867;&#22411;
    </p>
  </body>
</html></richcontent>
<node CREATED="1509236391103" ID="ID_1197486657" MODIFIED="1509236396912">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#20171;&#32461;
    </p>
    <p>
      &#20108;&#12289;&#27867;&#22411;&#20043;Hello World
    </p>
    <p>
      1&#12289;&#20363;&#22914;&#38656;&#35201;&#23450;&#20041;&#19968;&#20010;&#20989;&#25968;&#65292;&#23427;&#25509;&#25910;&#20160;&#20040;&#31867;&#22411;&#30340;&#21442;&#25968;&#23601;&#36820;&#22238;&#20160;&#20040;&#31867;&#22411;&#30340;&#25968;&#25454;
    </p>
    <p>
      2&#12289;&#29992;any&#23454;&#29616;
    </p>
    <p>
      function identity(arg: any): any {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      &#23450;&#20041;&#35299;&#37322;&#20026;&#8220;&#21442;&#25968;&#21644;&#36820;&#22238;&#20540;&#21487;&#20197;&#26159;&#20219;&#24847;&#31867;&#22411;&#65292;&#20294;&#26159;&#19981;&#33021;&#20445;&#35777;&#20182;&#20204;&#26159;&#21516;&#19968;&#31181;&#31867;&#22411;
    </p>
    <p>
      3&#12289;&#27867;&#22411;&#23454;&#29616;
    </p>
    <p>
      function identity&lt;T&gt;(arg: T): T {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      4&#12289;&#23450;&#20041;&#20102;&#27867;&#22411;&#20989;&#25968;&#20043;&#21518;&#65292;&#25105;&#20204;&#26377;2&#31181;&#26041;&#27861;&#20351;&#29992;&#23427;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#26126;&#30830;&#25351;&#23450;&#31867;&#22411;
    </p>
    <p>
      let output = identity&lt;string&gt;(&quot;myString&quot;);&#160;&#160;// type of output will be 'string'
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#21033;&#29992;&#31867;&#22411;&#25512;&#26029;&#65288;&#26356;&#24120;&#29992;&#65292;&#22914;&#26524;&#26080;&#27861;&#25512;&#26029;&#21017;&#20351;&#29992;&#31532;&#19968;&#31181;&#26041;&#27861;&#65289;
    </p>
    <p>
      let output = identity(&quot;myString&quot;);&#160;&#160;// type of output will be 'string'
    </p>
    <p>
      &#19977;&#12289;&#20351;&#29992;&#27867;&#22411;&#21464;&#37327;
    </p>
    <p>
      1&#12289;&#22312;&#20351;&#29992;&#27867;&#22411;&#21464;&#37327;&#30340;&#26102;&#20505;&#65292;&#20320;&#38656;&#35201;&#32771;&#34385;&#21040;&#23427;&#21487;&#33021;&#26159;&#20219;&#24847;&#19968;&#31181;&#31867;&#22411;&#65292;&#25152;&#20197;&#19979;&#38754;&#30340;&#29992;&#27861;&#20250;&#20986;&#38169;
    </p>
    <p>
      function loggingIdentity&lt;T&gt;(arg: T): T {
    </p>
    <p>
      &#160;&#160;&#160;&#160;console.log(arg.length);&#160;&#160;// Error: T doesn't have .length
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      2&#12289;&#25105;&#20204;&#38656;&#35201;&#26356;&#26126;&#30830;&#30340;&#23450;&#20041;&#19968;&#19979;&#65292;&#27604;&#22914;&#19979;&#38754;&#36825;&#20010;&#20989;&#25968;&#23601;&#26159;&#35828;&#25509;&#25910;T&#31867;&#22411;&#30340;&#25968;&#32452;&#65292;&#20063;&#36820;&#22238;T&#31867;&#22411;&#30340;&#25968;&#32452;&#12290;
    </p>
    <p>
      function loggingIdentity&lt;T&gt;(arg: T[]): T[] {
    </p>
    <p>
      &#160;&#160;&#160;&#160;console.log(arg.length);&#160;&#160;// Array has a .length, so no more error
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      3&#12289;&#19978;&#38754;&#30340;&#20363;&#23376;&#20063;&#21487;&#20197;&#20889;&#25104;&#36825;&#26679;
    </p>
    <p>
      function loggingIdentity&lt;T&gt;(arg: Array&lt;T&gt;): Array&lt;T&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;console.log(arg.length);&#160;&#160;// Array has a .length, so no more error
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      &#22235;&#12289;&#27867;&#22411;&#31867;&#22411;
    </p>
    <p>
      1&#12289;&#27867;&#22411;&#20989;&#25968;&#30340;&#31867;&#22411;&#19982;&#38750;&#27867;&#22411;&#20989;&#25968;&#30340;&#31867;&#22411;&#27809;&#20160;&#20040;&#19981;&#21516;&#65292;&#21482;&#26159;&#26377;&#19968;&#20010;&#31867;&#22411;&#21442;&#25968;&#22312;&#26368;&#21069;&#38754;&#65292;&#20687;&#20989;&#25968;&#22768;&#26126;&#19968;&#26679;&#65306;
    </p>
    <p>
      function identity&lt;T&gt;(arg: T): T {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      let myIdentity: &lt;U&gt;(arg: U) =&gt; U = identity;
    </p>
    <p>
      &#21487;&#20197;&#20351;&#29992;&#19981;&#21516;&#30340;&#27867;&#22411;&#21442;&#25968;&#21517;&#65292;&#21482;&#35201;&#22312;&#25968;&#37327;&#19978;&#21644;&#20351;&#29992;&#26041;&#24335;&#19978;&#33021;&#23545;&#24212;&#19978;&#23601;&#21487;&#20197;&#12290;
    </p>
    <p>
      2&#12289;&#25105;&#20204;&#36824;&#21487;&#20197;&#20351;&#29992;&#24102;&#26377;&#35843;&#29992;&#31614;&#21517;&#30340;&#23545;&#35937;&#23383;&#38754;&#37327;&#26469;&#23450;&#20041;&#27867;&#22411;&#20989;&#25968;&#65306;
    </p>
    <p>
      function identity&lt;T&gt;(arg: T): T {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      let myIdentity: {&lt;T&gt;(arg: T): T} = identity;
    </p>
    <p>
      3&#12289;&#20889;&#25104;&#27867;&#22411;&#25509;&#21475;
    </p>
    <p>
      interface GenericIdentityFn {
    </p>
    <p>
      &#160;&#160;&#160;&#160;&lt;T&gt;(arg: T): T;
    </p>
    <p>
      }
    </p>
    <p>
      function identity&lt;T&gt;(arg: T): T {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      let myIdentity: GenericIdentityFn = identity;
    </p>
    <p>
      4&#12289;&#19968;&#20010;&#30456;&#20284;&#30340;&#20363;&#23376;&#65292;&#25105;&#20204;&#21487;&#33021;&#24819;&#25226;&#27867;&#22411;&#21442;&#25968;&#24403;&#20316;&#25972;&#20010;&#25509;&#21475;&#30340;&#19968;&#20010;&#21442;&#25968;&#12290; &#36825;&#26679;&#25105;&#20204;&#23601;&#33021;&#28165;&#26970;&#30340;&#30693;&#36947;&#20351;&#29992;&#30340;&#20855;&#20307;&#26159;&#21738;&#20010;&#27867;&#22411;&#31867;&#22411;&#65288;&#27604;&#22914;&#65306; Dictionary&lt;string&gt;&#32780;&#19981;&#21482;&#26159;Dictionary&#65289;&#12290; &#36825;&#26679;&#25509;&#21475;&#37324;&#30340;&#20854;&#23427;&#25104;&#21592;&#20063;&#33021;&#30693;&#36947;&#36825;&#20010;&#21442;&#25968;&#30340;&#31867;&#22411;&#20102;&#12290;
    </p>
    <p>
      interface GenericIdentityFn&lt;T&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;(arg: T): T;
    </p>
    <p>
      }
    </p>
    <p>
      function identity&lt;T&gt;(arg: T): T {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
    <p>
      let myIdentity: GenericIdentityFn&lt;number&gt; = identity;
    </p>
    <p>
      &#20116;&#12289;&#27867;&#22411;&#31867;
    </p>
    <p>
      1&#12289;&#27867;&#22411;&#31867;&#30475;&#19978;&#21435;&#19982;&#27867;&#22411;&#25509;&#21475;&#24046;&#19981;&#22810;&#12290; &#27867;&#22411;&#31867;&#20351;&#29992;&#65288; &lt;&gt;&#65289;&#25324;&#36215;&#27867;&#22411;&#31867;&#22411;&#65292;&#36319;&#22312;&#31867;&#21517;&#21518;&#38754;&#12290;
    </p>
    <p>
      class GenericNumber&lt;T&gt; {
    </p>
    <p>
      &#160;&#160;&#160;&#160;zeroValue: T;
    </p>
    <p>
      &#160;&#160;&#160;&#160;add: (x: T, y: T) =&gt; T;
    </p>
    <p>
      }
    </p>
    <p>
      let myGenericNumber = new GenericNumber&lt;number&gt;();
    </p>
    <p>
      myGenericNumber.zeroValue = 0;
    </p>
    <p>
      myGenericNumber.add = function(x, y) { return x + y; };
    </p>
    <p>
      2&#12289;&#25105;&#20204;&#22312;&#31867;&#37027;&#33410;&#35828;&#36807;&#65292;&#31867;&#26377;&#20004;&#37096;&#20998;&#65306;&#38745;&#24577;&#37096;&#20998;&#21644;&#23454;&#20363;&#37096;&#20998;&#12290; &#27867;&#22411;&#31867;&#25351;&#30340;&#26159;&#23454;&#20363;&#37096;&#20998;&#30340;&#31867;&#22411;&#65292;&#25152;&#20197;&#31867;&#30340;&#38745;&#24577;&#23646;&#24615;&#19981;&#33021;&#20351;&#29992;&#36825;&#20010;&#27867;&#22411;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#20845;&#12289;&#27867;&#22411;&#32422;&#26463;
    </p>
    <p>
      1&#12289;&#30456;&#27604;&#20110;&#25805;&#20316;any&#25152;&#26377;&#31867;&#22411;&#65292;&#25105;&#20204;&#24819;&#35201;&#38480;&#21046;&#20989;&#25968;&#21435;&#22788;&#29702;&#20219;&#24847;&#24102;&#26377;.length&#23646;&#24615;&#30340;&#25152;&#26377;&#31867;&#22411;&#12290; &#21482;&#35201;&#20256;&#20837;&#30340;&#31867;&#22411;&#26377;&#36825;&#20010;&#23646;&#24615;&#65292;&#25105;&#20204;&#23601;&#20801;&#35768;&#65292;&#23601;&#26159;&#35828;&#33267;&#23569;&#21253;&#21547;&#36825;&#19968;&#23646;&#24615;&#12290; &#20026;&#27492;&#65292;&#25105;&#20204;&#38656;&#35201;&#21015;&#20986;&#23545;&#20110;T&#30340;&#32422;&#26463;&#35201;&#27714;&#12290;
    </p>
    <p>
      &#20026;&#27492;&#65292;&#25105;&#20204;&#23450;&#20041;&#19968;&#20010;&#25509;&#21475;&#26469;&#25551;&#36848;&#32422;&#26463;&#26465;&#20214;&#12290; &#21019;&#24314;&#19968;&#20010;&#21253;&#21547; .length&#23646;&#24615;&#30340;&#25509;&#21475;&#65292;&#20351;&#29992;&#36825;&#20010;&#25509;&#21475;&#21644;extends&#20851;&#38190;&#23383;&#36824;&#23454;&#29616;&#32422;&#26463;&#65306;
    </p>
    <p>
      interface Lengthwise {
    </p>
    <p>
      &#160;&#160;&#160;&#160;length: number;
    </p>
    <p>
      }
    </p>
    <p>
      function loggingIdentity&lt;T extends Lengthwise&gt;(arg: T): T {
    </p>
    <p>
      &#160;&#160;&#160;&#160;console.log(arg.length);&#160;&#160;// Now we know it has a .length property, so no more error
    </p>
    <p>
      &#160;&#160;&#160;&#160;return arg;
    </p>
    <p>
      }
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1509236408790" ID="ID_1908371920" MODIFIED="1509236414543" POSITION="left" TEXT="&#x58f0;&#x660e;&#x6587;&#x4ef6;">
<node CREATED="1509377268842" FOLDED="true" ID="ID_690492696" MODIFIED="1542352480301" TEXT="&#x4ecb;&#x7ecd;">
<node CREATED="1509380079418" ID="ID_1266933818" MODIFIED="1509380090621" TEXT="&#x6587;&#x7ae0;&#x5730;&#x5740;&#xff1a;https://fenying.net/2016/09/19/typings-for-typescript/"/>
<node CREATED="1509377317857" ID="ID_272462633" MODIFIED="1509377843576">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;TypeScript &#32534;&#35793;&#22120;&#20063;&#20165;&#25552;&#20379;&#20102; ECMAScript &#26631;&#20934;&#37324;&#30340;&#26631;&#20934;&#24211;&#31867;&#22411;&#22768;&#26126;&#65292;&#21482;&#33021;&#35782;&#21035; TypeScript &#20195;&#30721;&#37324;&#30340;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#37027;&#20040; TypeScript &#20013;&#22914;&#20309;&#24341;&#29992;&#19968;&#20010; JavaScript &#25991;&#20214;&#21602;&#65311;&#20363;&#22914;&#20351;&#29992; lodash&#65292;async &#31561;&#33879;&#21517;&#30340; JavaScript &#31532;&#19977;&#26041;&#24211;&#12290;&#31572;&#26696;&#26159;&#36890;&#36807;&#22768;&#26126;&#25991;&#20214;&#65288;Declaration Files&#65289;&#12290;
    </p>
    <p>
      2&#12289;&#21644; C/C++ &#30340; *.h &#22836;&#25991;&#20214;&#65288;Header files&#65289;&#38750;&#24120;&#30456;&#20284;&#65306;&#24403;&#20320;&#22312; C/C++ &#31243;&#24207;&#20013;&#24341;&#29992;&#20102;&#19968;&#20010;&#31532;&#19977;&#26041;&#24211;&#65288;.lib/.dll/.so/.a/.la&#65289;&#26102;&#65292;C/C++ &#32534;&#35793;&#22120;&#26080;&#27861;&#33258;&#21160;&#22320;&#35782;&#21035;&#24211;&#20869;&#23548;&#20986;&#21517;&#31216;&#21644;&#20989;&#25968;&#31867;&#22411;&#31614;&#21517;&#31561;&#65292;&#36825;&#23601;&#38656;&#35201;&#20351;&#29992;&#22836;&#25991;&#20214;&#36827;&#34892;&#25509;&#21475;&#22768;&#26126;&#20102;&#12290;
    </p>
    <p>
      &#21516;&#29702;&#22320;&#65292;TypeScript &#30340;&#22768;&#26126;&#25991;&#20214;&#26159;&#19968;&#20010;&#20197; .d.ts &#20026;&#21518;&#32512;&#30340; TypeScript &#20195;&#30721;&#25991;&#20214;&#65292;&#20294;&#23427;&#30340;&#20316;&#29992;&#26159;&#25551;&#36848;&#19968;&#20010; JavaScript &#27169;&#22359;&#65288;&#24191;&#20041;&#19978;&#30340;&#65289;&#20869;&#25152;&#26377;&#23548;&#20986;&#25509;&#21475;&#30340;&#31867;&#22411;&#20449;&#24687;&#12290;
    </p>
    <p>
      3&#12289;&#20363;&#22914;
    </p>
    <p>
      &#32593;&#39029;&#19978;&#24341;&#29992;&#38750;&#27169;&#22359;&#21270;&#30340; JavaScript &#25991;&#20214;&#37324;&#30340;&#21517;&#31216;
    </p>
    <p>
      // &lt;script src=&quot;sample-00.js&quot;&gt;&lt;/script&gt;
    </p>
    <p>
      // &#36890;&#36807; script &#26631;&#31614;&#24341;&#20837;&#21517;&#31216;&#21040; JS &#30340;&#20840;&#23616;&#21629;&#21517;&#31354;&#38388;&#20013;&#12290;
    </p>
    <p>
      var name = &quot;Mick&quot;;
    </p>
    <p>
      function test(inStr) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return inStr.substr(0, 4);
    </p>
    <p>
      }
    </p>
    <p>
      &#22312;&#21478;&#19968;&#20010; TypeScript &#25991;&#20214;&#37324;&#24341;&#29992;&#37324;&#38754;&#30340;&#21517;&#31216;&#65292;&#19981;&#21487;&#29992;
    </p>
    <p>
      // File: test-01.ts
    </p>
    <p>
      console.log(name); // &#32534;&#35793;&#25253;&#38169;&#65292;name &#19981;&#23384;&#22312;&#12290;
    </p>
    <p>
      console.log(test(&quot;hello&quot;)); // &#32534;&#35793;&#25253;&#38169;&#65292;test &#19981;&#23384;&#22312;&#12290;
    </p>
    <p>
      &#22240;&#20026; TypeScript &#19981;&#33021;&#20174;&#32431; JavaScript &#25991;&#20214;&#37324;&#25688;&#21462;&#31867;&#22411;&#20449;&#24687;&#65292;&#25152;&#20197; TypeScript &#30340;&#32534;&#35793;&#22120;&#26681;&#26412;&#19981;&#30693;&#36947;&#21464;&#37327; name &#30340;&#23384;&#22312;&#12290;&#36825;&#19968;&#28857;&#21644; C/C++ &#38750;&#24120;&#30456;&#20284;&#65292;&#32780;&#35299;&#20915;&#26041;&#27861;&#20063;&#20960;&#20046;&#19968;&#33268;&#65306;&#20351;&#29992;&#19968;&#20010; Definition&#65292;&#25226;&#36825;&#20010;&#21464;&#37327;&#22768;&#26126;&#20889;&#36827;&#21435;&#65292;&#35753;&#20854;&#23427;&#38656;&#35201;&#20351;&#29992;&#36825;&#20010;&#21464;&#37327;&#30340;&#25991;&#20214;&#24341;&#29992;&#12290;
    </p>
    <p>
      // File sample-00.d.ts
    </p>
    <p>
      declare let name: string;
    </p>
    <p>
      declare let test: (inStr: string) =&gt; string;
    </p>
    <p>
      &#22312; TypeScript &#25991;&#20214;&#37324;&#20351;&#29992; &#19977;&#26012;&#32447;&#25351;&#20196; &#24341;&#29992;&#36825;&#20010;&#25991;&#20214;&#65306;
    </p>
    <p>
      // File: test-01.ts
    </p>
    <p>
      /// &lt;reference path=&quot;./sample-00.d.ts&quot;&gt;
    </p>
    <p>
      console.log(name); // &#32534;&#35793;&#36890;&#36807;&#12290;
    </p>
    <p>
      console.log(test(&quot;hello&quot;)); // &#32534;&#35793;&#36890;&#36807;&#12290;
    </p>
    <p>
      4&#12289;&#31532;&#19977;&#26041;&#24211; async &#20063;&#26159;&#32431; JavaScript &#24211;&#65292;&#27809;&#26377;&#31867;&#22411;&#20449;&#24687;&#12290;&#35201;&#22312; TypeScript &#20013;&#20351;&#29992;&#65292;&#21487;&#20197;&#21040; DefinitelyTyped &#32452;&#32455;&#30340; GitHub &#20179;&#24211;&#37324;&#38754;&#19979;&#36733;&#19968;&#20221; async.d.ts &#25991;&#20214;&#65292;&#23558;&#20043;&#24341;&#29992;&#36827;&#26469;&#12290;&#20294;&#26159;&#19968;&#20010;&#20010;&#24211;&#37117;&#21435;&#19979;&#36733;&#23545;&#24212;&#30340; Definition &#65292;&#23454;&#22312;&#22826;&#40635;&#28902;&#20102;&#65292;&#20063;&#19981;&#26041;&#20415;&#31649;&#29702;&#65292;&#25152;&#20197;&#25105;&#20204;&#21487;&#20197;&#20351;&#29992; DefinitelyTyped &#32452;&#32455;&#25552;&#20379;&#30340;&#22768;&#26126;&#31649;&#29702;&#22120;&#8212;&#8212;typings&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1509377856184" ID="ID_1996913627" MODIFIED="1509378701297">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20351;&#29992;typings&#22768;&#26126;&#31649;&#29702;&#22120;
    </p>
    <p>
      1&#12289;&#23433;&#35013;&#19982;&#22522;&#26412;&#20351;&#29992;
    </p>
    <p>
      typings &#26159;&#19968;&#20010;&#29992; Node.js &#32534;&#20889;&#30340;&#24037;&#20855;&#65292;&#25176;&#31649;&#22312; NPM &#20179;&#24211;&#37324;&#65292;&#36890;&#36807;&#19979;&#38754;&#30340;&#21629;&#20196;&#21487;&#20197;&#23433;&#35013;
    </p>
    <p>
      npm install typings -g
    </p>
    <p>
      2&#12289;&#29616;&#22312;&#25105;&#20204;&#35201;&#23433;&#35013; async &#24211;&#30340; Definition &#23601;&#31616;&#21333;&#20102;&#65292;&#30452;&#25509;&#19968;&#21477;&#21629;&#20196;&#34892;
    </p>
    <p>
      typings install dt~async --global&#65288;dt&#34920;&#31034;&#28304;&#65289;
    </p>
    <p>
      3&#12289;&#36825;&#26679;&#65292; async &#24211;&#30340; Definition &#23601;&#20250;&#34987;&#23433;&#35013;&#21040; ./typings/globals/async/index.d.ts &#12290;&#21487;&#20197;&#33258;&#30001;&#22320;&#20351;&#29992; async &#24211;&#30340; Definition &#20102;&#12290;
    </p>
    <p>
      &#22914;&#26524;&#20320;&#35273;&#24471;&#36825;&#20010;&#36335;&#24452;&#22826;&#38271;&#20102;&#65292;&#21487;&#20197;&#20351;&#29992; ./typings/index.d.ts &#36825;&#20010;&#25991;&#20214;&#12290;&#36825;&#26159;&#19968;&#20010;&#32479;&#19968;&#32034;&#24341;&#25991;&#20214;&#65292;&#20351;&#29992; typings &#24037;&#20855;&#23433;&#35013;&#30340;&#25152;&#26377; Definition &#37117;&#20250;&#34987;&#24341;&#29992;&#28155;&#21152;&#21040;&#36825;&#20010;&#25991;&#20214;&#37324;&#65292;&#25152;&#20197;&#36890;&#36807;&#24341;&#29992;&#36825;&#20010;&#25991;&#20214;&#65292;&#23601;&#21487;&#20197;&#36731;&#26494;&#24341;&#29992;&#25152;&#26377;&#23433;&#35013;&#36807;&#30340; Definition &#65281;
    </p>
    <p>
      4&#12289;Definition&#28304;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#22914;&#26524;&#20320;&#19981;&#30830;&#23450;&#26576;&#20010;&#24211; Definition &#30340;&#28304;&#65292;&#21487;&#20197;&#20351;&#29992;&#19979;&#38754;&#30340;&#21629;&#20196;&#26597;&#25214;&#65306;typings search --name &#24211;&#20934;&#30830;&#21517;&#31216;
    </p>
    <p>
      5&#12289;&#23433;&#35013;&#26576;&#20010;&#24211;&#29305;&#23450;&#29256;&#26412;&#30340;Definition
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#39318;&#20808;&#65292;&#36890;&#36807; typings &#24037;&#20855;&#30340; info &#21629;&#20196;&#26597;&#30475;&#26576;&#20010;&#24211;&#22768;&#26126;&#30340;&#20998;&#25903;&#20449;&#24687;&#12290;&#20363;&#22914;&#65306;$ typings info env~node --versions
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#28982;&#21518;&#36890;&#36807;typings i env~node#4.0.0+20160902022231 --global&#23601;&#23433;&#35013;&#22909;&#20102;&#12290;
    </p>
    <p>
      6&#12289;&#20174; GitHub &#20179;&#24211;&#23433;&#35013; Definition
    </p>
    <p>
      &#21487;&#20197;&#20351;&#29992; typings &#20174;&#25351;&#23450;&#30340; GitHub &#20179;&#24211;&#37324;&#19979;&#36733;&#23433;&#35013; Definition
    </p>
    <p>
      &#21629;&#20196;&#26684;&#24335;&#26377;&#20004;&#31181;&#65306;
    </p>
    <p>
      # &#25991;&#20214;&#24335;
    </p>
    <p>
      typings i github:&#29992;&#25143;&#21517;/&#39033;&#30446;&#21517;&#31216;/&#25991;&#20214;&#36335;&#24452; --global
    </p>
    <p>
      &#25110;
    </p>
    <p>
      # &#20179;&#24211;&#24335;
    </p>
    <p>
      typings i github:&#29992;&#25143;&#21517;/&#39033;&#30446;&#21517;&#31216; --global
    </p>
    <p>
      &#30452;&#25509;&#23433;&#35013;&#20179;&#24211;&#37324;&#30340;&#26576;&#20010;&#25991;&#20214;&#20316;&#20026; Definition
    </p>
    <p>
      # &#25991;&#20214;&#24335;
    </p>
    <p>
      # &#23433;&#35013;&#36825;&#20010;&#25991;&#20214;&#30340;&#26368;&#26032; commit &#29256;&#26412;
    </p>
    <p>
      typings i github:DefinitelyTyped/DefinitelyTyped/express/express.d.ts --global
    </p>
    <p>
      &#20351;&#29992;&#29305;&#23450; commit &#29256;&#26412;&#20316;&#20026; Definition
    </p>
    <p>
      # &#25991;&#20214;&#24335;
    </p>
    <p>
      # &#23433;&#35013;&#36825;&#20010;&#25991;&#20214;&#30340; commit=5fd6d6b4eaabda87d19ad13b7d6709443617ddd8 &#30340;&#29256;&#26412;
    </p>
    <p>
      typings i github:DefinitelyTyped/DefinitelyTyped/express/express.d.ts#5fd6d6b4eaabda87d19ad13b7d6709443617ddd8 --global
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1509378848765" ID="ID_166006968" MODIFIED="1509378965294">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20351;&#29992;typings.json&#31649;&#29702;Definition
    </p>
    <p>
      1&#12289;&#20808;&#21021;&#22987;&#21270;&#23427;&#65292;
    </p>
    <p>
      typings init
    </p>
    <p>
      2&#12289;&#29616;&#22312;&#25105;&#20204;&#26469;&#23433;&#35013; Definition &#65292;&#24182;&#35760;&#24405;&#21040;&#34920;&#20013;&#65306;
    </p>
    <p>
      typings i env~node dt~async --global --save
    </p>
    <p>
      3&#12289;&#36825;&#26679;&#65292;&#21457;&#24067;&#39033;&#30446;&#26102;&#25110;&#32773;&#19978;&#20256;&#20195;&#30721;&#21040; GitHub &#30340;&#26102;&#20505;&#65292;typings &#30446;&#24405;&#23601;&#21487;&#26377;&#21487;&#26080;&#20102;&#65292;&#38656;&#35201;&#30340;&#26102;&#20505;&#30452;&#25509;&#19968;&#21477; typings i &#23601;&#23436;&#25104;&#20102; Definition &#30340;&#23433;&#35013;&#12290;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;typings &#40664;&#35748;&#23433;&#35013;&#26368;&#26032;&#29256;&#26412;&#30340; Definition&#65292;&#22914;&#26524;&#20320;&#19981;&#24819;&#27599;&#27425;&#37117;&#23433;&#35013;&#26368;&#26032;&#30340;&#65292;&#21487;&#20197;&#36890;&#36807; 2.4. &#20174; GitHub &#20179;&#24211;&#23433;&#35013; Definition &#30340;&#26041;&#27861;&#35299;&#20915;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1509378974740" ID="ID_1074689266" MODIFIED="1509380200065">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#32534;&#20889;Definition
    </p>
    <p>
      //&#24453;&#34917;&#20805;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1509236527398" FOLDED="true" ID="ID_762613699" MODIFIED="1509380099361" TEXT="&#x7ed3;&#x6784;">
<node CREATED="1509236562648" ID="ID_629357977" MODIFIED="1509288627908">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#35782;&#21035;&#24211;&#30340;&#31867;&#22411;
    </p>
    <p>
      1&#12289;&#20840;&#23616;&#24211;
    </p>
    <p>
      &#19981;&#38656;&#35201;&#20219;&#20309;&#24418;&#24335;&#30340;import&#65292;&#22914;jQuery
    </p>
    <p>
      &#27169;&#29256;&#25991;&#20214;global.d.ts&#23450;&#20041;&#20102;myLib&#24211;&#20316;&#20026;&#20363;&#23376;&#12290; &#19968;&#23450;&#35201;&#38405;&#35835; &quot;&#38450;&#27490;&#21629;&#21517;&#20914;&#31361;&quot;&#34917;&#20805;&#35828;&#26126;&#12290;
    </p>
    <p>
      2&#12289;&#27169;&#22359;&#21270;&#24211;
    </p>
    <p>
      &#65288;1&#65289;&#12289;commonjs&#24211;&#65292;ES6&#24211;&#65292;UMD&#24211;
    </p>
    <p>
      &#38024;&#23545;&#27169;&#22359;&#26377;&#19977;&#31181;&#21487;&#29992;&#30340;&#27169;&#22359;&#65292; module.d.ts, module-class.d.ts and module-function.d.ts.
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#20351;&#29992;module-function.d.ts&#65292;&#22914;&#26524;&#27169;&#22359;&#33021;&#22815;&#20316;&#20026;&#20989;&#25968;&#35843;&#29992;&#12290;
    </p>
    <p>
      &#20351;&#29992;module-class.d.ts&#22914;&#26524;&#27169;&#22359;&#33021;&#22815;&#20351;&#29992;new&#26469;&#26500;&#36896;&#12290;
    </p>
    <p>
      &#65288;3&#65289;&#12289;&#22914;&#26524;&#27169;&#22359;&#19981;&#33021;&#34987;&#35843;&#29992;&#25110;&#26500;&#36896;&#65292;&#20351;&#29992;module.d.ts&#25991;&#20214;&#12290;
    </p>
    <p>
      &#65288;4&#65289;&#12289;&#27169;&#22359;&#25554;&#20214;&#25110;UMD&#25554;&#20214;&#65292;&#20351;&#29992;module-plugin.d.ts&#27169;&#29256;&#12290;
    </p>
    <p>
      &#65288;5&#65289;&#12289;&#20840;&#23616;&#25554;&#20214;&#65292;&#20351;&#29992;global-plugin.d.ts&#27169;&#29256;&#12290;
    </p>
    <p>
      &#65288;6&#65289;&#12289;&#20840;&#23616;&#20462;&#25913;&#30340;&#27169;&#22359;&#65292;&#20351;&#29992;global-modifying-module.d.ts&#27169;&#29256;&#12290;
    </p>
    <p>
      3&#12289;&#20351;&#29992;&#20381;&#36182;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#20381;&#36182;&#20840;&#23616;&#24211;
    </p>
    <p>
      &#22914;&#26524;&#20320;&#30340;&#24211;&#20381;&#36182;&#20110;&#26576;&#20010;&#20840;&#23616;&#24211;&#65292;&#20351;&#29992;/// &lt;reference types=&quot;...&quot; /&gt;&#25351;&#20196;&#65306;
    </p>
    <p>
      /// &lt;reference types=&quot;someLib&quot; /&gt;
    </p>
    <p>
      function getThing(): someLib.thing;
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#20381;&#36182;&#27169;&#22359;
    </p>
    <p>
      &#22914;&#26524;&#20320;&#30340;&#24211;&#20381;&#36182;&#20110;&#27169;&#22359;&#65292;&#20351;&#29992;import&#35821;&#21477;&#65306;
    </p>
    <p>
      import * as moment from &quot;moment&quot;;
    </p>
    <p>
      function getThing(): moment;
    </p>
    <p>
      &#65288;3&#65289;&#12289;&#20381;&#36182;UMD&#24211;
    </p>
    <p>
      &#65288;3-1&#65289;&#12289;&#20174;&#20840;&#23616;&#24211;
    </p>
    <p>
      &#22914;&#26524;&#20320;&#30340;&#20840;&#23616;&#24211;&#20381;&#36182;&#20110;&#26576;&#20010;UMD&#27169;&#22359;&#65292;&#20351;&#29992;/// &lt;reference types&#25351;&#20196;&#65306;
    </p>
    <p>
      /// &lt;reference types=&quot;moment&quot; /&gt;
    </p>
    <p>
      function getThing(): moment;
    </p>
    <p>
      &#65288;3-2&#65289;&#12289;&#20174;&#19968;&#20010;&#27169;&#22359;&#25110;UMD&#24211;
    </p>
    <p>
      &#22914;&#26524;&#20320;&#30340;&#27169;&#22359;&#25110;UMD&#24211;&#20381;&#36182;&#20110;&#19968;&#20010;UMD&#24211;&#65292;&#20351;&#29992;import&#35821;&#21477;&#65306;
    </p>
    <p>
      import * as someLib from 'someLib';
    </p>
    <p>
      &#19981;&#35201;&#20351;&#29992;/// &lt;reference&#25351;&#20196;&#21435;&#22768;&#26126;UMD&#24211;&#30340;&#20381;&#36182;&#65281;
    </p>
    <p>
      4&#12289;&#34917;&#20805;&#35828;&#26126;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#38450;&#27490;&#21629;&#21517;&#20914;&#31361;
    </p>
    <p>
      &#27880;&#24847;&#65292;&#22312;&#20070;&#20889;&#20840;&#23616;&#22768;&#26126;&#25991;&#20214;&#26102;&#65292;&#20801;&#35768;&#22312;&#20840;&#23616;&#20316;&#29992;&#22495;&#37324;&#23450;&#20041;&#24456;&#22810;&#31867;&#22411;&#12290; &#25105;&#20204;&#21313;&#20998;&#19981;&#24314;&#20041;&#36825;&#26679;&#20570;&#65292;&#24403;&#19968;&#20010;&#24037;&#31243;&#37324;&#26377;&#35768;&#22810;&#22768;&#26126;&#25991;&#20214;&#26102;&#65292;&#23427;&#20250;&#23548;&#33268;&#26080;&#27861;&#22788;&#29702;&#30340;&#21629;&#21517;&#20914;&#31361;&#12290;
    </p>
    <p>
      &#19968;&#20010;&#31616;&#21333;&#30340;&#35268;&#21017;&#26159;&#20351;&#29992;&#24211;&#23450;&#20041;&#30340;&#20840;&#23616;&#21464;&#37327;&#21517;&#26469;&#22768;&#26126;&#21629;&#21517;&#31354;&#38388;&#31867;&#22411;&#12290; &#27604;&#22914;&#65292;&#24211;&#23450;&#20041;&#20102;&#19968;&#20010;&#20840;&#23616;&#30340;&#20540; cats&#65292;&#20320;&#21487;&#20197;&#36825;&#26679;&#20889;
    </p>
    <p>
      declare namespace cats {
    </p>
    <p>
      &#160;&#160;&#160;&#160;interface KittySettings { }
    </p>
    <p>
      }
    </p>
    <p>
      &#19981;&#35201;
    </p>
    <p>
      // at top-level
    </p>
    <p>
      interface CatsKittySettings { }
    </p>
    <p>
      &#36825;&#26679;&#20063;&#20445;&#35777;&#20102;&#24211;&#22312;&#36716;&#25442;&#25104;UMD&#30340;&#26102;&#20505;&#27809;&#26377;&#20219;&#20309;&#30340;&#30772;&#22351;&#24335;&#25913;&#21464;&#65292;&#23545;&#20110;&#22768;&#26126;&#25991;&#20214;&#29992;&#25143;&#26469;&#35828;&#12290;
    </p>
    <p>
      &#65288;2&#65289;&#12289;ES6&#27169;&#22359;&#25554;&#20214;&#30340;&#24433;&#21709;
    </p>
    <p>
      &#19968;&#20123;&#25554;&#20214;&#28155;&#21152;&#25110;&#20462;&#25913;&#24050;&#23384;&#22312;&#30340;&#39030;&#23618;&#27169;&#22359;&#30340;&#23548;&#20986;&#37096;&#20998;&#12290; &#24403;&#28982;&#36825;&#22312;CommonJS&#21644;&#20854;&#23427;&#21152;&#36733;&#22120;&#37324;&#26159;&#20801;&#35768;&#30340;&#65292;ES&#27169;&#22359;&#34987;&#24403;&#20316;&#26159;&#19981;&#21487;&#25913;&#21464;&#30340;&#22240;&#27492;&#36825;&#31181;&#27169;&#24335;&#23601;&#19981;&#21487;&#34892;&#20102;&#12290; &#22240;&#20026;TypeScript&#26159;&#19981;&#33021;&#39044;&#30693;&#21152;&#36733;&#22120;&#31867;&#22411;&#30340;&#65292;&#25152;&#20197;&#27809;&#27861;&#22312;&#32534;&#35793;&#26102;&#20445;&#35777;&#65292;&#20294;&#26159;&#24320;&#21457;&#32773;&#22914;&#26524;&#35201;&#36716;&#21040;ES6&#27169;&#22359;&#21152;&#36733;&#22120;&#19978;&#24212;&#35813;&#27880;&#24847;&#36825;&#19968;&#28857;&#12290;
    </p>
    <p>
      &#65288;3&#65289;&#12289;ES6&#27169;&#22359;&#35843;&#29992;&#31614;&#21517;&#30340;&#24433;&#21709;
    </p>
    <p>
      &#24456;&#22810;&#27969;&#34892;&#24211;&#65292;&#27604;&#22914;Express&#65292;&#26292;&#38706;&#20986;&#33258;&#24049;&#20316;&#20026;&#21487;&#20197;&#35843;&#29992;&#30340;&#20989;&#25968;&#12290; &#27604;&#22914;&#65292;&#20856;&#22411;&#30340;Express&#20351;&#29992;&#26041;&#27861;&#22914;&#19979;&#65306;
    </p>
    <p>
      import exp = require(&quot;express&quot;);
    </p>
    <p>
      var app = exp();
    </p>
    <p>
      &#22312;ES6&#27169;&#22359;&#21152;&#36733;&#22120;&#37324;&#65292;&#39030;&#23618;&#30340;&#23545;&#35937;&#65288;&#36825;&#37324;&#20197;exp&#23548;&#20837;&#65289;&#21482;&#33021;&#20855;&#26377;&#23646;&#24615;&#65307; &#39030;&#23618;&#30340;&#27169;&#22359;&#23545;&#35937; &#27704;&#36828;&#19981;&#33021;&#34987;&#35843;&#29992;&#12290; &#21313;&#20998;&#24120;&#35265;&#30340;&#35299;&#20915;&#26041;&#27861;&#26159;&#23450;&#20041;&#19968;&#20010; default&#23548;&#20986;&#21040;&#19968;&#20010;&#21487;&#35843;&#29992;&#30340;/&#21487;&#26500;&#36896;&#30340;&#23545;&#35937;&#65307; &#19968;&#20250;&#27169;&#22359;&#21152;&#36733;&#22120;&#21161;&#25163;&#24037;&#20855;&#33021;&#22815;&#33258;&#24049;&#25506;&#27979;&#21040;&#36825;&#31181;&#24773;&#20917;&#24182;&#19988;&#20351;&#29992; default&#23548;&#20986;&#26469;&#26367;&#25442;&#39030;&#23618;&#23545;&#35937;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1509380930331" ID="ID_723638854" MODIFIED="1509380932419" TEXT="&#x6df1;&#x5165;">
<node CREATED="1509380987157" FOLDED="true" ID="ID_1299704069" MODIFIED="1542352487538" TEXT="&#x6838;&#x5fc3;&#x6982;&#x5ff5;">
<node CREATED="1509381005757" ID="ID_1043504731" MODIFIED="1509381052576">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#31867;&#22411;
    </p>
    <p>
      1&#12289;&#31867;&#22411;&#36890;&#36807;&#20197;&#19979;&#26041;&#24335;&#24341;&#20837;&#65306;
    </p>
    <p>
      &#65288;1&#65289;&#12289;&#31867;&#22411;&#21035;&#21517;&#22768;&#26126;&#65288;type sn = number | string;&#65289;
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#25509;&#21475;&#22768;&#26126;&#65288;interface I { x: number[]; }&#65289;
    </p>
    <p>
      &#65288;3&#65289;&#12289;&#31867;&#22768;&#26126;&#65288;class C { }&#65289;
    </p>
    <p>
      &#65288;4&#65289;&#12289;&#26522;&#20030;&#22768;&#26126;&#65288;enum E { A, B, C }&#65289;
    </p>
    <p>
      &#65288;5&#65289;&#12289;&#25351;&#21521;&#26576;&#20010;&#31867;&#22411;&#30340;import&#22768;&#26126;
    </p>
    <p>
      &#20197;&#19978;&#27599;&#31181;&#22768;&#26126;&#24418;&#24335;&#37117;&#20250;&#21019;&#24314;&#19968;&#20010;&#26032;&#30340;&#31867;&#22411;&#21517;&#31216;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1509381091252" ID="ID_1412265076" MODIFIED="1509381134583">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#20108;&#12289;&#20540;
    </p>
    <p>
      &#19982;&#31867;&#22411;&#30456;&#27604;&#65292;&#20320;&#21487;&#33021;&#24050;&#32463;&#29702;&#35299;&#20102;&#20160;&#20040;&#26159;&#20540;&#12290; &#20540;&#26159;&#36816;&#34892;&#26102;&#21517;&#23383;&#65292;&#21487;&#20197;&#22312;&#34920;&#36798;&#24335;&#37324;&#24341;&#29992;&#12290; &#27604;&#22914; let x = 5;&#21019;&#24314;&#19968;&#20010;&#21517;&#20026;x&#30340;&#20540;&#12290;
    </p>
    <p>
      &#21516;&#26679;&#65292;&#20197;&#19979;&#26041;&#24335;&#33021;&#22815;&#21019;&#24314;&#20540;&#65306;
    </p>
    <p>
      &#65288;1&#65289;&#12289;let&#65292;const&#65292;&#21644;var&#22768;&#26126;
    </p>
    <p>
      &#65288;2&#65289;&#12289;&#21253;&#21547;&#20540;&#30340;namespace&#25110;module&#22768;&#26126;
    </p>
    <p>
      &#65288;3&#65289;&#12289;enum&#22768;&#26126;
    </p>
    <p>
      &#65288;4&#65289;&#12289;class&#22768;&#26126;
    </p>
    <p>
      &#65288;5&#65289;&#12289;&#25351;&#21521;&#20540;&#30340;import&#22768;&#26126;
    </p>
    <p>
      &#65288;6&#65289;&#12289;function&#22768;&#26126;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1509410614808" ID="ID_859442602" MODIFIED="1509410634541">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19977;&#12289;&#21629;&#21517;&#31354;&#38388;
    </p>
    <p>
      &#31867;&#22411;&#21487;&#20197;&#23384;&#22312;&#20110;&#21629;&#21517;&#31354;&#38388;&#37324;&#12290; &#27604;&#22914;&#65292;&#26377;&#36825;&#26679;&#30340;&#22768;&#26126; let x: A.B.C&#65292; &#25105;&#20204;&#23601;&#35748;&#20026; C&#31867;&#22411;&#26469;&#33258;A.B&#21629;&#21517;&#31354;&#38388;&#12290;
    </p>
    <p>
      &#36825;&#20010;&#21306;&#21035;&#34429;&#32454;&#24494;&#20294;&#24456;&#37325;&#35201; -- &#36825;&#37324;&#65292;A.B&#19981;&#26159;&#24517;&#38656;&#30340;&#31867;&#22411;&#25110;&#20540;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1509288680236" FOLDED="true" ID="ID_987612477" MODIFIED="1542352503631" TEXT="&#x4f7f;&#x7528;">
<node CREATED="1509288724007" ID="ID_1113935887" MODIFIED="1509289265516">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1&#12289;&#19979;&#36733;
    </p>
    <p>
      &#22312;TypeScript 2.0&#20197;&#19978;&#30340;&#29256;&#26412;&#65292;&#33719;&#21462;&#31867;&#22411;&#22768;&#26126;&#25991;&#20214;&#21482;&#38656;&#35201;&#20351;&#29992;npm&#12290;
    </p>
    <p>
      &#27604;&#22914;&#65292;&#33719;&#21462;lodash&#24211;&#30340;&#22768;&#26126;&#25991;&#20214;&#65292;&#21482;&#38656;&#20351;&#29992;&#19979;&#38754;&#30340;&#21629;&#20196;&#65306;
    </p>
    <p>
      npm install --save @types/lodash
    </p>
    <p>
      2&#12289;&#20351;&#29992;
    </p>
    <p>
      &#19979;&#36733;&#23436;&#21518;&#65292;&#23601;&#21487;&#20197;&#30452;&#25509;&#22312;TypeScript&#37324;&#20351;&#29992;lodash&#20102;&#12290; &#19981;&#35770;&#26159;&#22312;&#27169;&#22359;&#37324;&#36824;&#26159;&#20840;&#23616;&#20195;&#30721;&#37324;&#20351;&#29992;&#12290;
    </p>
    <p>
      &#27604;&#22914;&#65292;&#20320;&#24050;&#32463;npm install&#23433;&#35013;&#20102;&#31867;&#22411;&#22768;&#26126;&#65292;&#20320;&#21487;&#20197;&#20351;&#29992;&#23548;&#20837;&#65306;
    </p>
    <p>
      import * as _ from &quot;lodash&quot;;
    </p>
    <p>
      _.padStart(&quot;Hello TypeScript!&quot;, 20, &quot; &quot;);
    </p>
    <p>
      &#25110;&#32773;&#22914;&#26524;&#20320;&#27809;&#26377;&#20351;&#29992;&#27169;&#22359;&#65292;&#37027;&#20040;&#20320;&#21482;&#38656;&#20351;&#29992;&#20840;&#23616;&#30340;&#21464;&#37327;_&#12290;
    </p>
    <p>
      _.padStart(&quot;Hello TypeScript!&quot;, 20, &quot; &quot;);
    </p>
    <p>
      3&#12289;&#26597;&#25214;
    </p>
    <p>
      &#22823;&#22810;&#25968;&#24773;&#20917;&#19979;&#65292;&#31867;&#22411;&#22768;&#26126;&#21253;&#30340;&#21517;&#23383;&#24635;&#26159;&#19982;&#23427;&#20204;&#22312;npm&#19978;&#30340;&#21253;&#30340;&#21517;&#23383;&#30456;&#21516;&#65292;&#20294;&#26159;&#26377;@types/&#21069;&#32512;&#65292; &#20294;&#22914;&#26524;&#20320;&#38656;&#35201;&#30340;&#35805;&#65292;&#20320;&#21487;&#20197;&#22312; https://aka.ms/types&#36825;&#37324;&#26597;&#25214;&#20320;&#21916;&#27426;&#30340;&#24211;&#12290;
    </p>
    <p>
      &#27880;&#24847;&#65306;&#22914;&#26524;&#20320;&#35201;&#25214;&#30340;&#22768;&#26126;&#25991;&#20214;&#19981;&#23384;&#22312;&#65292;&#20320;&#21487;&#20197;&#36129;&#29486;&#19968;&#20221;&#65292;&#36825;&#26679;&#23601;&#26041;&#20415;&#20102;&#19979;&#19968;&#20301;&#35201;&#20351;&#29992;&#23427;&#30340;&#20154;&#12290; &#26597;&#30475;DefinitelyTyped &#36129;&#29486;&#25351;&#21335;&#39029;&#20102;&#35299;&#35814;&#24773;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</map>
