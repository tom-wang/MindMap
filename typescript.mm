<map version="1.0.1">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1507987312775" ID="ID_936269374" MODIFIED="1508153904389">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      typescript
    </p>
    <p>
      &#22522;&#32447;&#29256;&#26412;&#65306;2.4
    </p>
  </body>
</html>
</richcontent>
<node CREATED="1508067043492" FOLDED="true" ID="ID_601916027" MODIFIED="1508153802065" POSITION="right" TEXT="&#x57fa;&#x7840;&#x7c7b;&#x578b;">
<node CREATED="1508067086436" ID="ID_89928941" MODIFIED="1508074722888">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &#19968;&#12289;&#20171;&#32461;
    </p>
    <p>
      &#20108;&#12289;&#24067;&#23572;&#20540;
    </p>
    <p>
      let isDone: boolean = false;
    </p>
    <p>
      &#19977;&#12289;&#25968;&#23383;&#65292;&#21644;JS&#19968;&#26679;&#65292;&#25152;&#26377;&#25968;&#23383;&#37117;&#26159;&#28014;&#28857;&#25968;&#65292;&#31867;&#22411;&#20026;number
    </p>
    <p>
      let decLiteral: number = 6;
    </p>
    <p>
      let hexLiteral: number = 0xf00d;
    </p>
    <p>
      let binaryLiteral: number = 0b1010;
    </p>
    <p>
      let octalLiteral: number = 0o744;
    </p>
    <p>
      &#22235;&#12289;&#23383;&#31526;&#20018;
    </p>
    <p>
      let name: string = &quot;bob&quot;;
    </p>
    <p>
      name = &quot;smith&quot;;
    </p>
    <p>
      &#20063;&#25903;&#25345;&#27169;&#26495;&#23383;&#31526;&#20018;
    </p>
    <p>
      let name: string = `Gene`;
    </p>
    <p>
      let age: number = 37;
    </p>
    <p>
      let sentence: string = `Hello, my name is ${ name }.
    </p>
    <p>
      I'll be ${ age + 1 } years old next month.`;
    </p>
    <p>
      &#20116;&#12289;&#25968;&#32452;
    </p>
    <p>
      &#26377;&#20004;&#31181;&#26041;&#24335;&#21487;&#20197;&#23450;&#20041;&#25968;&#32452;&#12290; &#31532;&#19968;&#31181;&#65292;&#21487;&#20197;&#22312;&#20803;&#32032;&#31867;&#22411;&#21518;&#38754;&#25509;&#19978; []&#65292;&#34920;&#31034;&#30001;&#27492;&#31867;&#22411;&#20803;&#32032;&#32452;&#25104;&#30340;&#19968;&#20010;&#25968;&#32452;&#65306;
    </p>
    <p>
      let list: number[] = [1, 2, 3];
    </p>
    <p>
      &#31532;&#20108;&#31181;&#26041;&#24335;&#26159;&#20351;&#29992;&#25968;&#32452;&#27867;&#22411;&#65292;Array&lt;&#20803;&#32032;&#31867;&#22411;&gt;&#65306;
    </p>
    <p>
      let list: Array&lt;number&gt; = [1, 2, 3];
    </p>
    <p>
      &#20845;&#12289;&#20803;&#32452;Tuple
    </p>
    <p>
      &#20803;&#32452;&#31867;&#22411;&#20801;&#35768;&#34920;&#31034;&#19968;&#20010;&#24050;&#30693;&#20803;&#32032;&#25968;&#37327;&#21644;&#31867;&#22411;&#30340;&#25968;&#32452;&#65292;&#21508;&#20803;&#32032;&#30340;&#31867;&#22411;&#19981;&#24517;&#30456;&#21516;&#12290; &#27604;&#22914;&#65292;&#20320;&#21487;&#20197;&#23450;&#20041;&#19968;&#23545;&#20540;&#20998;&#21035;&#20026; string&#21644;number&#31867;&#22411;&#30340;&#20803;&#32452;&#12290;
    </p>
    <p>
      // Declare a tuple type
    </p>
    <p>
      let x: [string, number];
    </p>
    <p>
      // Initialize it
    </p>
    <p>
      x = ['hello', 10]; // OK
    </p>
    <p>
      // Initialize it incorrectly
    </p>
    <p>
      x = [10, 'hello']; // Error
    </p>
    <p>
      &#24403;&#35775;&#38382;&#19968;&#20010;&#24050;&#30693;&#32034;&#24341;&#30340;&#20803;&#32032;&#65292;&#20250;&#24471;&#21040;&#27491;&#30830;&#30340;&#31867;&#22411;&#65306;
    </p>
    <p>
      console.log(x[0].substr(1)); // OK
    </p>
    <p>
      console.log(x[1].substr(1)); // Error, 'number' does not have 'substr'
    </p>
    <p>
      &#24403;&#35775;&#38382;&#19968;&#20010;&#36234;&#30028;&#30340;&#20803;&#32032;&#65292;&#20250;&#20351;&#29992;&#32852;&#21512;&#31867;&#22411;&#26367;&#20195;&#65306;
    </p>
    <p>
      x[3] = 'world'; // OK, &#23383;&#31526;&#20018;&#21487;&#20197;&#36171;&#20540;&#32473;(string | number)&#31867;&#22411;
    </p>
    <p>
      console.log(x[5].toString()); // OK, 'string' &#21644; 'number' &#37117;&#26377; toString
    </p>
    <p>
      x[6] = true; // Error, &#24067;&#23572;&#19981;&#26159;(string | number)&#31867;&#22411;
    </p>
    <p>
      &#32852;&#21512;&#31867;&#22411;&#26159;&#39640;&#32423;&#20027;&#39064;&#65292;&#25105;&#20204;&#20250;&#22312;&#20197;&#21518;&#30340;&#31456;&#33410;&#37324;&#35752;&#35770;&#23427;&#12290;
    </p>
    <p>
      &#19971;&#12289;&#26522;&#20030;
    </p>
    <p>
      enum&#31867;&#22411;&#26159;&#23545;JavaScript&#26631;&#20934;&#25968;&#25454;&#31867;&#22411;&#30340;&#19968;&#20010;&#34917;&#20805;&#12290; &#20687;C#&#31561;&#20854;&#23427;&#35821;&#35328;&#19968;&#26679;&#65292;&#20351;&#29992;&#26522;&#20030;&#31867;&#22411;&#21487;&#20197;&#20026;&#19968;&#32452;&#25968;&#20540;&#36171;&#20104;&#21451;&#22909;&#30340;&#21517;&#23383;&#12290;
    </p>
    <p>
      enum Color {Red, Green, Blue}
    </p>
    <p>
      let c: Color = Color.Green;
    </p>
    <p>
      &#40664;&#35748;&#24773;&#20917;&#19979;&#65292;&#20174;0&#24320;&#22987;&#20026;&#20803;&#32032;&#32534;&#21495;&#12290; &#20320;&#20063;&#21487;&#20197;&#25163;&#21160;&#30340;&#25351;&#23450;&#25104;&#21592;&#30340;&#25968;&#20540;&#12290; &#20363;&#22914;&#65292;&#25105;&#20204;&#23558;&#19978;&#38754;&#30340;&#20363;&#23376;&#25913;&#25104;&#20174; 1&#24320;&#22987;&#32534;&#21495;&#65306;
    </p>
    <p>
      enum Color {Red = 1, Green, Blue}
    </p>
    <p>
      let c: Color = Color.Green;
    </p>
    <p>
      &#25110;&#32773;&#65292;&#20840;&#37096;&#37117;&#37319;&#29992;&#25163;&#21160;&#36171;&#20540;&#65306;
    </p>
    <p>
      enum Color {Red = 1, Green = 2, Blue = 4}
    </p>
    <p>
      let c: Color = Color.Green;
    </p>
    <p>
      &#26522;&#20030;&#31867;&#22411;&#25552;&#20379;&#30340;&#19968;&#20010;&#20415;&#21033;&#26159;&#20320;&#21487;&#20197;&#30001;&#26522;&#20030;&#30340;&#20540;&#24471;&#21040;&#23427;&#30340;&#21517;&#23383;&#12290; &#20363;&#22914;&#65292;&#25105;&#20204;&#30693;&#36947;&#25968;&#20540;&#20026;2&#65292;&#20294;&#26159;&#19981;&#30830;&#23450;&#23427;&#26144;&#23556;&#21040;Color&#37324;&#30340;&#21738;&#20010;&#21517;&#23383;&#65292;&#25105;&#20204;&#21487;&#20197;&#26597;&#25214;&#30456;&#24212;&#30340;&#21517;&#23383;&#65306;
    </p>
    <p>
      enum Color {Red = 1, Green, Blue}
    </p>
    <p>
      let colorName: string = Color[2];
    </p>
    <p>
      alert(colorName);
    </p>
    <p>
      &#20843;&#12289;Any
    </p>
    <p>
      &#26377;&#26102;&#20505;&#65292;&#25105;&#20204;&#20250;&#24819;&#35201;&#20026;&#37027;&#20123;&#22312;&#32534;&#31243;&#38454;&#27573;&#36824;&#19981;&#28165;&#26970;&#31867;&#22411;&#30340;&#21464;&#37327;&#25351;&#23450;&#19968;&#20010;&#31867;&#22411;&#12290; &#36825;&#20123;&#20540;&#21487;&#33021;&#26469;&#33258;&#20110;&#21160;&#24577;&#30340;&#20869;&#23481;&#65292;&#27604;&#22914;&#26469;&#33258;&#29992;&#25143;&#36755;&#20837;&#25110;&#31532;&#19977;&#26041;&#20195;&#30721;&#24211;&#12290; &#36825;&#31181;&#24773;&#20917;&#19979;&#65292;&#25105;&#20204;&#19981;&#24076;&#26395;&#31867;&#22411;&#26816;&#26597;&#22120;&#23545;&#36825;&#20123;&#20540;&#36827;&#34892;&#26816;&#26597;&#32780;&#26159;&#30452;&#25509;&#35753;&#23427;&#20204;&#36890;&#36807;&#32534;&#35793;&#38454;&#27573;&#30340;&#26816;&#26597;&#12290; &#37027;&#20040;&#25105;&#20204;&#21487;&#20197;&#20351;&#29992; any&#31867;&#22411;&#26469;&#26631;&#35760;&#36825;&#20123;&#21464;&#37327;&#65306;
    </p>
    <p>
      let notSure: any = 4;
    </p>
    <p>
      notSure = &quot;maybe a string instead&quot;;
    </p>
    <p>
      notSure = false; // okay, definitely a boolean
    </p>
    <p>
      &#22312;&#23545;&#29616;&#26377;&#20195;&#30721;&#36827;&#34892;&#25913;&#20889;&#30340;&#26102;&#20505;&#65292;any&#31867;&#22411;&#26159;&#21313;&#20998;&#26377;&#29992;&#30340;&#65292;&#23427;&#20801;&#35768;&#20320;&#22312;&#32534;&#35793;&#26102;&#21487;&#36873;&#25321;&#22320;&#21253;&#21547;&#25110;&#31227;&#38500;&#31867;&#22411;&#26816;&#26597;&#12290; &#20320;&#21487;&#33021;&#35748;&#20026; Object&#26377;&#30456;&#20284;&#30340;&#20316;&#29992;&#65292;&#23601;&#20687;&#23427;&#22312;&#20854;&#23427;&#35821;&#35328;&#20013;&#37027;&#26679;&#12290; &#20294;&#26159; Object&#31867;&#22411;&#30340;&#21464;&#37327;&#21482;&#26159;&#20801;&#35768;&#20320;&#32473;&#23427;&#36171;&#20219;&#24847;&#20540; - &#20294;&#26159;&#21364;&#19981;&#33021;&#22815;&#22312;&#23427;&#19978;&#38754;&#35843;&#29992;&#20219;&#24847;&#30340;&#26041;&#27861;&#65292;&#21363;&#20415;&#23427;&#30495;&#30340;&#26377;&#36825;&#20123;&#26041;&#27861;&#65288;&#25968;&#23383;&#26377;toFixed&#26041;&#27861;&#65292;&#20294;&#26159;Object&#20013;&#27809;&#26377;&#35813;&#26041;&#27861;&#65289;&#65306;
    </p>
    <p>
      let notSure: any = 4;
    </p>
    <p>
      notSure.ifItExists(); // okay, ifItExists might exist at runtime
    </p>
    <p>
      notSure.toFixed(); // okay, toFixed exists (but the compiler doesn't check)
    </p>
    <p>
      let prettySure: Object = 4;
    </p>
    <p>
      prettySure.toFixed(); // Error: Property 'toFixed' doesn't exist on type 'Object'.
    </p>
    <p>
      &#24403;&#20320;&#21482;&#30693;&#36947;&#19968;&#37096;&#20998;&#25968;&#25454;&#30340;&#31867;&#22411;&#26102;&#65292;any&#31867;&#22411;&#20063;&#26159;&#26377;&#29992;&#30340;&#12290; &#27604;&#22914;&#65292;&#20320;&#26377;&#19968;&#20010;&#25968;&#32452;&#65292;&#23427;&#21253;&#21547;&#20102;&#19981;&#21516;&#30340;&#31867;&#22411;&#30340;&#25968;&#25454;&#65306;
    </p>
    <p>
      let list: any[] = [1, true, &quot;free&quot;];
    </p>
    <p>
      list[1] = 100;
    </p>
    <p>
      &#20061;&#12289;Void
    </p>
    <p>
      &#26576;&#31181;&#31243;&#24230;&#19978;&#26469;&#35828;&#65292;void&#31867;&#22411;&#20687;&#26159;&#19982;any&#31867;&#22411;&#30456;&#21453;&#65292;&#23427;&#34920;&#31034;&#27809;&#26377;&#20219;&#20309;&#31867;&#22411;&#12290; &#24403;&#19968;&#20010;&#20989;&#25968;&#27809;&#26377;&#36820;&#22238;&#20540;&#26102;&#65292;&#20320;&#36890;&#24120;&#20250;&#35265;&#21040;&#20854;&#36820;&#22238;&#20540;&#31867;&#22411;&#26159; void&#65306;
    </p>
    <p>
      function warnUser(): void {
    </p>
    <p>
      &#160;&#160;&#160;&#160;alert(&quot;This is my warning message&quot;);
    </p>
    <p>
      }
    </p>
    <p>
      &#22768;&#26126;&#19968;&#20010;void&#31867;&#22411;&#30340;&#21464;&#37327;&#27809;&#26377;&#20160;&#20040;&#22823;&#29992;&#65292;&#22240;&#20026;&#20320;&#21482;&#33021;&#20026;&#23427;&#36171;&#20104;undefined&#21644;null&#65306;
    </p>
    <p>
      let unusable: void = undefined;
    </p>
    <p>
      &#21313;&#12289;Null&#21644;Undefined
    </p>
    <p>
      TypeScript&#37324;&#65292;undefined&#21644;null&#20004;&#32773;&#21508;&#33258;&#26377;&#33258;&#24049;&#30340;&#31867;&#22411;&#20998;&#21035;&#21483;&#20570;undefined&#21644;null&#12290; &#21644; void&#30456;&#20284;&#65292;&#23427;&#20204;&#30340;&#26412;&#36523;&#30340;&#31867;&#22411;&#29992;&#22788;&#19981;&#26159;&#24456;&#22823;&#65306;
    </p>
    <p>
      // Not much else we can assign to these variables!
    </p>
    <p>
      let u: undefined = undefined;
    </p>
    <p>
      let n: null = null;
    </p>
    <p>
      &#40664;&#35748;&#24773;&#20917;&#19979;null&#21644;undefined&#26159;&#25152;&#26377;&#31867;&#22411;&#30340;&#23376;&#31867;&#22411;&#12290; &#23601;&#26159;&#35828;&#20320;&#21487;&#20197;&#25226; null&#21644;undefined&#36171;&#20540;&#32473;number&#31867;&#22411;&#30340;&#21464;&#37327;&#12290;
    </p>
    <p>
      &#28982;&#32780;&#65292;&#24403;&#20320;&#25351;&#23450;&#20102;--strictNullChecks&#26631;&#35760;&#65292;null&#21644;undefined&#21482;&#33021;&#36171;&#20540;&#32473;void&#21644;&#23427;&#20204;&#21508;&#33258;&#12290; &#36825;&#33021;&#36991;&#20813; &#24456;&#22810;&#24120;&#35265;&#30340;&#38382;&#39064;&#12290; &#20063;&#35768;&#22312;&#26576;&#22788;&#20320;&#24819;&#20256;&#20837;&#19968;&#20010; string&#25110;null&#25110;undefined&#65292;&#20320;&#21487;&#20197;&#20351;&#29992;&#32852;&#21512;&#31867;&#22411;string | null | undefined&#12290; &#20877;&#27425;&#35828;&#26126;&#65292;&#31245;&#21518;&#25105;&#20204;&#20250;&#20171;&#32461;&#32852;&#21512;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#21313;&#19968;&#12289;Never
    </p>
    <p>
      never&#31867;&#22411;&#34920;&#31034;&#30340;&#26159;&#37027;&#20123;&#27704;&#19981;&#23384;&#22312;&#30340;&#20540;&#30340;&#31867;&#22411;&#12290; &#20363;&#22914;&#65292; never&#31867;&#22411;&#26159;&#37027;&#20123;&#24635;&#26159;&#20250;&#25243;&#20986;&#24322;&#24120;&#25110;&#26681;&#26412;&#23601;&#19981;&#20250;&#26377;&#36820;&#22238;&#20540;&#30340;&#20989;&#25968;&#34920;&#36798;&#24335;&#25110;&#31661;&#22836;&#20989;&#25968;&#34920;&#36798;&#24335;&#30340;&#36820;&#22238;&#20540;&#31867;&#22411;&#65307; &#21464;&#37327;&#20063;&#21487;&#33021;&#26159; never&#31867;&#22411;&#65292;&#24403;&#23427;&#20204;&#34987;&#27704;&#19981;&#20026;&#30495;&#30340;&#31867;&#22411;&#20445;&#25252;&#25152;&#32422;&#26463;&#26102;&#12290;
    </p>
    <p>
      never&#31867;&#22411;&#26159;&#20219;&#20309;&#31867;&#22411;&#30340;&#23376;&#31867;&#22411;&#65292;&#20063;&#21487;&#20197;&#36171;&#20540;&#32473;&#20219;&#20309;&#31867;&#22411;&#65307;&#28982;&#32780;&#65292;&#27809;&#26377;&#31867;&#22411;&#26159;never&#30340;&#23376;&#31867;&#22411;&#25110;&#21487;&#20197;&#36171;&#20540;&#32473;never&#31867;&#22411;&#65288;&#38500;&#20102;never&#26412;&#36523;&#20043;&#22806;&#65289;&#12290; &#21363;&#20351; any&#20063;&#19981;&#21487;&#20197;&#36171;&#20540;&#32473;never&#12290;
    </p>
    <p>
      &#19979;&#38754;&#26159;&#19968;&#20123;&#36820;&#22238;never&#31867;&#22411;&#30340;&#20989;&#25968;&#65306;
    </p>
    <p>
      // &#36820;&#22238;never&#30340;&#20989;&#25968;&#24517;&#39035;&#23384;&#22312;&#26080;&#27861;&#36798;&#21040;&#30340;&#32456;&#28857;
    </p>
    <p>
      function error(message: string): never {
    </p>
    <p>
      &#160;&#160;&#160;&#160;throw new Error(message);
    </p>
    <p>
      }
    </p>
    <p>
      // &#25512;&#26029;&#30340;&#36820;&#22238;&#20540;&#31867;&#22411;&#20026;never
    </p>
    <p>
      function fail() {
    </p>
    <p>
      &#160;&#160;&#160;&#160;return error(&quot;Something failed&quot;);
    </p>
    <p>
      }
    </p>
    <p>
      // &#36820;&#22238;never&#30340;&#20989;&#25968;&#24517;&#39035;&#23384;&#22312;&#26080;&#27861;&#36798;&#21040;&#30340;&#32456;&#28857;
    </p>
    <p>
      function infiniteLoop(): never {
    </p>
    <p>
      &#160;&#160;&#160;&#160;while (true) {
    </p>
    <p>
      &#160;&#160;&#160;&#160;}
    </p>
    <p>
      }
    </p>
    <p>
      &#21313;&#20108;&#12289;&#31867;&#22411;&#26029;&#35328;
    </p>
    <p>
      &#26377;&#26102;&#20505;&#20320;&#20250;&#36935;&#21040;&#36825;&#26679;&#30340;&#24773;&#20917;&#65292;&#20320;&#20250;&#27604;TypeScript&#26356;&#20102;&#35299;&#26576;&#20010;&#20540;&#30340;&#35814;&#32454;&#20449;&#24687;&#12290; &#36890;&#24120;&#36825;&#20250;&#21457;&#29983;&#22312;&#20320;&#28165;&#26970;&#22320;&#30693;&#36947;&#19968;&#20010;&#23454;&#20307;&#20855;&#26377;&#27604;&#23427;&#29616;&#26377;&#31867;&#22411;&#26356;&#30830;&#20999;&#30340;&#31867;&#22411;&#12290;
    </p>
    <p>
      &#36890;&#36807;&#31867;&#22411;&#26029;&#35328;&#36825;&#31181;&#26041;&#24335;&#21487;&#20197;&#21578;&#35785;&#32534;&#35793;&#22120;&#65292;&#8220;&#30456;&#20449;&#25105;&#65292;&#25105;&#30693;&#36947;&#33258;&#24049;&#22312;&#24178;&#20160;&#20040;&#8221;&#12290; &#31867;&#22411;&#26029;&#35328;&#22909;&#27604;&#20854;&#23427;&#35821;&#35328;&#37324;&#30340;&#31867;&#22411;&#36716;&#25442;&#65292;&#20294;&#26159;&#19981;&#36827;&#34892;&#29305;&#27530;&#30340;&#25968;&#25454;&#26816;&#26597;&#21644;&#35299;&#26500;&#12290; &#23427;&#27809;&#26377;&#36816;&#34892;&#26102;&#30340;&#24433;&#21709;&#65292;&#21482;&#26159;&#22312;&#32534;&#35793;&#38454;&#27573;&#36215;&#20316;&#29992;&#12290; TypeScript&#20250;&#20551;&#35774;&#20320;&#65292;&#31243;&#24207;&#21592;&#65292;&#24050;&#32463;&#36827;&#34892;&#20102;&#24517;&#39035;&#30340;&#26816;&#26597;&#12290;
    </p>
    <p>
      &#31867;&#22411;&#26029;&#35328;&#26377;&#20004;&#31181;&#24418;&#24335;&#12290; &#20854;&#19968;&#26159;&#8220;&#23574;&#25324;&#21495;&#8221;&#35821;&#27861;&#65306;
    </p>
    <p>
      let someValue: any = &quot;this is a string&quot;;
    </p>
    <p>
      let strLength: number = (&lt;string&gt;someValue).length;
    </p>
    <p>
      &#21478;&#19968;&#20010;&#20026;as&#35821;&#27861;&#65306;
    </p>
    <p>
      let someValue: any = &quot;this is a string&quot;;
    </p>
    <p>
      let strLength: number = (someValue as string).length;
    </p>
    <p>
      &#20004;&#31181;&#24418;&#24335;&#26159;&#31561;&#20215;&#30340;&#12290; &#33267;&#20110;&#20351;&#29992;&#21738;&#20010;&#22823;&#22810;&#25968;&#24773;&#20917;&#19979;&#26159;&#20973;&#20010;&#20154;&#21916;&#22909;&#65307;&#28982;&#32780;&#65292;&#24403;&#20320;&#22312;TypeScript&#37324;&#20351;&#29992;JSX&#26102;&#65292;&#21482;&#26377; as&#35821;&#27861;&#26029;&#35328;&#26159;&#34987;&#20801;&#35768;&#30340;&#12290;
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1508074799467" ID="ID_365513339" MODIFIED="1508074802930" POSITION="right" TEXT="&#x53d8;&#x91cf;&#x58f0;&#x660e;">
<node CREATED="1508153914076" ID="ID_298872295" MODIFIED="1508154215928">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      var&#22768;&#26126;
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1508154219378" ID="ID_1929333545" MODIFIED="1508154572655">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      let&#22768;&#26126;
    </p>
    <p>
      1&#12289;&#24403;&#29992;let&#22768;&#26126;&#19968;&#20010;&#21464;&#37327;&#65292;&#23427;&#20351;&#29992;&#30340;&#26159;&#35789;&#27861;&#20316;&#29992;&#22495;&#25110;&#22359;&#20316;&#29992;&#22495;&#12290; &#19981;&#21516;&#20110;&#20351;&#29992; var&#22768;&#26126;&#30340;&#21464;&#37327;&#37027;&#26679;&#21487;&#20197;&#22312;&#21253;&#21547;&#23427;&#20204;&#30340;&#20989;&#25968;&#22806;&#35775;&#38382;&#65292;&#22359;&#20316;&#29992;&#22495;&#21464;&#37327;&#22312;&#21253;&#21547;&#23427;&#20204;&#30340;&#22359;&#25110;for&#24490;&#29615;&#20043;&#22806;&#26159;&#19981;&#33021;&#35775;&#38382;&#30340;&#12290;
    </p>
    <p>
      2&#12289;&#25317;&#26377;&#22359;&#32423;&#20316;&#29992;&#22495;&#30340;&#21464;&#37327;&#30340;&#21478;&#19968;&#20010;&#29305;&#28857;&#26159;&#65292;&#23427;&#20204;&#19981;&#33021;&#22312;&#34987;&#22768;&#26126;&#20043;&#21069;&#35835;&#25110;&#20889;&#12290; &#34429;&#28982;&#36825;&#20123;&#21464;&#37327;&#22987;&#32456;&#8220;&#23384;&#22312;&#8221;&#20110;&#23427;&#20204;&#30340;&#20316;&#29992;&#22495;&#37324;&#65292;&#20294;&#22312;&#30452;&#21040;&#22768;&#26126;&#23427;&#30340;&#20195;&#30721;&#20043;&#21069;&#30340;&#21306;&#22495;&#37117;&#23646;&#20110; &#26242;&#26102;&#24615;&#27515;&#21306;&#12290; &#23427;&#21482;&#26159;&#29992;&#26469;&#35828;&#26126;&#25105;&#20204;&#19981;&#33021;&#22312; let&#35821;&#21477;&#20043;&#21069;&#35775;&#38382;&#23427;&#20204;&#65292;&#24184;&#36816;&#30340;&#26159;TypeScript&#21487;&#20197;&#21578;&#35785;&#25105;&#20204;&#36825;&#20123;&#20449;&#24687;&#12290;
    </p>
    <p>
      a++; // illegal to use 'a' before it's declared;
    </p>
    <p>
      let a;
    </p>
  </body>
</html>
</richcontent>
</node>
<node CREATED="1508156020903" ID="ID_306476421" MODIFIED="1508156027380" TEXT="const&#x58f0;&#x660e;"/>
</node>
</node>
</map>
